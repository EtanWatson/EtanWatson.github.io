<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EWSUN</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-15T07:31:19.785Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>EtanWatson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zookeeper的集群搭建</title>
    <link href="http://yoursite.com/2018/04/14/Hadoop%E7%9B%B8%E5%85%B3/zookeeper%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/04/14/Hadoop相关/zookeeper的集群搭建/</id>
    <published>2018-04-14T02:45:33.034Z</published>
    <updated>2018-04-15T07:31:19.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper的集群搭建"><a href="#zookeeper的集群搭建" class="headerlink" title="zookeeper的集群搭建"></a>zookeeper的集群搭建</h1><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><ul><li><p>选举算法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PAXOS Zab</div></pre></td></tr></table></figure></li><li><p>prot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server.1=192.168.2.2:2888(通信):3888(选举)</div><div class="line">server.2=192.168.2.3:2888:3888</div></pre></td></tr></table></figure></li></ul><ul><li><p>jps</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1890 Jps</div><div class="line">1768 QuorumPeerMain</div></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cp zoo_sample.cfg zoo.cfg</div><div class="line"></div><div class="line">vi zoo.cfg</div><div class="line"></div><div class="line">dataDir=/usr/apps/zookeeper/data  # data文件夹需新建</div><div class="line"># dataLogDir=/usr/apps/zookeeper/log #log文件夹 需新建</div><div class="line">server.1=192.168.2.2:2888:3888</div><div class="line">server.2=192.168.2.4:2888:3888</div><div class="line">server.3=192.168.2.5:2888:3888</div><div class="line"></div><div class="line">mkdir data # 在dataDor中指定的文件夹下新建</div><div class="line">vi myid</div><div class="line">1 # 在myid中加入内容1，其他的机器上依次为2,3</div><div class="line"></div><div class="line">./zkServer.sh start # bin下</div><div class="line">./zkServer.sh status # bin 下</div></pre></td></tr></table></figure></li></ul><ul><li>出现的问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1、/tmp/zookeeper: binary operator expected ./zkServer.sh: line 103: /tmp/zookeeper</div><div class="line">2、/usr/apps/zookeeper/data/zookeeper_server.pid: No such file or directory</div></pre></td></tr></table></figure><p>参考解决方案：</p><h2 id="命令行客户端-zkCli-sh"><a href="#命令行客户端-zkCli-sh" class="headerlink" title="命令行客户端 zkCli.sh"></a>命令行客户端 zkCli.sh</h2><ul><li>启动 ./zkCli.sh</li><li>zookeeper数据结构：树型结构 znode</li><li>get 获取</li><li>create (短暂e，持久,) 是否带序号(-s)</li><li><p>set 更新</p></li><li><p>watch<br>默认监听一次，想一直监听的话，在process再绑定一个监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">new Watcher() &#123;  //匿名内部类</div><div class="line">@Override</div><div class="line">public void process(WatchedEvent event) &#123;</div><div class="line">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</div><div class="line">System.out.println(event.getType() + &quot;---&quot; + event.getPath());</div><div class="line">try &#123;</div><div class="line">zk.getChildren(&quot;/&quot;, true); //继续监听</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="使用java-api-Clinet"><a href="#使用java-api-Clinet" class="headerlink" title="使用java-api Clinet"></a>使用java-api Clinet</h2><ul><li>netty 异步io（NIO）的封装框架</li><li>SimpleZkClient</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">import java.io.IOException;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.zookeeper.CreateMode;</div><div class="line">import org.apache.zookeeper.KeeperException;</div><div class="line">import org.apache.zookeeper.WatchedEvent;</div><div class="line">import org.apache.zookeeper.Watcher;</div><div class="line">import org.apache.zookeeper.ZooDefs.Ids;</div><div class="line">import org.apache.zookeeper.ZooKeeper;</div><div class="line">import org.apache.zookeeper.data.Stat;</div><div class="line">import org.junit.Before;</div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">public class SimpleZkClient &#123;</div><div class="line"></div><div class="line">private static final String connectString = &quot;mini1:2181,mini2:2181,mini3:2181&quot;;</div><div class="line">private static final int sessionTimeout = 2000;</div><div class="line"></div><div class="line">ZooKeeper zkClient = null;</div><div class="line"></div><div class="line">@Before</div><div class="line">public void init() throws Exception &#123;</div><div class="line">zkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;</div><div class="line">@Override</div><div class="line">public void process(WatchedEvent event) &#123;</div><div class="line">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</div><div class="line">System.out.println(event.getType() + &quot;---&quot; + event.getPath());</div><div class="line">try &#123;</div><div class="line">zkClient.getChildren(&quot;/&quot;, true);</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 数据的增删改查</div><div class="line"> * </div><div class="line"> * @throws InterruptedException</div><div class="line"> * @throws KeeperException</div><div class="line"> */</div><div class="line"></div><div class="line">// 创建数据节点到zk中</div><div class="line">public void testCreate() throws KeeperException, InterruptedException &#123;</div><div class="line">// 参数1：要创建的节点的路径 参数2：节点大数据 参数3：节点的权限 参数4：节点的类型</div><div class="line">String nodeCreated = zkClient.create(&quot;/eclipse&quot;, &quot;hellozk&quot;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class="line">//上传的数据可以是任何类型，但都要转成byte[]</div><div class="line">&#125;</div><div class="line"></div><div class="line">//判断znode是否存在</div><div class="line">@Test</div><div class="line">public void testExist() throws Exception&#123;</div><div class="line">Stat stat = zkClient.exists(&quot;/eclipse&quot;, false);</div><div class="line">System.out.println(stat==null?&quot;not exist&quot;:&quot;exist&quot;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 获取子节点</div><div class="line">@Test</div><div class="line">public void getChildren() throws Exception &#123;</div><div class="line">List&lt;String&gt; children = zkClient.getChildren(&quot;/&quot;, true);</div><div class="line">for (String child : children) &#123;</div><div class="line">System.out.println(child);</div><div class="line">&#125;</div><div class="line">Thread.sleep(Long.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//获取znode的数据</div><div class="line">@Test</div><div class="line">public void getData() throws Exception &#123;</div><div class="line"></div><div class="line">byte[] data = zkClient.getData(&quot;/eclipse&quot;, false, null);</div><div class="line">System.out.println(new String(data));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//删除znode</div><div class="line">@Test</div><div class="line">public void deleteZnode() throws Exception &#123;</div><div class="line"></div><div class="line">//参数2：指定要删除的版本，-1表示删除所有版本</div><div class="line">zkClient.delete(&quot;/eclipse&quot;, -1);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">//删除znode</div><div class="line">@Test</div><div class="line">public void setData() throws Exception &#123;</div><div class="line"></div><div class="line">zkClient.setData(&quot;/app1&quot;, &quot;imissyou angelababy&quot;.getBytes(), -1);</div><div class="line"></div><div class="line">byte[] data = zkClient.getData(&quot;/app1&quot;, false, null);</div><div class="line">System.out.println(new String(data));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>DistributedClient</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.zookeeper.KeeperException;</div><div class="line">import org.apache.zookeeper.WatchedEvent;</div><div class="line">import org.apache.zookeeper.Watcher;</div><div class="line">import org.apache.zookeeper.ZooKeeper;</div><div class="line"></div><div class="line">public class DistributedClient &#123;</div><div class="line"></div><div class="line">private static final String connectString = &quot;mini1:2181,mini2:2181,mini3:2181&quot;;</div><div class="line">private static final int sessionTimeout = 2000;</div><div class="line">private static final String parentNode = &quot;/servers&quot;;</div><div class="line">// 注意:加volatile的意义何在？</div><div class="line">private volatile List&lt;String&gt; serverList;</div><div class="line">private ZooKeeper zk = null;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 创建到zk的客户端连接</div><div class="line"> * </div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">public void getConnect() throws Exception &#123;</div><div class="line"></div><div class="line">zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;</div><div class="line">@Override</div><div class="line">public void process(WatchedEvent event) &#123;</div><div class="line">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</div><div class="line">try &#123;</div><div class="line">//重新更新服务器列表，并且注册了监听</div><div class="line">getServerList();</div><div class="line"></div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 获取服务器信息列表</div><div class="line"> * </div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">public void getServerList() throws Exception &#123;</div><div class="line"></div><div class="line">// 获取服务器子节点信息，并且对父节点进行监听</div><div class="line">List&lt;String&gt; children = zk.getChildren(parentNode, true);</div><div class="line"></div><div class="line">// 先创建一个局部的list来存服务器信息</div><div class="line">List&lt;String&gt; servers = new ArrayList&lt;String&gt;();</div><div class="line">for (String child : children) &#123;</div><div class="line">// child只是子节点的节点名</div><div class="line">byte[] data = zk.getData(parentNode + &quot;/&quot; + child, false, null);</div><div class="line">servers.add(new String(data));</div><div class="line">&#125;</div><div class="line">// 把servers赋值给成员变量serverList，已提供给各业务线程使用</div><div class="line">serverList = servers;</div><div class="line"></div><div class="line">//打印服务器列表</div><div class="line">System.out.println(serverList);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 业务功能</div><div class="line"> * </div><div class="line"> * @throws InterruptedException</div><div class="line"> */</div><div class="line">public void handleBussiness() throws InterruptedException &#123;</div><div class="line">System.out.println(&quot;client start working.....&quot;);</div><div class="line">Thread.sleep(Long.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line"></div><div class="line">// 获取zk连接</div><div class="line">DistributedClient client = new DistributedClient();</div><div class="line">client.getConnect();</div><div class="line">// 获取servers的子节点信息（并监听），从中获取服务器信息列表</div><div class="line">client.getServerList();</div><div class="line"></div><div class="line">// 业务线程启动</div><div class="line">client.handleBussiness();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>DistributionServer </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">    import org.apache.zookeeper.CreateMode;</div><div class="line">    import org.apache.zookeeper.WatchedEvent;</div><div class="line">    import org.apache.zookeeper.Watcher;</div><div class="line">    import org.apache.zookeeper.ZooDefs.Ids;</div><div class="line">    import org.apache.zookeeper.ZooKeeper;</div><div class="line">    </div><div class="line">    public class DistributedServer &#123;</div><div class="line">        private static final String connectString =&quot;mini1:2181,mini2:2181,mini3:2181&quot;;</div><div class="line">        private static final int sessionTimeout = 2000;</div><div class="line">        private static final String parentNode = &quot;/servers&quot;;</div><div class="line">        private ZooKeeper zk = null;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 创建到zk的客户端连接</div><div class="line"> * </div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">public void getConnect() throws Exception &#123;</div><div class="line">   zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;</div><div class="line">       @Override</div><div class="line">       public void process(WatchedEvent event) &#123;</div><div class="line">       // 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</div><div class="line">       System.out.println(event.getType() + &quot;---&quot; + event.getPath());</div><div class="line">       try &#123;</div><div class="line">           zk.getChildren(&quot;/&quot;, true);</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 向zk集群注册服务器信息</div><div class="line"> * </div><div class="line"> * @param hostname</div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">public void registerServer(String hostname) throws Exception &#123;</div><div class="line">   String create = zk.create(parentNode + &quot;/server&quot;,</div><div class="line">   hostname.getBytes(), Ids.OPEN_ACL_UNSAFE,</div><div class="line">   CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">   System.out.println(hostname + &quot;is online..&quot; + create);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 业务功能</div><div class="line"> * </div><div class="line"> * @throws InterruptedException</div><div class="line"> */</div><div class="line">public void handleBussiness(String hostname) throws InterruptedException &#123;</div><div class="line">   System.out.println(hostname + &quot;start working.....&quot;);</div><div class="line">   Thread.sleep(Long.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">   // 获取zk连接</div><div class="line">   DistributedServer server = new DistributedServer();</div><div class="line">   server.getConnect();</div><div class="line">   </div><div class="line">   // 利用zk连接注册服务器信息</div><div class="line">   server.registerServer(args[0]);</div><div class="line">   </div><div class="line">   // 启动业务功能</div><div class="line">   server.handleBussiness(args[0]);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> public class Test &#123;</div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">   System.out.println(&quot;主线程开始了&quot;);</div><div class="line">   Thread thread = new Thread(new Runnable() &#123;</div><div class="line">@Override</div><div class="line">public void run() &#123;</div><div class="line">System.out.println(&quot;线程开始了&quot;);</div><div class="line">while(true)&#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">thread.setDaemon(true);</div><div class="line">thread.start();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ul><li>DistributedClentLock</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">import org.apache.zookeeper.CreateMode;</div><div class="line">import org.apache.zookeeper.WatchedEvent;</div><div class="line">import org.apache.zookeeper.Watcher;</div><div class="line">import org.apache.zookeeper.Watcher.Event.EventType;</div><div class="line">import org.apache.zookeeper.ZooDefs.Ids;</div><div class="line">import org.apache.zookeeper.ZooKeeper;</div><div class="line"></div><div class="line">public class DistributedClientLock &#123;</div><div class="line"></div><div class="line"></div><div class="line">// 会话超时</div><div class="line">private static final int SESSION_TIMEOUT = 2000;</div><div class="line">// zookeeper集群地址</div><div class="line">private String hosts = &quot;mini1:2181,mini2:2181,mini3:2181&quot;;</div><div class="line">private String groupNode = &quot;locks&quot;;</div><div class="line">private String subNode = &quot;sub&quot;;</div><div class="line">private boolean haveLock = false;</div><div class="line"></div><div class="line">private ZooKeeper zk;</div><div class="line">// 记录自己创建的子节点路径</div><div class="line">private volatile String thisPath;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 连接zookeeper</div><div class="line"> */</div><div class="line">public void connectZookeeper() throws Exception &#123;</div><div class="line">zk = new ZooKeeper(hosts, SESSION_TIMEOUT, new Watcher() &#123;</div><div class="line">public void process(WatchedEvent event) &#123;</div><div class="line">try &#123;</div><div class="line"></div><div class="line">// 判断事件类型，此处只处理子节点变化事件</div><div class="line">if (event.getType() == EventType.NodeChildrenChanged &amp;&amp; event.getPath().equals(&quot;/&quot; + groupNode)) &#123;</div><div class="line">//获取子节点，并对父节点进行监听</div><div class="line">List&lt;String&gt; childrenNodes = zk.getChildren(&quot;/&quot; + groupNode, true);</div><div class="line">String thisNode = thisPath.substring((&quot;/&quot; + groupNode + &quot;/&quot;).length());</div><div class="line">// 去比较是否自己是最小id</div><div class="line">Collections.sort(childrenNodes);</div><div class="line">if (childrenNodes.indexOf(thisNode) == 0) &#123;</div><div class="line">//访问共享资源处理业务，并且在处理完成之后删除锁</div><div class="line">doSomething();</div><div class="line"></div><div class="line">//重新注册一把新的锁</div><div class="line">thisPath = zk.create(&quot;/&quot; + groupNode + &quot;/&quot; + subNode, null, Ids.OPEN_ACL_UNSAFE,</div><div class="line">CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 1、程序一进来就先注册一把锁到zk上</div><div class="line">thisPath = zk.create(&quot;/&quot; + groupNode + &quot;/&quot; + subNode, null, Ids.OPEN_ACL_UNSAFE,</div><div class="line">CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line"></div><div class="line">// wait一小会，便于观察</div><div class="line">Thread.sleep(new Random().nextInt(1000));</div><div class="line"></div><div class="line">// 从zk的锁父目录下，获取所有子节点，并且注册对父节点的监听</div><div class="line">List&lt;String&gt; childrenNodes = zk.getChildren(&quot;/&quot; + groupNode, true);</div><div class="line"></div><div class="line">//如果争抢资源的程序就只有自己，则可以直接去访问共享资源 </div><div class="line">if (childrenNodes.size() == 1) &#123;</div><div class="line">doSomething();</div><div class="line">thisPath = zk.create(&quot;/&quot; + groupNode + &quot;/&quot; + subNode, null, Ids.OPEN_ACL_UNSAFE,</div><div class="line">CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 处理业务逻辑，并且在最后释放锁</div><div class="line"> */</div><div class="line">private void doSomething() throws Exception &#123;</div><div class="line">try &#123;</div><div class="line">System.out.println(&quot;gain lock: &quot; + thisPath);</div><div class="line">Thread.sleep(2000);</div><div class="line">// do something</div><div class="line">&#125; finally &#123;</div><div class="line">System.out.println(&quot;finished: &quot; + thisPath);</div><div class="line">zk.delete(this.thisPath, -1);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">DistributedClientLock dl = new DistributedClientLock();</div><div class="line">dl.connectZookeeper();</div><div class="line">Thread.sleep(Long.MAX_VALUE);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zookeeper的集群搭建&quot;&gt;&lt;a href=&quot;#zookeeper的集群搭建&quot; class=&quot;headerlink&quot; title=&quot;zookeeper的集群搭建&quot;&gt;&lt;/a&gt;zookeeper的集群搭建&lt;/h1&gt;&lt;h2 id=&quot;zookeeper&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>自动化部署脚本</title>
    <link href="http://yoursite.com/2018/04/14/Hadoop%E7%9B%B8%E5%85%B3/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/04/14/Hadoop相关/自动化部署脚本/</id>
    <published>2018-04-14T02:12:51.733Z</published>
    <updated>2018-04-15T07:30:32.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动化部署脚本"><a href="#自动化部署脚本" class="headerlink" title="自动化部署脚本"></a>自动化部署脚本</h1><h2 id="实现ssh通路"><a href="#实现ssh通路" class="headerlink" title="实现ssh通路"></a>实现ssh通路</h2><ul><li><p>expect 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum -y install  expect </div><div class="line">yum -y install expect-devel</div><div class="line"># 安装expect的时候，应该已经装好这个依赖了，如果没有装好，安装一下</div><div class="line">yum -y install tcl</div></pre></td></tr></table></figure></li></ul><ul><li><p>脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  #!/bin/bash</div><div class="line">  SERVERS=&quot;192.168.2.4 192.168.2.5&quot;</div><div class="line">  PASSWORD=123456</div><div class="line">  auto_ssh_copy_id() &#123;</div><div class="line">    expect -c &quot;set timeout -1;</div><div class="line">        spawn ssh-copy-id $1;</div><div class="line">        expect &#123;</div><div class="line">            *(yes/no)* &#123;send -- yes\r;exp_continue;&#125;</div><div class="line">            *assword:* &#123;send -- $2\r;exp_continue;&#125;</div><div class="line">            eof        &#123;exit 0;&#125;</div><div class="line">        &#125;&quot;;</div><div class="line"> &#125;</div><div class="line">ssh_copy_id_to_all() &#123;</div><div class="line">    for SERVER in $SERVERS</div><div class="line">        do</div><div class="line">            auto_ssh_copy_id $SERVER $PASSWORD</div><div class="line">        done</div><div class="line">&#125;</div><div class="line">ssh_copy_id_to_all</div><div class="line"># 这里是将install.sh脚本copy到各台机器上，然后运行</div><div class="line">for SERVER in $SERVERS</div><div class="line">    do</div><div class="line">        scp install.sh root@$SERVER:/root</div><div class="line">        ssh root@$SERVER /root/install.sh</div><div class="line">    done</div><div class="line">  ``` </div><div class="line"></div><div class="line">## 自动化安装jdk</div><div class="line">install.sh</div></pre></td></tr></table></figure></li></ul><p>#!/bin/bash</p><h1 id="下载安装包的服务器地址"><a href="#下载安装包的服务器地址" class="headerlink" title="下载安装包的服务器地址"></a>下载安装包的服务器地址</h1><p>BASE_SERVER=192.168.2.2<br>yum install -y wget<br>wget $BASE_SERVER/software/jdk-8u161-linux-x64.tar.gz<br>tar -zxvf jdk-8u161-linux-x64.tar.gz -C /usr/share</p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>cat &gt;&gt; /etc/profile &lt;&lt; EOF<br>export JAVA_HOME=/usr/share/jdk1.8.0_161<br>export PATH=\$PATH:\$JAVA_HOME/bin<br>EOF</p><p>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动化部署脚本&quot;&gt;&lt;a href=&quot;#自动化部署脚本&quot; class=&quot;headerlink&quot; title=&quot;自动化部署脚本&quot;&gt;&lt;/a&gt;自动化部署脚本&lt;/h1&gt;&lt;h2 id=&quot;实现ssh通路&quot;&gt;&lt;a href=&quot;#实现ssh通路&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Linux相关杂记</title>
    <link href="http://yoursite.com/2018/04/14/Hadoop%E7%9B%B8%E5%85%B3/Linux%E7%9B%B8%E5%85%B3%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/14/Hadoop相关/Linux相关杂记/</id>
    <published>2018-04-14T02:10:54.995Z</published>
    <updated>2018-04-15T07:20:51.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux相关杂记"><a href="#Linux相关杂记" class="headerlink" title="Linux相关杂记"></a>Linux相关杂记</h1><h5 id="关于httpd-服务"><a href="#关于httpd-服务" class="headerlink" title="关于httpd 服务"></a>关于httpd 服务</h5><blockquote><p>启动以后，会在 /var/www/html/下生成静态页面</p></blockquote><h5 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h5><blockquote><p>ln -s /xx/xxx（源文件）  /xx/xx(目标文件)</p></blockquote><h5 id="制作局域网内的yum仓库"><a href="#制作局域网内的yum仓库" class="headerlink" title="制作局域网内的yum仓库"></a>制作局域网内的yum仓库</h5><blockquote><p>使用httpd服务以及软连接，然后在yum.repo.d指向它</p></blockquote><h5 id="scp的用法"><a href="#scp的用法" class="headerlink" title="scp的用法"></a>scp的用法</h5><p>例如： A的地址为：192.168.2.2 B的地址为192.168.2.3</p><blockquote><p>scp[参数][原路径][目标路径]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scp -r root@192.168.2.3:/home/demo /root #将远程机器上的/home/demo 下的所有文件复制到本地/root下</div><div class="line">scp -r /home/demo root@192.168.2.3:/root #将本地机器上的/home/demo 下的所有文件复制到远程机器/root下</div></pre></td></tr></table></figure><h4 id="修改-etc-profile文件后，命令都不能使用的解决方案"><a href="#修改-etc-profile文件后，命令都不能使用的解决方案" class="headerlink" title="修改/etc/profile文件后，命令都不能使用的解决方案"></a>修改/etc/profile文件后，命令都不能使用的解决方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=/usr/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin</div><div class="line"># 然后将错误的地方改回来</div></pre></td></tr></table></figure><h4 id="pstree-命令"><a href="#pstree-命令" class="headerlink" title="pstree 命令"></a>pstree 命令</h4><blockquote><p>显示bash下的进程树</p></blockquote><h4 id="关于变量在bash中的作用域"><a href="#关于变量在bash中的作用域" class="headerlink" title="关于变量在bash中的作用域"></a>关于变量在bash中的作用域</h4><blockquote><p>1、export 当前进程以及子进程生效<br> 2、B=1 只对自己bash生效<br> 3、source script.sh 当前进程下生效<br> 4、bashrc 终端登录时会执行这个sh</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux相关杂记&quot;&gt;&lt;a href=&quot;#Linux相关杂记&quot; class=&quot;headerlink&quot; title=&quot;Linux相关杂记&quot;&gt;&lt;/a&gt;Linux相关杂记&lt;/h1&gt;&lt;h5 id=&quot;关于httpd-服务&quot;&gt;&lt;a href=&quot;#关于httpd-服务&quot; cla
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Linux相关杂记</title>
    <link href="http://yoursite.com/2018/04/14/Linux%E7%9B%B8%E5%85%B3%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/14/Linux相关杂记/</id>
    <published>2018-04-14T01:39:44.263Z</published>
    <updated>2018-04-14T02:09:03.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux相关杂记"><a href="#Linux相关杂记" class="headerlink" title="Linux相关杂记"></a>Linux相关杂记</h1><h5 id="关于httpd-服务"><a href="#关于httpd-服务" class="headerlink" title="关于httpd 服务"></a>关于httpd 服务</h5><blockquote><p>启动以后，会在 /var/www/html/下生成静态页面</p></blockquote><h5 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h5><blockquote><p>ln -s /xx/xxx  /xx/xx</p></blockquote><h5 id="制作局域网内的yum仓库"><a href="#制作局域网内的yum仓库" class="headerlink" title="制作局域网内的yum仓库"></a>制作局域网内的yum仓库</h5><blockquote><p>使用httpd服务以及软连接，然后在yum.repo.d指向它</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux相关杂记&quot;&gt;&lt;a href=&quot;#Linux相关杂记&quot; class=&quot;headerlink&quot; title=&quot;Linux相关杂记&quot;&gt;&lt;/a&gt;Linux相关杂记&lt;/h1&gt;&lt;h5 id=&quot;关于httpd-服务&quot;&gt;&lt;a href=&quot;#关于httpd-服务&quot; cla
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Nginx和Keepalived的部署安装</title>
    <link href="http://yoursite.com/2018/04/13/Hadoop%E7%9B%B8%E5%85%B3/Nginx%E5%92%8CKeepalived%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/04/13/Hadoop相关/Nginx和Keepalived的部署安装/</id>
    <published>2018-04-13T13:13:23.513Z</published>
    <updated>2018-04-15T07:30:58.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx和Keepalived的部署安装"><a href="#Nginx和Keepalived的部署安装" class="headerlink" title="Nginx和Keepalived的部署安装"></a>Nginx和Keepalived的部署安装</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ul><li><p>解压后进入到解压目录，检查安装环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/share/nginx # 安装目录为/usr/share/nginx</div><div class="line"># 缺少包的话</div><div class="line">yum -y install gcc pcre-devel openssl openssl-devel # 安装完依赖以后，再检查环境</div></pre></td></tr></table></figure></li></ul><p>  检查环境完成：<br>  <img src="/images/15236967963875.jpg" alt=""></p><ul><li><p>编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></li></ul><ul><li>进入到/usr/share/nginx/中启动nginx，操作命令如下</li><li>在宿主机上访问80端口<h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2></li><li><p>启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx</div></pre></td></tr></table></figure></li><li><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -s stop</div></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure></li></ul><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><p>修改nginx配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  nginx-01.itcast.cn;    #nginx所在服务器的主机名</div><div class="line">    #反向代理的配置</div><div class="line">    location / &#123;             #拦截所有请求</div><div class="line">        root html;</div><div class="line">        proxy_pass http://192.168.2.3:8080;   #这里是代理走向的目标服务器：tomcat</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="动静分离-只做一下简单的介绍，没有测试"><a href="#动静分离-只做一下简单的介绍，没有测试" class="headerlink" title="动静分离(只做一下简单的介绍，没有测试)"></a>动静分离(只做一下简单的介绍，没有测试)</h3><h4 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location ~ .*\.(jsp|do|action)$ &#123;</div><div class="line">    proxy_pass http://tomcat-01.itcast.cn:8080;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location ~ .*\.(html|js|css|gif|jpg|jpeg|png)$ &#123;</div><div class="line">    expires 3d;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="负载均衡（只做一下简单的介绍，没有测试）"><a href="#负载均衡（只做一下简单的介绍，没有测试）" class="headerlink" title="负载均衡（只做一下简单的介绍，没有测试）"></a>负载均衡（只做一下简单的介绍，没有测试）</h3><blockquote><p>在http这个节下面配置一个叫upstream的，后面的名字可以随意取，但是要和location下的proxy_pass <a href="http://后的保持一致" target="_blank" rel="external">http://后的保持一致</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    # 是在http里面的, 已有http, 不是在server里,在server外面</div><div class="line">    upstream tomcats &#123; </div><div class="line">        server 192.168.2.2:8080 weight=1;#weight表示多少个</div><div class="line">        server 192.168.2.3:8080 weight=1;</div><div class="line">        server 192.168.2.4:8080 weight=1;</div><div class="line">&#125;</div><div class="line"># 写在server里</div><div class="line">location ~ .*\.(jsp|do|action) &#123;</div><div class="line">    proxy_pass http://tomcats;        #tomcats是后面的tomcat服务器组的逻辑组号</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h2><h3 id="keepalived安装"><a href="#keepalived安装" class="headerlink" title="keepalived安装"></a>keepalived安装</h3><ul><li><p>解压 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf /usr/local/keepalived-1.4.3.tar.gz -C /usr/local/src/</div></pre></td></tr></table></figure></li><li><p>检查安装环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/share/keepalived</div><div class="line"># 如果出现this build will not support IPVS with IPv6. Please       </div><div class="line">#install libnl/libnl-3 dev libraries to support IPv6 with IPVS.</div><div class="line">yum -y install libnl libnl-devel</div><div class="line"># libnfnetlink headers missing</div><div class="line">yum install -y libnfnetlink-devel</div></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></li></ul><blockquote><p>(未完)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx和Keepalived的部署安装&quot;&gt;&lt;a href=&quot;#Nginx和Keepalived的部署安装&quot; class=&quot;headerlink&quot; title=&quot;Nginx和Keepalived的部署安装&quot;&gt;&lt;/a&gt;Nginx和Keepalived的部署安装&lt;/
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>shell编程</title>
    <link href="http://yoursite.com/2018/04/13/Hadoop%E7%9B%B8%E5%85%B3/shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/13/Hadoop相关/shell编程/</id>
    <published>2018-04-13T07:40:20.482Z</published>
    <updated>2018-04-15T07:37:50.325Z</updated>
    
    <content type="html"><![CDATA[<p>#shell编程</p><p>##shell 变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">. ./demo.sh #让这个shell脚本在当前bash下运行</div></pre></td></tr></table></figure><p>###系统变量与命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$HOME</div><div class="line">$PWD</div><div class="line">$SHELL</div><div class="line">$USER</div><div class="line">$PATH</div><div class="line">...</div><div class="line">#可以使用</div><div class="line">set查看当前所有变量</div><div class="line">#=号两侧不能有空格</div><div class="line">#“”与&apos;&apos;的区别，&apos;&apos;里面的字符串都会脱义</div><div class="line">#unset 撤销</div><div class="line">#export 全局</div><div class="line">#readonly </div><div class="line">#``反引号 取一条命令的结果 等价 $()</div></pre></td></tr></table></figure><p>###特殊变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$? #上一条命令退出的状态</div><div class="line">$$ 当前进程的编号</div><div class="line">$0 当前脚本的名称</div><div class="line">$n 表示n位置的输入参数 n&gt;=1</div><div class="line">$#</div><div class="line">$* 不拆分参数</div><div class="line">$@ 拆分参数</div></pre></td></tr></table></figure></p><p>###运算符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s=`expr 2 + 3` 或</div><div class="line">$((2+3))</div></pre></td></tr></table></figure></p><p>###流程控制</p><p>####for循环<br>第一种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for N in 1 2 3</div><div class="line">do</div><div class="line">    echo $N</div><div class="line">done</div><div class="line">#或</div><div class="line">for N in 1 2 3; do echo $N; done</div><div class="line">#或</div><div class="line">for N in &#123;1..3&#125;; do echo $N; done</div></pre></td></tr></table></figure><p>第二种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for ((i=0;i&lt;=5;i++))</div><div class="line">do echo $i</div><div class="line">done</div></pre></td></tr></table></figure><p>####while<br>第一种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while 表达式</div><div class="line">do</div><div class="line">    echo &quot;hello&quot;</div><div class="line">done</div></pre></td></tr></table></figure><p>第二种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int=1</div><div class="line">while ((int&lt;=3))</div><div class="line">do</div><div class="line">    echo</div><div class="line">    let int++</div><div class="line">done</div></pre></td></tr></table></figure><p>####case<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">case $1 in</div><div class="line">start)</div><div class="line">    echo &quot;starting&quot;</div><div class="line">    ;;</div><div class="line">stop)</div><div class="line">    echo &quot;stoping&quot;</div><div class="line">    ;;</div><div class="line">*)</div><div class="line">    echo &quot;Usage: &#123;start|stop&#125;&quot; </div><div class="line">esac</div></pre></td></tr></table></figure></p><p>####read命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">read -p(提示信息) -t (超时) -S(隐藏方式读取) 变量</div></pre></td></tr></table></figure></p><p>####if<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if [ condition ] #前后有空格</div><div class="line">then statements</div><div class="line">elif condition</div><div class="line">then statements</div><div class="line">else</div><div class="line">statements</div><div class="line">fi</div></pre></td></tr></table></figure></p><p>类似于java中的三目表达式<br>[ condition ] &amp;&amp; echo ok || echo notok</p><p>####自定义函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[function] start[()]&#123;</div><div class="line">    action;</div><div class="line">    [return int]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>####调试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sh -vx xxx.sh</div><div class="line">``` </div><div class="line"></div><div class="line">####高级命令行文本工具</div><div class="line">#####cut、sort、wc</div><div class="line">* sort</div><div class="line"></div><div class="line">    &gt; sort命令对File参数指定的文件中的*行*排序，并将结果写到标准输出。如果 File参数指定*多个文件*，那么 sort 命令将这些文件*连接*起来，并当作*一个*文件进行排序。</div><div class="line">    </div><div class="line">   语法：</div></pre></td></tr></table></figure></p><p>   sort [-fbMnrtuk] [file or stdin]</p><p>   #选项与参数：<br>     -f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；<br>     -b  ：忽略最前面的空格符部分；<br>     -M  ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；<br>     -n  ：使用『纯数字』进行排序(默认是以文字型态来排序的)；<br>     -r  ：反向排序；<br>     -u  ：就是 uniq ，相同的数据中，仅出现一行代表；<br>     -t  ：分隔符，默认是用 [tab] 键来分隔；<br>     -k  ：以那个区间 (field) 来进行排序的</p><p>   #例如<br>   cat /etc/passwd | sort</p><p>   #再如，以第三栏排序，默认是以字符串排序的<br>   cat /etc/passwd | sort -t ‘:’ -k 3</p><p>   #这样就是以数字排序了<br>   cat /etc/passwd | sort -t ‘:’ -k 3n</p><p>   #降序<br>   cat /etc/passwd | sort -t ‘:’ -k 3nr</p><p>   #第六个域中的第二个字符到第四个字符，默认正向排序</p><p>   #第一个字符 反向排序<br>   cat /etc/passwd |  sort -t’:’ -k 6.2,6.4 -k 1r </p><p>   #查看/etc.passwd有多少个shell，对第七个域排序，然后去重<br>   cat /etc/passwd |  sort -t’:’ -k 7 -u #为了使uniq起作用，所有的重复行必须是相邻的。<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">uniq语法</div></pre></td></tr></table></figure></p><p>   uniq [-icu]<br>   选项与参数：</p><p>   #-i   ：忽略大小写字符的不同；</p><p>   #-c  ：进行计数</p><p>   #-u  ：只显示唯一的行</p><p>   #仅显示重复行，并在行首显示该行的重复次数<br>   sort filename | uniq -dc</p><p>   #仅显示不重复的行<br>   sort filename | uniq -u<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">* cut</div><div class="line"> </div><div class="line">  &gt; cut命令可以从一个文本文件或者文本流中提取文本列。</div><div class="line">  </div><div class="line">  cut语法</div></pre></td></tr></table></figure></p><p>  cut -d’分隔字符’ -f fields #用于有特定分隔字符<br>  cut -c 字符区间            #用于排列整齐的信息<br>  选项与参数：</p><p>  #-d  ：后面接分隔字符。与 -f 一起使用；</p><p>  #-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；</p><p>  #-c  ：以字符 (characters) 的单位取出固定字符区间；</p><p>  #以PATH路径为例，找出第五个路径<br>  echo $PATH | cut -d ‘:’ -f 5</p><p>  #找出第三个和第五个<br>  echo $PATH | cut -d ‘:’ -f 3,5</p><p>  #找出第三个到最后一个路径<br>  echo $PATH | cut -d ‘:’ -f 3-</p><p>  #找出一到三个路径<br>  echo $PATH | cut -d ‘:’ -f 1-3</p><p>  #第一到第三，还有第五个路径<br>  echo $PATH | cut -d ‘:’ -f 1-3,5</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* wc</div><div class="line"></div><div class="line">  &gt; 统计文件里面有多少单词，多少行，多少字符。</div><div class="line">  </div><div class="line">  wc语法</div></pre></td></tr></table></figure><p>  wc [-lwm]<br>  选项与参数：</p><p>  #-l  ：仅列出行；</p><p>  #-w  ：仅列出多少字(英文单字)；</p><p>  #-m  ：多少字符；</p><p>  #列出行数、单词数，字节数<br>  wc /etc/passwd</p><p>  #统计单词出现的次数<br>  wc -w /etc/passwd</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">#####sed</div><div class="line">######简介</div><div class="line">&gt; sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“*模式空间*”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。*文件内容并没有改变*，除非你使用重定向存储输出。Sed主要用来*自动编辑一个或多个文件*；简化对文件的*反复*操作；编写*转换*程序等。以下介绍的是Gnu版本的Sed 4.2.1。</div><div class="line"></div><div class="line">######定址</div><div class="line">&gt;可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。</div><div class="line"></div><div class="line">######Sed命令</div><div class="line">* 调用sed命令的两种形式：</div><div class="line">    * sed [options] &apos;command&apos; file(s)</div><div class="line">    * sed [options] -f scriptfile file(s)</div><div class="line">* 实例</div></pre></td></tr></table></figure><p>  ##删除命令</p><p>  #删除example文件的第二行<br>  $ sed ‘2d’ example</p><p>  #删除example文件的第二行到末尾所有行<br>  $ sed ‘2,$d’ example</p><p>  #删除example文件的最后一行<br>  $ sed ‘$d’ example</p><p>  #删除example文件所有包含test的行<br>  sed ‘/test/‘d example</p><p>  ##替换命令s</p><p>  #在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。<br>  $ sed ‘s/test/mytest/g’ example </p><p>  #(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。<br>  $ sed -n ‘s/^test/mytest/p’ example</p><p>  #&amp;符号表示替换为被替换和替换的字符串的+。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。<br>  $ sed ‘s/^192.168.0.1/&amp;localhost/‘ example</p><p>  #love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。<br> $ sed -n ‘s/(love)able/\1rs/p’ example</p><p>  #不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100<br>  $ sed ‘s#10#100#g’ example</p><p>  ##选定行的范围:逗号</p><p>  #所有在模板test和check所确定的范围内的行都被打印<br>  $ sed -n ‘/test/,/check/p’ example</p><p>  #打印从第五行开始到第一个包含以test开始的行之间的所有行<br>  $ sed -n ‘5,/^test/p’ example</p><p>  #对于模板test和west之间的行，每行的末尾用字符串sed test替换<br>  $ sed ‘/test/,/check/s/$/sed test/‘ example</p><p>  ##多点编辑：e命令</p><p>  #(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。<br>  sed -e ‘1,5d’ -e ‘s/test/check/‘ example</p><p>  #一个比-e更好的命令是–expression。它能给sed表达式赋值。<br>  sed –expression=’s/test/check/‘ –expression=’/love/d’ example</p><p>  ##从文件中读入：r命令</p><p>  #file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面</p><p>  ##写入文件：w命令</p><p>  #在example中所有包含test的行都被写入file里<br>  $ sed -n ‘/test/w file’ example</p><p>  ##追加命令： a命令</p><p>  #’—–&gt;this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠<br>  $ sed ‘/^test/a\—&gt;this is a example’ example</p><p>  ##插入命令： i命令</p><p>  #如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面<br>  $ sed ‘/test/i\new line————————-‘ example</p><p>  ##下一个：n命令</p><p>  #如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续<br>  $ sed ‘/test/{ n; s/aa/bb/; }’ example</p><p>  ##变形：y命令</p><p>  #把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令<br>  $ sed ‘1,10y/abcde/ABCDE/‘ example</p><p>  ##退出：q命令</p><p>  #打印完第10行后，退出sed<br>  $ sed ‘10q’ example</p><p>  保持和获取：h命令和G命令</p><p>  #在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消否则所有被处理的行都将打印在屏幕上。    </p><p>  #接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。    </p><p>  #第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。</p><p>  #在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。<br>  $ sed -e ‘/test/h’ -e ‘$G’ example</p><p>  ##保持和互换：h命令和x命令</p><p>  #互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换</p><p>  $ sed -e ‘/test/h’ -e ‘/check/x’ example</p><p>  ##脚本</p><p>  #Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。</p><p>  #Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。</p><p>  #以#开头的行为注释行，且不能跨行。</p><p>  ```</p><p>#####awk</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#shell编程&lt;/p&gt;
&lt;p&gt;##shell 变量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法模式</title>
    <link href="http://yoursite.com/2018/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/13/设计模式/模板方法模式/</id>
    <published>2018-04-13T06:21:20.546Z</published>
    <updated>2018-04-15T07:34:05.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考题抄错会做也白搭-模板方法模式"><a href="#考题抄错会做也白搭-模板方法模式" class="headerlink" title="考题抄错会做也白搭-模板方法模式"></a>考题抄错会做也白搭-模板方法模式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;考题抄错会做也白搭-模板方法模式&quot;&gt;&lt;a href=&quot;#考题抄错会做也白搭-模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;考题抄错会做也白搭-模板方法模式&quot;&gt;&lt;/a&gt;考题抄错会做也白搭-模板方法模式&lt;/h1&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>软件安装以及命令相关</title>
    <link href="http://yoursite.com/2018/04/12/Hadoop%E7%9B%B8%E5%85%B3/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%91%BD%E4%BB%A4%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2018/04/12/Hadoop相关/软件安装以及命令相关/</id>
    <published>2018-04-12T06:39:54.911Z</published>
    <updated>2018-04-13T07:41:06.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件安装以及命令相关"><a href="#软件安装以及命令相关" class="headerlink" title="软件安装以及命令相关"></a>软件安装以及命令相关</h1><h2 id="部署遇到的一些问题"><a href="#部署遇到的一些问题" class="headerlink" title="部署遇到的一些问题"></a>部署遇到的一些问题</h2><ol><li>SecureCRT Session Option中文乱码问题<br><img src="/images/15235157887927.jpg" alt=""><br>将character encoding改为UTF-8</li><li>虚拟机clone机器的ip地址问题<ul><li>直接修改  /etc/sysconfig/network-scripts/ifcfg-eth0</li><li>删掉UUID  HWADDR 配置静态地址</li><li>rm -rf 　/etc/udev/rules.d/70-persistent-net.rules<br><em>或者修改这个文件，将其中的eth1的物理地址复制给eth0，然后删掉eth1的配置，然后 reboot</em></li></ul></li></ol><h2 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li>cat    somefile    一次性将文件内容全部输出（控制台）</li><li>more   somefile     可以翻页查看, 下翻一页(空格)    上翻一页（b）   退出（q）</li><li>less   somefile      可以翻页查看,下翻一页(空格)    上翻一页（b），上翻一行(↑)  下翻一行（↓）  可以搜索关键字（/keyword）</li><li>tail -10  install.log   查看文件尾部的10行</li><li>tail -f install.log    小f跟踪文件的唯一inode号，就算文件改名后，还是跟踪原来这个inode表示的文件，可以实时打印当前文件</li><li>tail -F install.log    大F按照文件名来跟踪</li><li>head -10  install.log   查看文件头部的10行</li></ul><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ul><li>查看主机名：hostname</li><li>修改主机名(重启后无效)：hostname hadoop</li><li>修改主机名(重启后永久生效)： vi /ect/sysconfig/network</li><li>修改IP(重启后无效)： ifconfig eth0 192.168.12.22</li><li>修改IP(重启后永久生效)：vi /etc/sysconfig/network-scripts/ifcfg-eth0</li><li><p>mount   挂载外部存储设备到文件系统中</p><ul><li>mkdir   /mnt/cdrom      创建一个目录，用来挂载</li><li>mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom/     将设备/dev/cdrom挂载到 挂载点 ：  /mnt/cdrom中</li></ul></li><li><p>umount: umount /mnt/cdrom</p></li><li>统计文件或文件夹的大小<ul><li>du -sh  /mnt/cdrom/Packages</li><li>df -h    查看磁盘的空间</li></ul></li><li>关机: halt</li><li>重启: reboot</li><li>后台服务管理<ul><li>service network status   查看指定服务的状态</li><li>service network stop     停止指定服务</li><li>service network start    启动指定服务</li><li>service network restart  重启指定服务</li><li>service –status-all  查看系统中所有的后台服务</li></ul></li><li>设置后台服务的自启配置<ul><li>chkconfig   查看所有服务器自启配置</li><li>chkconfig iptables off   关掉指定服务的自动启动</li><li>chkconfig iptables on   开启指定服务的自动启动</li></ul></li><li><p>系统启动级别管理</p><ul><li><p>vi  /etc/inittab</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">            # Default runlevel. The runlevels used are:</div><div class="line">            #   0 - halt (Do NOT set initdefault to this)</div><div class="line">            #   1 - Single user mode</div><div class="line">            #   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</div><div class="line">            #   3 - Full multiuser mode</div><div class="line">            #   4 - unused</div><div class="line">            #   5 - X11</div><div class="line">            #   6 - reboot (Do NOT set initdefault to this)</div><div class="line">#</div><div class="line">        id:3:initdefault:</div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="如何上传软件包到服务器"><a href="#如何上传软件包到服务器" class="headerlink" title="如何上传软件包到服务器"></a>如何上传软件包到服务器</h4><ul><li>可以使用图形化工具，如： filezilla</li><li>可以使用sftp工具：  shift+command+p(macox) 调出后，用put命令上传</li><li>上传（如果不cd指定目录，则上传到当前用户的主目录）：</li><li>sftp&gt; cd /home/   </li><li>sftp&gt; put </li><li>下载（lcd指定下载到本地的目标路径）</li><li>sftp&gt; lcd / ()                        </li><li>sftp&gt; get /home/jdk.tar.gz</li><li>lrzsz在linux里可代替ftp上传和下载</li></ul><h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><ul><li>压缩解压缩的相关命令</li><li>压缩解压缩<ul><li>root@mini1 ~]# gzip access.log </li><li>[root@mini1 ~]# ll</li></ul></li><li>解压gz文件：  gzip -d access.log.gz</li><li><p>打包</p><ul><li>[root@mini1 ~]# tar -cvf myfirsttarball.tar aaa/<ul><li>aaa/</li><li>aaa/2.txt</li><li>aaa/3.txt</li><li>aaa/1.txt</li></ul></li></ul></li><li><p>解包：</p><ul><li>[root@mini1 ~]# tar -xvf myfirsttarball.tar <ul><li>aaa/</li><li>aaa/2.txt</li><li>aaa/3.txt</li><li>aaa/1.txt</li></ul></li></ul></li><li><p>一次性完成打包&amp;&amp;压缩的操作</p><ul><li><p>产生压缩包：</p><ul><li>[root@mini1 ~]# tar -zcvf my.tar.gz aaa/<ul><li>aaa/</li><li>aaa/2.txt</li><li>aaa/3.txt</li><li>aaa/1.txt</li></ul></li></ul></li><li><p>解压缩包：</p><ul><li>[root@mini1 ~]# tar -zxvf my.tar.gz <ul><li>aaa/</li><li>aaa/2.txt</li><li>aaa/3.txt</li><li>aaa/1.txt</li></ul></li></ul></li></ul></li><li><p>安装jdk的过程：</p><ul><li>解压安装包<pre><code>tar -zxvf jdk-7u45-linux-x64.tar.gz -C(目标地址) apps/</code></pre></li><li><p>修改环境变量</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">echo $PATH可以输出环境变量的值</div><div class="line">pwd命令以绝对路径的方式显示用户当前工作目录。</div><div class="line">vi /etc/profile</div><div class="line">在文件最后添加</div><div class="line">export JAVA_HOME=/root/apps/jdk1.7.0_45</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div><div class="line">保存退出</div></pre></td></tr></table></figure></code></pre></li><li><p>然后重新加载环境变量</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    source /etc/profile</div><div class="line">  ``` </div><div class="line">#### 安装rpm包软件，如mysql</div><div class="line">* 上传rpm软件包</div></pre></td></tr></table></figure></li></ul><p>MySQL-client-5.5.45-1.linux2.6.x86_64.rpm<br>MySQL-server-5.5.45-1.linux2.6.x86_64.rpm<br>MySQL-devel-5.5.45-1.linux2.6.x86_64.rpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">* 删除自带的RPM软件包</div></pre></td></tr></table></figure><p> rpm -qa | grep mysql<br> rpm -e –nodeps mysql-libs-5.1.71-1.el6.x86_64 # CentOS 6.5自带</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 安装libaio</div></pre></td></tr></table></figure><p> yum install libaio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 安装server、client、devel</div></pre></td></tr></table></figure><p>rpm -ivh MySQL-server-5.5.45-1.linux2.6.x86_64.rpm –force –nodeps # 忽略依赖，强制安装<br>rpm -ivh MySQL-client-5.5.45-1.linux2.6.x86_64.rpm  –force –nodeps<br>rpm -ivh MySQL-devel-5.5.45-1.linux2.6.x86_64.rpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 启动服务</div></pre></td></tr></table></figure><p> service mysql start </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 修改root密码</div></pre></td></tr></table></figure><p> /usr/bin/mysqladmin -u root password ‘root’</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 登录验证</div></pre></td></tr></table></figure><p>   mysql -uroot -proot</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 修改数据库和服务的编码</div></pre></td></tr></table></figure><p> show variables like ‘character%’</p><p> set character_set_database = utf8;<br> set character_set_server = utf8</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">* 允许远程登录</div><div class="line">    * 所有主机</div></pre></td></tr></table></figure><pre><code>grant all privileges on *.* to root@&quot;%&quot; identified by&quot;root&quot;with grant option;<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">* 指定主机</div></pre></td></tr></table></figure>grant all privileges on *.* to root@&quot;192.168.x.x&quot; identified by&quot;root&quot;with grant option; flush privileges;<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 重启服务</div></pre></td></tr></table></figure>service mysql restart <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* 防火墙开发端口3306</div><div class="line">    * 开放3306端口</div></pre></td></tr></table></figure>/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 保存</div></pre></td></tr></table></figure>/etc/rc.d/init.d/iptables save<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 重启防火墙</div></pre></td></tr></table></figure>/etc/init.d/iptables restart<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">      </div><div class="line">* 使用宿主机dataGrip连接</div><div class="line"> ![](/images/15235388787065.jpg)</div><div class="line"></div><div class="line">   </div><div class="line">  </div><div class="line">#### 制作本地yum源</div><div class="line">* 加入依赖包到私有的yum的repository</div></pre></td></tr></table></figure></code></pre><p>进入到repo目录<br>执行命令：createrepo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 将iso文件挂载到指定目录</div></pre></td></tr></table></figure><h1 id="任选一种方式"><a href="#任选一种方式" class="headerlink" title="任选一种方式"></a>任选一种方式</h1><p>mount /dev/cdrom /mnt/cdrom<br>mount -o loop /dev/cdrom /mnt/cdrom </p><h1 id="如果让你指定挂载的类型，有可能你的虚拟机上没有挂载光盘"><a href="#如果让你指定挂载的类型，有可能你的虚拟机上没有挂载光盘" class="headerlink" title="如果让你指定挂载的类型，有可能你的虚拟机上没有挂载光盘"></a>如果让你指定挂载的类型，有可能你的虚拟机上没有挂载光盘</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 拷贝并制作</div></pre></td></tr></table></figure><p>mkdir /yum_pack<br>cp -r /mnt/Packages /yum_pack<br>cd /yum_pack<br>createrepo ./</p><h1 id="如果createrepo命令no-found"><a href="#如果createrepo命令no-found" class="headerlink" title="如果createrepo命令no found"></a>如果createrepo命令no found</h1><p>yum -y install createrepo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 备份本地默认配置</div></pre></td></tr></table></figure><p>cd /etc/yum.repos.d/<br>mkdir bak<br>mv * bak # 这里会提示你无法将bak移动到它的子目录,无所谓，反正是备份一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 创建本地yum源配置文件</div></pre></td></tr></table></figure><p>vi /etc/yum.repos.d/Centos-Local.repo</p><p>[local]<br>name=CentOS-$releasever - Local<br>baseurl=file:///yum_pack # 这里可以配置http或ftp<br>gpgcheck=1  # 本地的可以不检查签名，设置为0<br>enabled=1   # 这里为0的话，是不开启的<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 测试</div><div class="line">  </div><div class="line">  ``` </div><div class="line">  yum clean all # 清空yum缓存</div><div class="line">  yum repolist</div><div class="line">  yum install gcc</div></pre></td></tr></table></figure></li></ul><h4 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h4><h5 id="安装jdk-1"><a href="#安装jdk-1" class="headerlink" title="安装jdk"></a>安装jdk</h5><p>在安装tomcat之前，先安装jdk</p><ul><li>上传压缩包到 /usr/local/</li><li>解压缩 tar -zxvf jdk-8u161-linux-x64.tar.gz</li><li><p>配置环境变量</p><ul><li><p>为所有的用户配置 修改/etc/profile文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 在profile文件末尾追加</div><div class="line">export JAVA_HOME=/usr/share/jdk1.8.0_161</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line"></div><div class="line"># 测试</div><div class="line">source /etc/profile</div></pre></td></tr></table></figure></li></ul></li></ul><h5 id="安装tomcat-1"><a href="#安装tomcat-1" class="headerlink" title="安装tomcat"></a>安装tomcat</h5><ul><li>解压缩 tar -zxvf apache-tomcat-8.5.30.tar.gz</li><li>进入到 bin目录启动 </li><li>在宿主机中访问 </li></ul><h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><ul><li><p>相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service iptables status # 发现一个问题，在虚拟机中防火墙未开放8080端口，但是在宿主机中可以访问，原因待查</div><div class="line">service iptables start</div><div class="line">service iptables stop</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件安装以及命令相关&quot;&gt;&lt;a href=&quot;#软件安装以及命令相关&quot; class=&quot;headerlink&quot; title=&quot;软件安装以及命令相关&quot;&gt;&lt;/a&gt;软件安装以及命令相关&lt;/h1&gt;&lt;h2 id=&quot;部署遇到的一些问题&quot;&gt;&lt;a href=&quot;#部署遇到的一些问题&quot; c
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存管理机制（二）</title>
    <link href="http://yoursite.com/2018/04/12/JavaWeb/JVM%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/12/JavaWeb/JVM内存管理机制（二）/</id>
    <published>2018-04-12T00:50:15.565Z</published>
    <updated>2018-04-12T02:05:28.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM内存管理机制（二）"><a href="#JVM内存管理机制（二）" class="headerlink" title="JVM内存管理机制（二）"></a>JVM内存管理机制（二）</h1><h2 id="JVM-内存回收策略"><a href="#JVM-内存回收策略" class="headerlink" title="JVM 内存回收策略"></a>JVM 内存回收策略</h2><p>通常显示的内存申请有两种：一种是静态内存分配，另外一种是动态内存分配</p><h3 id="静态内存分配和回收"><a href="#静态内存分配和回收" class="headerlink" title="静态内存分配和回收"></a>静态内存分配和回收</h3><blockquote><p>Java被编译时就已经能够确定需要的内存空间，当程序被加载时，系统把内存一次性分配给它，这些内存不会再程序执行时发生变化，直到程序执行结束时内存才被回收</p></blockquote><p>在java类和方法中的局部变量包括原生数据类型、和对象引用，都是静态分配内存的<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void staticData(int arg)&#123;</div><div class="line">    String s = &quot;YT&quot;;</div><div class="line">    long l = 1;</div><div class="line">    Long lg = 2L;</div><div class="line">    Object o = new Object();</div><div class="line">    Integer i = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>int、String、long、Long、Object、Integer的静态内存空间是<strong>4+4+8+4+4+4</strong></p><h3 id="动态内存分配和回收"><a href="#动态内存分配和回收" class="headerlink" title="动态内存分配和回收"></a>动态内存分配和回收</h3><p>对象的空间是动态分配的，内存分配是在对象创建时发生的，而内存的回收是以对象不再引用为前提</p><h3 id="如何检测垃圾"><a href="#如何检测垃圾" class="headerlink" title="如何检测垃圾"></a>如何检测垃圾</h3><p>垃圾收集器必须能够完成两件事情：</p><ol><li>能够正确地检测出垃圾对象</li><li>能够释放垃圾对象占用的内存空间</li></ol><p>根对象集合（根对象集合达到）</p><ol><li>在方法中局部变量去的对象的引用（如上面的lg，o，i）</li><li>java操作栈中的对象引用</li><li>在常量池中的对象引用</li><li>在本地方法中持有的对象引用</li><li>类的Class对象</li></ol><h3 id="基于分代的垃圾回收算法"><a href="#基于分代的垃圾回收算法" class="headerlink" title="基于分代的垃圾回收算法"></a>基于分代的垃圾回收算法</h3><blockquote><p>把对象安装寿命的长短来分组，分为年轻代和老年代，新创建的对象被分在年轻代，如果对象经过几次回收后仍然存活，那么再把对象划分到老年代，老年代的收集频度不像年轻代那么频繁，从而减少每次垃圾收集是所要扫描到的对象的数量，从而提高了垃圾回收效率</p></blockquote><p>Young区：</p><ol><li>Edan区：新创建的对象，当Eden区满后会触发minor GC将Eden区仍然存活的对象复制到其中一个Survivor区，另外一个Survivor区中存活的对象也将复制到这个Survivor区中，<strong><em>要保证有一个Survivor是空的</em></strong></li><li>Survivor（两个）</li></ol><p>Old区：</p><ol><li>Young区的Survivor满后触发的minor GC后仍然存活的对象</li><li>Edan区满后，如果Survivor放不下Edan中存活的兑现，则直接放到Old区</li><li>如果Survivor区中的对象足够老，则也将放到Old区</li><li>如果Old区也满了，将会触发Full GC，回收整个堆内存</li></ol><p>Perm区：主要存放类的Class对象，如果一个类被频繁的加载，也可能导致Perm区满，Perm区的垃圾回收也是有Full GC触发的</p><h4 id="三种垃圾回收算法"><a href="#三种垃圾回收算法" class="headerlink" title="三种垃圾回收算法"></a>三种垃圾回收算法</h4><h5 id="Serial-Collector"><a href="#Serial-Collector" class="headerlink" title="Serial Collector"></a>Serial Collector</h5><blockquote><p>Client模式下的默认GC方式(jvm.cfg),64位只支持Server模式<br>可以通过JVM配置参数-XX:+UserSerialGC来指定GC使用该收集算法</p></blockquote><p>这里说一下XX参数的语法<br>对于boolean类型的参数 -XX:+<name>用于激活<name>选项 -XX:-<name>用于注销选项<br>对于非boolean参数 -XX:<name>=<value>是给<name>赋值<value></value></name></value></name></name></name></name></p><p>Serial Collector的工作原理：</p><ol><li>当Edan区空间不足时就触发了minor GC，触发MinorGC是首先会检查之前每次MinorGC晋升到Old区的<strong><em>平均对象大小</em></strong>是否大于Old区的剩余空间，如果大于，则触发Full GC，如果小于，到第二步</li><li>HandlePromotionFailure参数（-XX:-HandlePromotionFailure）的值，如果为true，仅触发MinorGC，否则，再触发Full GC</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM内存管理机制（二）&quot;&gt;&lt;a href=&quot;#JVM内存管理机制（二）&quot; class=&quot;headerlink&quot; title=&quot;JVM内存管理机制（二）&quot;&gt;&lt;/a&gt;JVM内存管理机制（二）&lt;/h1&gt;&lt;h2 id=&quot;JVM-内存回收策略&quot;&gt;&lt;a href=&quot;#JVM
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="http://yoursite.com/2018/04/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/11/设计模式/设计模式之原型模式/</id>
    <published>2018-04-11T10:57:46.598Z</published>
    <updated>2018-04-11T12:42:11.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简历复印-原型模式"><a href="#简历复印-原型模式" class="headerlink" title="简历复印-原型模式"></a>简历复印-原型模式</h1><blockquote><p>用原型实例指定创建队形的种类，并且通过拷贝这些原型创建新的对象<br>一般在初始化的信息不发生变化的情况下，克隆是最好的办法，即隐藏了对象创建的的细节，有队性能是大大的提高</p></blockquote><p>结构图：<br><img src="/images/15234456902643.jpg" alt=""></p><p>原型模式其实就是从一个对象在创建另外一个可定制的对象，而且不需要知道如何创建的细节</p><h2 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h2><p>Resume</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class Resume implements Cloneable&#123;</div><div class="line">    private String name;</div><div class="line">    private String sex;</div><div class="line">    private String age;</div><div class="line">    private String timeArea;</div><div class="line">    private String company;</div><div class="line"></div><div class="line">    public Resume(String name)&#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPersionalInfo(String sex, String age)&#123;</div><div class="line">        this.age = age;</div><div class="line">        this.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setWorkExperience(String timeArea, String company)&#123;</div><div class="line">        this.timeArea = timeArea;</div><div class="line">        this.company = company;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void display()&#123;</div><div class="line">        System.out.println(name+&quot;, &quot;+sex+&quot;, &quot;+age);</div><div class="line">        System.out.println(&quot;工作经历:&quot; + timeArea + &quot; &quot; + company);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object cloneResume()&#123;</div><div class="line">        Object obj = null;</div><div class="line">        try &#123;</div><div class="line">            obj = this.clone();</div><div class="line">        &#125;catch (CloneNotSupportedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        Resume a = new Resume(&quot;YT&quot;);</div><div class="line">        a.setPersionalInfo(&quot;男&quot;,&quot;20&quot;);</div><div class="line">        a.setWorkExperience(&quot;2001-2012&quot;,&quot;XX公司&quot;);</div><div class="line"></div><div class="line">        Resume b = (Resume)a.cloneResume();</div><div class="line">        b.setWorkExperience(&quot;1993-2323&quot;,&quot;hello&quot;);</div><div class="line"></div><div class="line">        a.display();</div><div class="line">        b.display();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>注意，如果不继承Cloneable会抛空指针异常和CloneNotSupportedException异常</p></blockquote><h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><blockquote><p>如果字段是引用类型，则复制引用但不复制引用的对象；因此，原始对象及其复本引用同一个对象<br>改进的Resume，其属性添加了一个WorkExperience引用类型<br>Resume</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class Resume implements Cloneable&#123;</div><div class="line">    private String name;</div><div class="line">    private String sex;</div><div class="line">    private String age;</div><div class="line">    private WorkExperience work;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    public Resume(String name)&#123;</div><div class="line">        this.name = name;</div><div class="line">        work = new WorkExperience();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void WorkExperience(WorkExperience work)&#123;</div><div class="line">        this.work = work;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPersionalInfo(String sex, String age)&#123;</div><div class="line">        this.age = age;</div><div class="line">        this.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setWorkExperience(String timeArea, String company)&#123;</div><div class="line">        work.setCompany(company);</div><div class="line">        work.setWorkDate(timeArea);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void display()&#123;</div><div class="line">        System.out.println(name+&quot;, &quot;+sex+&quot;, &quot;+age);</div><div class="line">        System.out.println(&quot;工作经历:&quot; + work.getCompany() + &quot; &quot; + work.getWorkDate());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object cloneResume()&#123;</div><div class="line">        WorkExperience objWork = (WorkExperience)work.cloneWorkExperience();</div><div class="line">        Object obj = null;</div><div class="line">        try &#123;</div><div class="line">            obj = this.clone();</div><div class="line">        &#125;catch (CloneNotSupportedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        ((Resume)obj).WorkExperience(objWork);</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>WorkExperience</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class WorkExperience implements Cloneable&#123;</div><div class="line">    private String workDate;</div><div class="line">    private String company;</div><div class="line"></div><div class="line">    public String getWorkDate() &#123;</div><div class="line">        return workDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setWorkDate(String workDate) &#123;</div><div class="line">        this.workDate = workDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getCompany() &#123;</div><div class="line">        return company;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCompany(String company) &#123;</div><div class="line">        this.company = company;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object cloneWorkExperience()&#123;</div><div class="line">        Object obj = null;</div><div class="line">        try&#123;</div><div class="line">            obj = this.clone();</div><div class="line">        &#125;catch (CloneNotSupportedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p><strong><em>编程是一门技术，更是一门艺术</em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简历复印-原型模式&quot;&gt;&lt;a href=&quot;#简历复印-原型模式&quot; class=&quot;headerlink&quot; title=&quot;简历复印-原型模式&quot;&gt;&lt;/a&gt;简历复印-原型模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用原型实例指定创建队形的种类，并且通过拷贝这些原型创建新的
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存管理机制（一）</title>
    <link href="http://yoursite.com/2018/04/11/JavaWeb/JVM%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89md/"/>
    <id>http://yoursite.com/2018/04/11/JavaWeb/JVM内存管理机制（一）md/</id>
    <published>2018-04-11T08:23:45.663Z</published>
    <updated>2018-04-11T10:56:52.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM内存管理（一）"><a href="#JVM内存管理（一）" class="headerlink" title="JVM内存管理（一）"></a>JVM内存管理（一）</h1><h2 id="在java中哪些组件需要内存"><a href="#在java中哪些组件需要内存" class="headerlink" title="在java中哪些组件需要内存"></a>在java中哪些组件需要内存</h2><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>用于存储java对象的内存区域，堆的大小在JVM启动时就一次向操作系统申请完成，通过-Xmx（最大）和-Xms（最小）两个选项来控制大小，<strong><em>一旦申请完成，即固定大小</em></strong><br>堆中内存管理由JVM来控制，对象创建由应用程序控制，空间释放由垃圾收集器完成</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>JVM运行实体是线程，每个线程创建时JVM都会为它创建一个堆栈，堆栈的大小根据不同的JVM实现而不同，通常是256kb~756kb</p><h3 id="类和类加载器"><a href="#类和类加载器" class="headerlink" title="类和类加载器"></a>类和类加载器</h3><p>需要注意的一点是，JVM是按需加载类的。通常一个类能够被卸载，有如下条件需要被满足</p><ul><li>在Java堆中没有对表示该类加载器的java.lang.ClassLoader对象的引用</li><li>Java堆没有表示对类加载器加载的类的任何java.lang.Class对象的引用</li><li>在java堆上，该加载器加载的任何类的所有对象都不在存活（被引用）</li></ul><p><strong><em>任何系统类或通过应用程序类加载器加载的任何应用程序类都不能在运行时释放</em></strong></p><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><p>NIO使用java.nio.ByteBuffer.allocateDirect()方法分配内存，这种方式也是通常所说的NIO direct memory，这种分配的内存是使用本机内存，而不是java堆上面的内存。因为避免在Java堆和本机堆之间复制数据，所以比从操作系统的内核空间到java堆上的切换操作要快的多<br>一般情况下通过设置-XX:DisableExplicitGC来控制System.gc()的影响，但是又会导致NIO direct memory内存泄漏问题，如果显式调用System.gc()来释放NIO持有的内存，又会导致影响应用程序的性能</p><h3 id="JIN"><a href="#JIN" class="headerlink" title="JIN"></a>JIN</h3><p>也即是native memory</p><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><p>运行时数据（Runtime Data）</p><ul><li>pc寄存器数据</li><li>java栈</li><li>堆</li><li>方法区</li><li>本地方法区</li><li>运行时常量</li></ul><h3 id="pc寄存器"><a href="#pc寄存器" class="headerlink" title="pc寄存器"></a>pc寄存器</h3><p>如同记录员一样记录下哪个线程当前执行到哪些指令了，而对于native 方法，并没有要求记录执行的指针地址</p><h3 id="Java栈"><a href="#Java栈" class="headerlink" title="Java栈"></a>Java栈</h3><p>每当创建一个线程时，JVM就会为这个线程创建一个对应的java栈，这个java栈中又会包含多个栈帧，这些栈帧是与每个方法关联起来的，每个运行的方法就会创建一个栈帧，每个栈帧会含有一些内部变量、操作栈和方法返回值等信息</p><p>由于java栈是与java线程对应起来的，这个数据不是线程共享的，所以我们不用关心它的数据一致性问题，也不会存在同步锁的问题</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆是存储java对象的地方，它是应用程序与内存关心最密切的存储区域<br>每一个存储在堆中的java对象都会是这个对象的类的副本，它会复制包括继承自它父类的所有<strong><em>非静态属性</em></strong><br>堆是被所有Java线程所共享的，所以对它的访问需要注意<strong><em>同步问题</em></strong>，方法和对应的属性都需要保证一致性</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区是用于存储类结构信息的地方，这个区域存储：常量池、域、方法体、构造函数，包括类中的专用方法、实例化初始化、接口初始化都存储在这个区域，属于java堆中的永久区，这个区域可以被所有的线程共享，并且它的大小可以通过参数来设置</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>代表运行时每个class文件中的常量表，它包含几种常量：编译期的数字常量、方法或者域的引用，是在JVM创建class或接口是创建的<br>它是方法区的一部分，如果常量池无法分配，会抛出OutOfMemoryError</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>是为JVM运行Native方法准备的空间，又叫C栈，JIT技术会将一些java方法重新编译为Native Code代码以后，也会利用这个栈来跟踪方法的执行状态的</p><h2 id="JVM内存分配策略"><a href="#JVM内存分配策略" class="headerlink" title="JVM内存分配策略"></a>JVM内存分配策略</h2><h3 id="java栈"><a href="#java栈" class="headerlink" title="java栈"></a>java栈</h3><p>栈中主要存放一些基本数据类型的变量数据和对象句柄（引用）。存取速度要比堆块，仅次于寄存器，栈数据可以共享；缺点是：存在栈中的数据大小与生存周期必须是确定的，这也导致其缺乏灵活性<br>如我们先前分析过的一个class文件结构<br><img src="/images/15234423650730.jpg" alt=""></p><p>对应的字节码为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public void stack(java.lang.String[]);</div><div class="line">    descriptor: ([Ljava/lang/String;)V</div><div class="line">    flags: ACC_PUBLIC</div><div class="line">    Code:</div><div class="line">      stack=2, locals=6, args_size=2</div><div class="line">         0: ldc           #5                  // String YT</div><div class="line">         2: astore_2</div><div class="line">         3: aload_2</div><div class="line">         4: ldc           #5                  // String YT</div><div class="line">         6: invokevirtual #6                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z</div><div class="line">         9: ifeq          30</div><div class="line">        12: iconst_3</div><div class="line">        13: istore_3</div><div class="line">        14: iload_3</div><div class="line">        15: ifle          27</div><div class="line">        18: lconst_1</div><div class="line">        19: lstore        4</div><div class="line">        21: iinc          3, -1</div><div class="line">        24: goto          14</div><div class="line">        27: goto          40</div><div class="line">        30: bipush        97</div><div class="line">        32: istore_3</div><div class="line">        33: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">        36: iload_3</div><div class="line">        37: invokevirtual #7                  // Method java/io/PrintStream.println:(C)V</div><div class="line">        40: return</div><div class="line">      LineNumberTable:</div><div class="line">        line 13: 0</div><div class="line">        line 14: 3</div><div class="line">        line 15: 12</div><div class="line">        line 16: 14</div><div class="line">        line 17: 18</div><div class="line">        line 18: 21</div><div class="line">        line 19: 24</div><div class="line">        line 20: 27</div><div class="line">        line 21: 30</div><div class="line">        line 22: 33</div><div class="line">        line 24: 40</div><div class="line">      LocalVariableTable:</div><div class="line">        Start  Length  Slot  Name   Signature</div><div class="line">           21       3     4     j   J</div><div class="line">           14      13     3     i   I</div><div class="line">           33       7     3     b   C</div><div class="line">            0      41     0  this   Lcom/XXX/java_web_test/ClassParse;</div><div class="line">            0      41     1   arg   [Ljava/lang/String;</div><div class="line">            3      38     2   str   Ljava/lang/String;</div></pre></td></tr></table></figure><p>在这个方法的attribute中就已经知道stack和local variable的大小，分别是2和6，这里指定的是最大值<br>建立一个对象时两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的引用</p><h3 id="java堆"><a href="#java堆" class="headerlink" title="java堆"></a>java堆</h3><p>通过new、newarray、anewarry、和multianewarray等指令建立。优势是可以动态分配内存的大小。缺点是存取速度比较慢<br>如下图方法：<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-11%20%E4%B8%8B%E5%8D%886.41.38.png" alt="屏幕快照 2018-04-11 下午6.41.38"><br>对应的字节码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">    descriptor: ([Ljava/lang/String;)V</div><div class="line">    flags: ACC_PUBLIC, ACC_STATIC</div><div class="line">    Code:</div><div class="line">      stack=3, locals=2, args_size=1</div><div class="line">         0: new           #2                  // class java/lang/String</div><div class="line">         3: dup</div><div class="line">         4: ldc           #3                  // String come on! YT</div><div class="line">         6: invokespecial #4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</div><div class="line">         9: astore_1</div><div class="line">        10: return</div><div class="line">      LineNumberTable:</div><div class="line">        line 8: 0</div><div class="line">        line 9: 10</div><div class="line">      LocalVariableTable:</div><div class="line">        Start  Length  Slot  Name   Signature</div><div class="line">            0      11     0  args   [Ljava/lang/String;</div><div class="line">           10       1     1   str   Ljava/lang/String;</div></pre></td></tr></table></figure><p>这个new命令根据后面的16位的“#2”常量池索引创建指定类型的对象，JVM会为这个类的新对象分配一个空间，这个新对象的属性值都设置为默认值，最后执行这个新对象的objectref压入栈顶<br>new执行完成以后，得到的对象还没有初始化，所以这个新对象并没有创建完成，这个对象的引用这时不应该赋值给str变量，而是接下来调用这个类的构造函数初始化这个类，这时必须将objectref引用复制一份，在新对象初始化完成后再将这个引用赋值给本地变量。调用构造函数是通过invokespecial指令完成的，构造函数如果有参数要传递，则先将参数压栈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM内存管理（一）&quot;&gt;&lt;a href=&quot;#JVM内存管理（一）&quot; class=&quot;headerlink&quot; title=&quot;JVM内存管理（一）&quot;&gt;&lt;/a&gt;JVM内存管理（一）&lt;/h1&gt;&lt;h2 id=&quot;在java中哪些组件需要内存&quot;&gt;&lt;a href=&quot;#在java中哪
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>使用VirtualBox搭建Hadoop集群（一）</title>
    <link href="http://yoursite.com/2018/04/09/Hadoop%E7%9B%B8%E5%85%B3/%E4%BD%BF%E7%94%A8VirtualBox%E6%90%AD%E5%BB%BAHadoop%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/09/Hadoop相关/使用VirtualBox搭建Hadoop集群（一）/</id>
    <published>2018-04-09T02:06:31.671Z</published>
    <updated>2018-04-12T06:39:50.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用VirtualBox搭建Hadoop集群（一）"><a href="#使用VirtualBox搭建Hadoop集群（一）" class="headerlink" title="使用VirtualBox搭建Hadoop集群（一）"></a>使用VirtualBox搭建Hadoop集群（一）</h1><h2 id="安装linux"><a href="#安装linux" class="headerlink" title="安装linux"></a>安装linux</h2><p>首先，我们交代一下环境：</p><blockquote><p>macOS High Sierra 10.13.3、CentOS 6.5 64位(CentOS7的配置会有所不同)<br>VirtualBox5.28</p></blockquote><p>安装的时候会出现 <strong>no usable disks have been found</strong><br><img src="/images/15232476045380.jpg" alt=""><br>选择Re-initialize会进入目录</p><h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><ol><li><p>网卡一是NET模式。网卡二是HostOnly模式，网卡而二配置如下<br><img src="/images/15232578885369.jpg" alt=""></p></li><li><p>设置网络配置与DNS服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/network</div><div class="line"></div><div class="line">GATEWAY=192.168.0.1 # 这个是你的宿主机的网关</div><div class="line"></div><div class="line">vi /etc/resolv.conf</div><div class="line">nameserver 192.168.0.1 #使用你宿主机的dns</div></pre></td></tr></table></figure></li></ol><ol><li><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chkconfig iptables off # 永久关闭</div><div class="line">chkconfig --list iptables #查看列表</div><div class="line">service iptables stop #临时关闭</div></pre></td></tr></table></figure></li><li><p>尝试用你的宿主机ping虚拟机，用你的虚拟机ping主机以及外网</p></li><li>虚拟机互ping</li></ol><h2 id="一些常用的linux命令"><a href="#一些常用的linux命令" class="headerlink" title="一些常用的linux命令"></a>一些常用的linux命令</h2><p>netstat -ntlp<br>service network restart<br>woami<br>cat &gt; 与 cat &gt;&gt;的区别 </p><h2 id="ssh免密码登录"><a href="#ssh免密码登录" class="headerlink" title="ssh免密码登录"></a>ssh免密码登录</h2><p>安装SecureCRT，使用其远程登录</p><p>生成密钥对：ssh-kengen<br>将公钥拷贝到其他机器的authorized_keys文件中</p><blockquote><p>这里认证的方式A-&gt;B,B会用A的共公钥加密一个code发送给A，A解密后发送给B，认证完成</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa //使用rsa非对称加密算法加密，默认在/root/.ssh/id_rsa目录下</div><div class="line">scp id_rsa.pub 192.168.2.3:/root/ //这样做太麻烦</div><div class="line"></div><div class="line">ssh-copy-id 192.168.xx.xx</div><div class="line">-bash: ssh-copy-id: command not found</div><div class="line"></div><div class="line">// 解决方案</div><div class="line">yum install －y openssh-server openssh-clinets // 尝试了一下，不行</div><div class="line">yum -y install openssh-clients //再安装这个 可以用了</div></pre></td></tr></table></figure><p> 这样就可以实现从A免密登录B<br> 本机登录本机也是一样的，需要使用ssh-copy-id 本机ip，然后就可以使用ssh在本机免密登录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用VirtualBox搭建Hadoop集群（一）&quot;&gt;&lt;a href=&quot;#使用VirtualBox搭建Hadoop集群（一）&quot; class=&quot;headerlink&quot; title=&quot;使用VirtualBox搭建Hadoop集群（一）&quot;&gt;&lt;/a&gt;使用VirtualBo
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>深入分析Java I/O的工作机制</title>
    <link href="http://yoursite.com/2018/04/08/JavaWeb/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java%20I:O%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/04/08/JavaWeb/深入分析Java I:O的工作机制/</id>
    <published>2018-04-08T14:15:56.928Z</published>
    <updated>2018-04-11T08:20:53.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入分析Java-I-O的工作机制"><a href="#深入分析Java-I-O的工作机制" class="headerlink" title="深入分析Java I/O的工作机制"></a>深入分析Java I/O的工作机制</h1><h2 id="java-I-O类库的基本架构"><a href="#java-I-O类库的基本架构" class="headerlink" title="java I/O类库的基本架构"></a>java I/O类库的基本架构</h2><h3 id="基于字节的I-O操作接口"><a href="#基于字节的I-O操作接口" class="headerlink" title="基于字节的I/O操作接口"></a>基于字节的I/O操作接口</h3><ol><li>InputStream<br> <strong>UML类图</strong></li><li>OutputStream<br> <strong>UML类图</strong>    </li><li><p><strong>这里要说明两点</strong></p><ul><li><p>操作数据的方式是可以组合使用的    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OutputStream out = new BufferedOutputStream(new ObjectOutputStream(new FileOutputStream(&quot;fileName&quot;)))</div></pre></td></tr></table></figure></li><li><p>必须要指定流最终要写到什么地方，要么写到磁盘，要么写到网络，其实写网络也是写文件，只不过还有一步要处理</p></li></ul></li></ol><h3 id="基于字符的I-O操作"><a href="#基于字符的I-O操作" class="headerlink" title="基于字符的I/O操作"></a>基于字符的I/O操作</h3><ol><li>Writer<br> <strong>UML类图</strong></li><li>Reader<br> <strong>UML类图</strong>    </li><li><strong>只规定了怎么写或读，没有规定数据要写到哪里</strong>      </li></ol><h3 id="基于字符的I-O操作-1"><a href="#基于字符的I-O操作-1" class="headerlink" title="基于字符的I/O操作"></a>基于字符的I/O操作</h3><ol><li>读转化过程<br>InputStreamReader类是从字节到字符转化桥梁<br>StreamDecoder完成从字节到字符的解码的实现类</li><li><p>写转化过程<br>OutputStreamWriter类转换桥梁<br>StreamEncoder完成编码过程    </p><h2 id="磁盘I-O工作机制"><a href="#磁盘I-O工作机制" class="headerlink" title="磁盘I/O工作机制"></a>磁盘I/O工作机制</h2><h3 id="几种访问文件的方式"><a href="#几种访问文件的方式" class="headerlink" title="几种访问文件的方式"></a>几种访问文件的方式</h3><ol><li>标准访问文件的方式<br>read():如果内核高速缓存中没有数据的话，就从磁盘中读取<br>write():将数据从用户地址空间复制到内核地址空间的缓存中，如果不调用sync同步命令，这个是后对于用户进程来说，写操作已经完成</li><li>直接I/O的方式<br>直接访问磁盘上的数据，数据库管理系统。数据不会在程序中缓存，直接从磁盘上加载，速度会缓慢，所以通常和异步I/O搭配使用</li><li>同步访问文件的方式<br>数据的读取和写都是同步的，不同于标准I/O的写操作</li><li>异步访问文件的方式<br>访问数据的线程发出请求以后，线程会接着去做去处理其他的事情，当请求的数据返回以后继续处理下面的事情，会提高程序的执行效率，但是不会改变文件的效率</li><li>内存映射的方式<br>内存中的某一块区域与磁盘中的文件关联起来，当要访问内存中的一段数据时，转换为访问文件的某一段数据，从而减少数据从内核空间缓存到用户空间缓存的数据复制操作     </li></ol></li></ol><h3 id="Java访问磁盘文件"><a href="#Java访问磁盘文件" class="headerlink" title="Java访问磁盘文件"></a>Java访问磁盘文件</h3><ol><li>首先会根据这个路径创建一个File对象来标识这个文件</li><li>根据这个File对象创建真正读取文件的操作对象，这时会创建一个关联真实存在的磁盘文件的文件描述符FileDescriptor，通过这个对象可以直接控制这个磁盘文件</li></ol><h3 id="Java序列化对象"><a href="#Java序列化对象" class="headerlink" title="Java序列化对象"></a>Java序列化对象</h3><p>就是将一个对象转化成一串二进制表示的字节数组，通过保存或转移这些字节数据来达到持久化的目的<br>反序列化必须要有原始类作为模板，才能将这个对象还原</p><ol><li>当父类继承Serializable接口时，所有的子类都可以被序列化</li><li>子类实现了Serializable接口，父类没有，父类中的属性不能序列化（不报错，数据会丢失），但是子类中属性仍能正确序列化</li><li>如果序列化的属性是对象，则这个对象也必须实现Serializable接口，否则会报错</li><li>在反序列化时，如果serialVersionUID被修改，则序列化是会失败</li><li>在反序列化是，如果对象的属性有修改或者删减，则修改部分的属性会丢失，但是不会报错</li></ol><h2 id="网络I-O的工作机制"><a href="#网络I-O的工作机制" class="headerlink" title="网络I/O的工作机制"></a>网络I/O的工作机制</h2><h3 id="TCP状态转化"><a href="#TCP状态转化" class="headerlink" title="TCP状态转化"></a>TCP状态转化</h3><h2 id="NIO的工作方式"><a href="#NIO的工作方式" class="headerlink" title="NIO的工作方式"></a>NIO的工作方式</h2><h2 id="I-O调优"><a href="#I-O调优" class="headerlink" title="I/O调优"></a>I/O调优</h2><h3 id="磁盘I-O的优化"><a href="#磁盘I-O的优化" class="headerlink" title="磁盘I/O的优化"></a>磁盘I/O的优化</h3><ul><li>性能检测<ol><li>I/O wait指标是否正常</li><li>IOPS,查看应用程序需要的最低的IOPS</li><li>RAID</li></ol></li><li>提升I/O性能    <ol><li>增加缓存，减少I/O访问次数</li><li>优化磁盘的管理系统，设计最优的磁盘方式策略，以及磁盘的寻址策略，这是在底层操作系统层面考虑的</li><li>设计合理的磁盘存储数据块，以及访问这些数据块的策略，这是在应用层面考虑的，例如可以给存放的数据设计索引，通过寻址索引来加快和减少磁盘的访问量，还可以采用异步和非阻塞的方式加快磁盘的访问速度</li><li>应用合理的RAID策略提升磁盘的I/O      </li></ol></li></ul><h3 id="TCP网路参数调优"><a href="#TCP网路参数调优" class="headerlink" title="TCP网路参数调优"></a>TCP网路参数调优</h3><ol><li>增大端口范围<br> echo “1024 65535” &gt; /proc/sys/net/ipv4/ip_local_port_range</li><li>TCP连接复用<br> echo 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse</li><li>查看当前TCP统计信息<ul><li>cat /proc/net/netstat <strong>//查看TCP的统计信息</strong></li><li>cat /proc/net/snmp <strong>//查看当前系统的连接情况</strong></li><li>netstat -s <strong>//查看网络的统计信息</strong></li></ul></li></ol><h3 id="网络I-O优化"><a href="#网络I-O优化" class="headerlink" title="网络I/O优化"></a>网络I/O优化</h3><ol><li>减少网络交互次数<ul><li>再网络交互的两端设置缓存</li><li>合并访问请求</li></ul></li><li>减少网络传输数据量的大小<ul><li>将数据压缩以后在传输</li><li>设计简单的协议，尽量通过读取协议头来获取有用的价值信息，如设计代理程序时，4层代理和7层代理都是在尽量避免要读取整个通信数据来取得需要的信息</li></ul></li><li>尽量减少编码<br>尽量提前将字符转化为字节</li><li>根据应用，设计合适的交互方式<ul><li><strong>同步与异步</strong><br>同步：可靠的任务序列，一个任务完成时需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能完成<br>异步：不需要等待依赖的任务完成</li><li><strong>阻塞与非阻塞</strong>：主要是从cpu的消耗上来说的<br>阻塞：好处，线程需要要频繁的切换<br>非阻塞：好处，cpu不用长时间等待慢的操作</li><li>组合方式有四种<br><strong>同步阻塞</strong>：最简单，I/O性能差，CPU大部分时间处于空闲状态<br><strong>同步非阻塞</strong>：提升I/O性能的常用手段，尤其实在长连接同时传输数据也不是很多的情况下，需要考虑系统的瓶颈是在I/O上还是在cpu上<br><strong>异步阻塞</strong>：分布式数据库上经常用到，通常写一条记录，一份是同步阻塞的记录，另外2-3份是异步阻塞<br><strong>异步非阻塞</strong>：比较复杂，只有在一些非常复杂的分布式情况下使用，集群之间的消息同步机制一般这种I/O方式，它适合同时要传多份相同的数据到集群中的不同的机器，同时传输量虽然不大但是却非常频繁的情况</li></ul></li></ol><h2 id="设计模式解析之适配器模式"><a href="#设计模式解析之适配器模式" class="headerlink" title="设计模式解析之适配器模式"></a>设计模式解析之适配器模式</h2><h3 id="java-I-O中的适配器模式"><a href="#java-I-O中的适配器模式" class="headerlink" title="java I/O中的适配器模式"></a>java I/O中的适配器模式</h3><p><img src="/images/15231970214576.jpg" alt=""><br>可以看到，InputStreamReader就是将InputStream适配到Reader，InputStreamReader实现了Reader接口，并通过StreamDecoder（因为byte到char需要进行编码）间接持有了InputStream的引用，很显然，适配器就是InputStreamReader类，源角色就是InputStream代表的实例对象，目标接口就是Reader类<br>类似的用法还有 StringReader ByteArrayInputStream</p><h2 id="设计模式之装饰器模式"><a href="#设计模式之装饰器模式" class="headerlink" title="设计模式之装饰器模式"></a>设计模式之装饰器模式</h2><h3 id="java-I-O中的装饰器"><a href="#java-I-O中的装饰器" class="headerlink" title="java I/O中的装饰器"></a>java I/O中的装饰器</h3><p><img src="/images/15231970397782.jpg" alt=""></p><p>InputStream以抽象组件存在的，FileInputStream就是具体组件，它实现了抽象组件的所有接口<br>FilterInputStream是装饰角色，它实现了InputStream所有接口，并持有InputStream的对象实例的引用；BufferedInputStream是具体的装饰器实现者，它给InputStream类附加了功能，这个装饰器类的作用就是使得InputStream读取的数据保存在内存中，提高读取的性能</p><h2 id="适配器和装饰器的区别（别名-Wrapper）"><a href="#适配器和装饰器的区别（别名-Wrapper）" class="headerlink" title="适配器和装饰器的区别（别名 Wrapper）"></a>适配器和装饰器的区别（别名 Wrapper）</h2><p><strong>目的不一样</strong></p><ol><li>适配器：将一个接口转换为另外一个接口，通过改变接口来达到重复使用的目的</li><li>装饰器：保持原有接口，但是增强原有对象的功能</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入分析Java-I-O的工作机制&quot;&gt;&lt;a href=&quot;#深入分析Java-I-O的工作机制&quot; class=&quot;headerlink&quot; title=&quot;深入分析Java I/O的工作机制&quot;&gt;&lt;/a&gt;深入分析Java I/O的工作机制&lt;/h1&gt;&lt;h2 id=&quot;java-
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>深入分析Java Web中的中文编码问题</title>
    <link href="http://yoursite.com/2018/04/08/JavaWeb/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java%20Web%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/08/JavaWeb/深入分析Java Web中的中文编码问题/</id>
    <published>2018-04-08T14:13:38.261Z</published>
    <updated>2018-04-08T14:18:13.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入分析Java-Web中的中文编码问题"><a href="#深入分析Java-Web中的中文编码问题" class="headerlink" title="深入分析Java Web中的中文编码问题"></a>深入分析Java Web中的中文编码问题</h1><h2 id="几种常见的编码格式"><a href="#几种常见的编码格式" class="headerlink" title="几种常见的编码格式"></a>几种常见的编码格式</h2><h2 id="在Java中需要编码的场景"><a href="#在Java中需要编码的场景" class="headerlink" title="在Java中需要编码的场景"></a>在Java中需要编码的场景</h2><h3 id="在I-O操作中存在的编码"><a href="#在I-O操作中存在的编码" class="headerlink" title="在I/O操作中存在的编码"></a>在I/O操作中存在的编码</h3><p><img src="/images/15231968450988.jpg" alt=""></p><p>Reader类是JavaI/O中读字符的父类，InputStream类是读字节的父类，具体的字节到字符的编码实现，InputStreamReader委托StreamDecoder去做，在StreamDecoder解码过程中必须由用户指定Charset编码格式，默认使用本地环境中的字符集</p><p>下面一段代码实现了文件读写操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">todo：后面增加代码</div><div class="line">String file = &quot;c:/stream.txt&quot;;</div></pre></td></tr></table></figure></p><h3 id="在内存操作中的编码"><a href="#在内存操作中的编码" class="headerlink" title="在内存操作中的编码"></a>在内存操作中的编码</h3><ol><li><p>String类提供转换到字节的方法 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String s = &quot;这是一段中文字符串;          </div><div class="line">byte[] b = s.getBytes(&quot;UTF-8&quot;);</div><div class="line">String n = new String(b, &quot;UTF-8&quot;);</div></pre></td></tr></table></figure></li><li><p>Charset提供encode和decode，分别对应char[]到byte[]的编码和byte[]到char[]的编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Charest charset = Charset.forName(&quot;UTF-8&quot;);</div><div class="line">ByteBuffer byteBuffer = charset.encode(string）</div><div class="line">CharsetBuffer charBuffet = charset.decode(byteBuffer);</div></pre></td></tr></table></figure></li></ol><ol><li><p>ByteBuffer类，提供一种char和byte之间的软转换，它们之间转换不需要编码与解码，只是把一个16bit的char拆分为2个8bit的byte，它们的实际值没有修改，仅仅是数据的类型做了转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ByteBuffer heapByteBuffer = ByteBuffer.allocate(1024)</div><div class="line">ByteBuffer byteBuffer = heapByteBuffer.putChar(c)</div></pre></td></tr></table></figure></li></ol><h2 id="在java中如何编解码"><a href="#在java中如何编解码" class="headerlink" title="在java中如何编解码"></a>在java中如何编解码</h2><p>以“I am 宇子”为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static void encode()&#123;</div><div class="line">    String name = &quot;I am 宇子&quot;;</div><div class="line">    toHex(name.toCharArray()); //以16进制输出</div><div class="line">    try&#123;</div><div class="line">        byte[] iso8859 = name.getBytes(&quot;ISO-8859-1&quot;);</div><div class="line">        toHex(iso8859);</div><div class="line">        byte[] gb2312 = name.getBytes(&quot;GB2312&quot;);</div><div class="line">        toHex(gb2312);</div><div class="line">        byte[] gbk = name.getBytes(&quot;GBK&quot;);</div><div class="line">        toHex(gbk);</div><div class="line">        byte[] utf16 = name.getBytes(&quot;UTF-16&quot;);</div><div class="line">        toHex(utf16);</div><div class="line">        byte[] utf8 = name.getBytes(&quot;utf-8&quot;);</div><div class="line">        toHex(utf8);</div><div class="line">    &#125;catch(UnsupportedEncodingException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>java编码时序图<br><img src="/images/15231968596797.jpg" alt=""></p><h3 id="对几种编码格式比较"><a href="#对几种编码格式比较" class="headerlink" title="对几种编码格式比较"></a>对几种编码格式比较</h3><ol><li>GBK与GB2312规则类似，但是GBK范围更大</li><li>UTF-16转换简单，适合在本地磁盘和内存之间使用</li><li>UTF-8对单个字符校验，适合在网络上传输</li></ol><h2 id="在java-web中涉及的编解码"><a href="#在java-web中涉及的编解码" class="headerlink" title="在java web中涉及的编解码"></a>在java web中涉及的编解码</h2><p><strong>看一段文本的大小，只看字符本身是没有意义的，即使一样的字符，采用不同的编码最终存储的大小也会不同</strong><br>例如 整型数字1234567当做字符来存储，采用UTF-8编码占用7个字节，采用UTF-16占用16个字节，采用int型占用4个字节</p><ol><li>从客户端发送一个HTTP请求，需要编码的地方是URL，Cookie，Paramiter</li><li>服务端收到HTTP请求后，URL，Cookie，POST表单中的数据需要解码</li><li>服务端还可能读取本地或者网络中的数据库，这些数据可能存在编码问题</li></ol><h3 id="URL的编解码"><a href="#URL的编解码" class="headerlink" title="URL的编解码"></a>URL的编解码</h3><p>例如：URL为<br>http:( <strong><em>scheme</em></strong> )//localhost( <strong><em>domain</em></strong> ):8080( <strong><em>port</em></strong> )/example( <strong><em>contextPath</em></strong> )/servlets/servlet( <strong><em>ServletPath</em></strong> )/宇子( <strong><em>PathInfo</em></strong> )?author=宇子(<strong><em>QueryString</em></strong>)<br>URI：/example/servlets/servlet/宇子</p><blockquote><p><strong><em>以tomcat作为Servlet Engine为例：</em></strong><br>port：对应在Tomcat的 &lt; Connector prot = “8080”&gt;中配置<br>ContextPath:在&lt; Contextpath=”/example/“&gt;中配置<br>ServletPath：在web.xml的&lt; url-pattern&gt;中配置<br>PathInfo:就是我们请求的具体的Servlet<br>QueryString：就是要传递的参数（这里是讲Get）</p></blockquote><p>web.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;servlet-mapping&gt;</div><div class="line">    &lt;servlet-name&gt;Example&lt;/servlet-name&gt; </div><div class="line">    &lt;url-pattern&gt;/servlets/servlet/*&lt;url-pattern&gt;</div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure><p>解析请求的URL是在org.apache.coyote.HTTP11.InternalInputBuffer的parseRequestLine方法中进行的，让后将其byte[]设置到org.apache.coyote.Request的相应属性中，这里的URL仍是byte格式，转换成char是在org.apache.catalina.connector.CoyoteAdpter的convertURI方法中完成的。</p><blockquote><p>URL中的URI部分进行解码的字符集是在connector的&lt; Connector URIEncoding=”UTF-8”/&gt;中定义的，如果没有定义，那么默认使用ISO-8859-1<br>QueryString:(Get)是作为Parameters保存的，都通过request.getParameter获取数值，对它们的解码是在在该方法第一次被调用时进行的，该方法被调用时会调用org.apache.catalina.connector.Request的parseParameter方法，这个方法会对Get和Post方式传递的参数进行解码，但是它们的解码字符集有可能不一样      </p></blockquote><p>QueryString 的解码字符集</p><ul><li>Header中的ContentType定义的Charset   </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt; Connector URIEncoding = &quot;UTF-8&quot;, UseBodyEncodingForURI =&quot;true&quot;&gt; //设置为true    </div><div class="line"># 仅仅是对QueryString使用BodyEncoding解码，而不是整个URI</div></pre></td></tr></table></figure><ul><li>默认是ISO8859-1</li></ul><h3 id="HTTP-Header的编解码"><a href="#HTTP-Header的编解码" class="headerlink" title="HTTP Header的编解码"></a>HTTP Header的编解码</h3><p>如Cookie，redirectPath可能会存在编码问题</p><ul><li>解码是在调用request.getHeader时进行的</li><li>如果请求的Header项没有解码，则调用MessageBytes的toString方法，这个方法对从byte到char转化的编码默认使用ISO-8859-1</li><li>如果非要在Header中传递非ASSCII字符，先将这些字符用org.apache.catalina.util.URLEncoder编码，再添加到Header中，我们使用的时候，再按照相应的字符集解码即可</li></ul><h3 id="POST表单中的编解码"><a href="#POST表单中的编解码" class="headerlink" title="POST表单中的编解码"></a>POST表单中的编解码</h3><ul><li>通过HTTP BODY传递</li><li>浏览器首先根据ContentType中的Charset编码格式进行编码</li><li>服务器也用ContentType中的字符集进行解码</li><li>可以通过request.setCharacterEncoding(charset)来设置</li></ul><blockquote><p>注意：第一次调用request.getParameter方法之前就设置request.setCharacterEncoding(charset),否者表单可能会出现乱码<br>针对multipart/from-data类型的参数，上传文件以字节流的方式传输到服务器的本地临时目录，这个过程没有涉及编解码，<strong><em>真正编码是在讲文件内容添加到parameters中</em></strong>     </p></blockquote><h3 id="HTTP-BODY的编解码"><a href="#HTTP-BODY的编解码" class="headerlink" title="HTTP BODY的编解码"></a>HTTP BODY的编解码</h3><ul><li>可以通过response.setCharacterEncoding来设置，它会覆盖request.setCharacterEncoding的值，并通过Header的Content-Type返回客户端</li><li>如果Content-Type没有是在Charset，浏览器根据HTML的&lt; meta HTTP-equiv = “Content-Type” content=”text/html”;charset=GBK”/&gt;中的charset来解码</li><li>最后会用默认编码来解码</li><li>JDBC来存取数据时要和数据的内置编码保持一致，可以通过URL来指定，例如：MYSQL: url=”jdbc:mysql://localhost:3306/DB?useUnicode=true&amp;characterEncoding=GBK”</li></ul><h2 id="在JS中的编码问题"><a href="#在JS中的编码问题" class="headerlink" title="在JS中的编码问题"></a>在JS中的编码问题</h2><h3 id="外部引入js文件"><a href="#外部引入js文件" class="headerlink" title="外部引入js文件"></a>外部引入js文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;....js&quot; charset=&quot;gbk&quot;/&gt;</div></pre></td></tr></table></figure><p>如果没有设置,则使用当前页面默认的字符集解析这个JS文件</p><h3 id="JS的URL编码"><a href="#JS的URL编码" class="headerlink" title="JS的URL编码"></a>JS的URL编码</h3><ol><li>endodeURI()</li><li>encodeURIComponent()<br>这个函数通常用于将一个URL当做参数放在另外一个URL中</li><li><p>java与JS编码问题</p><ol><li>java端处理URL编码有两个类，分别是java.net.URLEncoder和java.net.URLDecoder</li><li><p>js默认编码是UTF-8，而服务端的中文有可能是GBK或者GB2312，解决办法是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">encodeURIComponent(encodeURIComponent(str))</div></pre></td></tr></table></figure></li></ol></li></ol><h3 id="其他需要编码的地方"><a href="#其他需要编码的地方" class="headerlink" title="其他需要编码的地方"></a>其他需要编码的地方</h3><ul><li>XML</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div></pre></td></tr></table></figure><ul><li>Velocity模板设置编码格式如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">services.VelocityService.input.encoding=UTF-8</div></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@page contentType=&quot;text/html&quot;;charset=UTF-8 %&gt;</div></pre></td></tr></table></figure><h2 id="常见问题分析"><a href="#常见问题分析" class="headerlink" title="常见问题分析"></a>常见问题分析</h2><h3 id="中文变成了看不懂的字符"><a href="#中文变成了看不懂的字符" class="headerlink" title="中文变成了看不懂的字符"></a>中文变成了看不懂的字符</h3><p>如果一个中文变成了两个乱码字符，这是编码字符集和解码字符集不一致导致的</p><h3 id="一个汉字变成一个问号"><a href="#一个汉字变成一个问号" class="headerlink" title="一个汉字变成一个问号"></a>一个汉字变成一个问号</h3><p>不在码值范围内的字符会统一用3f表示，也就是常说的<strong><em>黑洞</em></strong></p><h3 id="一个汉字变成了两个问号"><a href="#一个汉字变成了两个问号" class="headerlink" title="一个汉字变成了两个问号"></a>一个汉字变成了两个问号</h3><p>一般是中文经过多次编码</p><h3 id="一种不正常的正确编码"><a href="#一种不正常的正确编码" class="headerlink" title="一种不正常的正确编码"></a>一种不正常的正确编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String value= String(request.getParameter(name).getBytes(&quot;ISO-8859-1&quot;),&quot;GBK&quot;);</div></pre></td></tr></table></figure><blockquote><p>ISO-8859-1字符集的编码范围是0000-00ff,正好和一个字节的范围相对应，这就使得刚开始用GBK编码的字符在用ISO-8859-1解码的时候，将两字节的中文拆分成两个欧文字符，再用ISO-8859-1编码，会还原原来字符的字节，所以再用GBK解码，就可以得到正确的汉字</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>解决编码问题，首先要搞清楚哪些地方会引起从字符到字节的转换</li><li>搞清楚操作这些数据的框架和系统是如何控制这些编码的</li><li>正确设置编码格式，避免使用软件默认的或者操作系统平台默认的编码</li></ol><blockquote><p>上文摘自深入分析JAVA WEB 技术内幕</p><hr><p><strong><em>做一个有文艺气息的码农 ^ _ ^</em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入分析Java-Web中的中文编码问题&quot;&gt;&lt;a href=&quot;#深入分析Java-Web中的中文编码问题&quot; class=&quot;headerlink&quot; title=&quot;深入分析Java Web中的中文编码问题&quot;&gt;&lt;/a&gt;深入分析Java Web中的中文编码问题&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之简单工厂模式</title>
    <link href="http://yoursite.com/2018/04/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/08/设计模式/设计模式之简单工厂模式/</id>
    <published>2018-04-08T14:11:45.128Z</published>
    <updated>2018-04-08T14:12:52.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码无错就是优？-简单工厂模式"><a href="#代码无错就是优？-简单工厂模式" class="headerlink" title="代码无错就是优？-简单工厂模式"></a>代码无错就是优？-简单工厂模式</h1><p>前些天，拜读完大作大话设计模式，里面的示例代码是用C#写的，为了让自己加深一下影响，决定用Java写一下，顺便学着画画UML图^~^<br>UML:<br><img src="/images/15231967270136.jpg" alt=""></p><p>Operation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public abstract class Operation &#123;</div><div class="line">    private double numberA = 0;</div><div class="line">    private double numberB = 0;</div><div class="line">    private double result = 0;</div><div class="line"></div><div class="line">    public double getResult() &#123;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setResult(double result) &#123;</div><div class="line">        this.result = result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public double getNumberA() &#123;</div><div class="line">        return numberA;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setNumberA(double numberA) &#123;</div><div class="line">        this.numberA = numberA;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public double getNumberB() &#123;</div><div class="line">        return numberB;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setNumberB(double numberB) &#123;</div><div class="line">        this.numberB = numberB;</div><div class="line">    &#125;</div><div class="line">    public abstract double calculate();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>OperationFactory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class OperationFactory &#123;</div><div class="line">    public static Operation createOperate(String operate)&#123;</div><div class="line">        Operation operation = null;</div><div class="line">        switch (operate)&#123;</div><div class="line">            case &quot;+&quot;:</div><div class="line">                operation = new OperationAdd();</div><div class="line">                break;</div><div class="line">            case &quot;-&quot;:</div><div class="line">                operation = new OperationSub();</div><div class="line">                break;</div><div class="line">            case &quot;*&quot;:</div><div class="line">                operation = new OperationMul();</div><div class="line">                break;</div><div class="line">            case &quot;/&quot;:</div><div class="line">                operation = new OperationDiv();</div><div class="line">        &#125;</div><div class="line">        return operation;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>OperationAdd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class OperationAdd extends Operation &#123;</div><div class="line">    @Override</div><div class="line">    public double calculate() &#123;</div><div class="line">        setResult(getNumberA() + getNumberB());</div><div class="line">        return getResult();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>OperationDiv</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class OperationDiv extends Operation&#123;</div><div class="line">    @Override</div><div class="line">    public double calculate() &#123;</div><div class="line">        setResult(getNumberA() / getNumberB());</div><div class="line">        return getResult();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>OperationSub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class OperationSub extends Operation&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double calculate() &#123;</div><div class="line">        setResult(getNumberA() - getNumberB());</div><div class="line">        return getResult();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>OperationMul</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class OperationMul extends Operation&#123;</div><div class="line">    @Override</div><div class="line">    public double calculate() &#123;</div><div class="line">        setResult(getNumberA() * getNumberB());</div><div class="line">        return getResult();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        Operation opera;</div><div class="line">        opera = OperationFactory.createOperate(&quot;+&quot;);</div><div class="line">        opera.setNumberA(1);</div><div class="line">        opera.setNumberB(2);</div><div class="line">        opera.calculate();</div><div class="line">        System.out.println(opera.getResult());</div><div class="line">        opera =OperationFactory.createOperate(&quot;-&quot;);</div><div class="line">        opera.setNumberA(1);</div><div class="line">        opera.setNumberB(2);</div><div class="line">        opera.calculate();</div><div class="line">        System.out.println(opera.getResult());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p><strong><em>编程是一门技术，更是一门艺术</em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码无错就是优？-简单工厂模式&quot;&gt;&lt;a href=&quot;#代码无错就是优？-简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;代码无错就是优？-简单工厂模式&quot;&gt;&lt;/a&gt;代码无错就是优？-简单工厂模式&lt;/h1&gt;&lt;p&gt;前些天，拜读完大作大话设计模式，里面
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="http://yoursite.com/2018/04/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/08/设计模式/设计模式之策略模式/</id>
    <published>2018-04-08T14:09:46.137Z</published>
    <updated>2018-04-08T14:11:05.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商城促销-策略模式"><a href="#商城促销-策略模式" class="headerlink" title="商城促销-策略模式"></a>商城促销-策略模式</h1><blockquote><p>它定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变换，不会影响到使用算法的客户</p></blockquote><p>二话不说，先上图<br><img src="/images/15231966222746.jpg" alt=""><br><img src="media/15229360961798/15230163731985.jpg" alt=""></p><p>再上码<br>Strategy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public abstract class Strategy &#123;</div><div class="line">    public abstract void AlgorithmInterface();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Context</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Context &#123;</div><div class="line">    private Strategy strategy;</div><div class="line">    Context(Strategy strategy)&#123;</div><div class="line">        this.strategy = strategy;</div><div class="line">    &#125;</div><div class="line">    public void ContextInterface()&#123;</div><div class="line">        this.strategy.AlgorithmInterface();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ConcreteStrategyA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ConcreteStrategyA extends Strategy&#123;</div><div class="line">    @Override</div><div class="line">    public void AlgorithmInterface() &#123;</div><div class="line">        System.out.println(&quot;这是策略A&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ConcreteStrategyB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ConcreteStrategyB extends Strategy&#123;</div><div class="line">    @Override</div><div class="line">    public void AlgorithmInterface() &#123;</div><div class="line">        System.out.println(&quot;这是策略B&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ConcreteStrategyC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ConcreteStrategyC extends Strategy&#123;</div><div class="line">    @Override</div><div class="line">    public void AlgorithmInterface() &#123;</div><div class="line">        System.out.println(&quot;这是策略C&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        Context context = new Context(new ConcreteStrategyA());</div><div class="line">        context.ContextInterface();</div><div class="line"></div><div class="line">        Context context1 = new Context(new ConcreteStrategyB());</div><div class="line">        context1.ContextInterface();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>只要在分析过程中听到需要在不同时间应用不同业务规则，就可以考虑用策略模式处理这种变化的可能性</p><blockquote><p><strong><em>做一个有文艺气息的码农 ^ _ ^</em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;商城促销-策略模式&quot;&gt;&lt;a href=&quot;#商城促销-策略模式&quot; class=&quot;headerlink&quot; title=&quot;商城促销-策略模式&quot;&gt;&lt;/a&gt;商城促销-策略模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;它定义了算法家族，分别封装起来，让它们之间可以相互替换，此
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>深入class文件结构</title>
    <link href="http://yoursite.com/2018/04/08/JavaWeb/Javac%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/08/JavaWeb/Javac编译原理/</id>
    <published>2018-04-08T14:09:09.125Z</published>
    <updated>2018-04-08T14:09:24.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javac编译原理"><a href="#Javac编译原理" class="headerlink" title="Javac编译原理"></a>Javac编译原理</h1><p>Javac的任务就是将Java语言规范转化成Java虚拟机语言规范</p><h2 id="javac工作原理分析"><a href="#javac工作原理分析" class="headerlink" title="javac工作原理分析"></a>javac工作原理分析</h2><h3 id="词法分析器"><a href="#词法分析器" class="headerlink" title="词法分析器"></a>词法分析器</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Javac编译原理&quot;&gt;&lt;a href=&quot;#Javac编译原理&quot; class=&quot;headerlink&quot; title=&quot;Javac编译原理&quot;&gt;&lt;/a&gt;Javac编译原理&lt;/h1&gt;&lt;p&gt;Javac的任务就是将Java语言规范转化成Java虚拟机语言规范&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>深入class文件结构</title>
    <link href="http://yoursite.com/2018/04/08/JavaWeb/%E6%B7%B1%E5%85%A5class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/04/08/JavaWeb/深入class文件结构/</id>
    <published>2018-04-08T14:08:15.472Z</published>
    <updated>2018-04-11T10:25:40.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入class文件结构"><a href="#深入class文件结构" class="headerlink" title="深入class文件结构"></a>深入class文件结构</h1><p>可以使用Oolong和jdk自带的javap生成class文件结构，现在我们用javap的方式生成</p><h2 id="Javap生成的class文件结构"><a href="#Javap生成的class文件结构" class="headerlink" title="Javap生成的class文件结构"></a>Javap生成的class文件结构</h2><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javap -verbose ClassParse &gt; ClassParse.txt//该命令可以将ClassParse.class的结构信息输入到txt中</div></pre></td></tr></table></figure><p>ClassParse.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">Classfile XXX/XXX.class</div><div class="line">  Last modified Apr 6, 2018; size 574 bytes</div><div class="line">  MD5 checksum xxxxxxxx</div><div class="line">  Compiled from &quot;ClassParse.java&quot;</div><div class="line">public class </div><div class="line">xxx.xxx.xxx.ClassParse</div><div class="line">  minor version: 0</div><div class="line">  major version: 52</div><div class="line">  flags: ACC_PUBLIC, ACC_SUPER</div><div class="line">Constant pool:</div><div class="line">   #1 = Methodref          #6.#20         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</div><div class="line">   #2 = Fieldref           #21.#22        // java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">   #3 = String             #23            // hello,YT</div><div class="line">   #4 = Methodref          #24.#25        // java/io/PrintStream.print:(Ljava/lang/String;)V</div><div class="line">   #5 = Class              #26            // com/XXX/java_web_test/ClassParse</div><div class="line">   #6 = Class              #27            // java/lang/Object</div><div class="line">   #7 = Utf8               &lt;init&gt;</div><div class="line">   #8 = Utf8               ()V</div><div class="line">   #9 = Utf8               Code</div><div class="line">  #10 = Utf8               LineNumberTable</div><div class="line">  #11 = Utf8               LocalVariableTable</div><div class="line">  #12 = Utf8               this</div><div class="line">  #13 = Utf8               Lcom/XXX/java_web_test/ClassParse;</div><div class="line">  #14 = Utf8               main</div><div class="line">  #15 = Utf8               ([Ljava/lang/String;)V</div><div class="line">  #16 = Utf8               args</div><div class="line">  #17 = Utf8               [Ljava/lang/String;</div><div class="line">  #18 = Utf8               SourceFile</div><div class="line">  #19 = Utf8               ClassParse.java</div><div class="line">  #20 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</div><div class="line">  #21 = Class              #28            // java/lang/System</div><div class="line">  #22 = NameAndType        #29:#30        // out:Ljava/io/PrintStream;</div><div class="line">  #23 = Utf8               hello,YT</div><div class="line">  #24 = Class              #31            // java/io/PrintStream</div><div class="line">  #25 = NameAndType        #32:#33        // print:(Ljava/lang/String;)V</div><div class="line">  #26 = Utf8               com/XXX/java_web_test/ClassParse</div><div class="line">  #27 = Utf8               java/lang/Object</div><div class="line">  #28 = Utf8               java/lang/System</div><div class="line">  #29 = Utf8               out</div><div class="line">  #30 = Utf8               Ljava/io/PrintStream;</div><div class="line">  #31 = Utf8               java/io/PrintStream</div><div class="line">  #32 = Utf8               print</div><div class="line">  #33 = Utf8               (Ljava/lang/String;)V</div><div class="line">&#123;</div><div class="line">  public com.XXX.java_web_test.ClassParse();</div><div class="line">    descriptor: ()V</div><div class="line">    flags: ACC_PUBLIC</div><div class="line">    Code:</div><div class="line">      stack=1, locals=1, args_size=1</div><div class="line">         0: aload_0</div><div class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</div><div class="line">         4: return</div><div class="line">      LineNumberTable:</div><div class="line">        line 7: 0</div><div class="line">      LocalVariableTable:</div><div class="line">        Start  Length  Slot  Name   Signature</div><div class="line">            0       5     0  this   Lcom/XXX/java_web_test/ClassParse;</div><div class="line"></div><div class="line">  public static void main(java.lang.String[]);</div><div class="line">    descriptor: ([Ljava/lang/String;)V</div><div class="line">    flags: ACC_PUBLIC, ACC_STATIC</div><div class="line">    Code:</div><div class="line">      stack=2, locals=1, args_size=1</div><div class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">         3: ldc           #3                  // String hello,YT</div><div class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.print:(Ljava/lang/String;)V</div><div class="line">         8: return</div><div class="line">      LineNumberTable:</div><div class="line">        line 9: 0</div><div class="line">        line 10: 8</div><div class="line">      LocalVariableTable:</div><div class="line">        Start  Length  Slot  Name   Signature</div><div class="line">            0       9     0  args   [Ljava/lang/String;</div><div class="line">&#125;</div><div class="line">SourceFile: &quot;ClassParse.java&quot;</div></pre></td></tr></table></figure><h3 id="LineNumberTable"><a href="#LineNumberTable" class="headerlink" title="LineNumberTable"></a>LineNumberTable</h3><p>在LinnumberTable下面包含多个line a:b<br>a:表示这个方法中的一行代码在类文件中的第几行<br>b:是指这行代码的第一条JVM指令的pc偏移量</p><p>例如</p><p><img src="/images/15234422979809.jpg" alt=""></p><p>分别对应到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LineNumberTable:</div><div class="line">        line 9: 0</div><div class="line">        line 10: 8</div></pre></td></tr></table></figure><p>冒号后面的0是这个代码的第一个JVM指令的偏移地址，一般一个方法的第一行代码对应的偏移地址都是0，这个方法的所有指令的偏移地址如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">    descriptor: ([Ljava/lang/String;)V</div><div class="line">    flags: ACC_PUBLIC, ACC_STATIC</div><div class="line">    Code:</div><div class="line">      stack=2, locals=1, args_size=1</div><div class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">         3: ldc           #3                  // String hello,YT</div><div class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.print:(Ljava/lang/String;)V</div><div class="line">         8: return</div></pre></td></tr></table></figure><p>从0~5都是System.out.print(“hello,YT”);一行代码对应的指令，而8行对应的指令就是return</p><h3 id="LocalVariableTable"><a href="#LocalVariableTable" class="headerlink" title="LocalVariableTable"></a>LocalVariableTable</h3><ol><li>Start： 该变量有效作用域的偏移地址</li><li>Length： 该变量有效作用域的偏移地址（和Start一起）</li><li>Slot： 该变量被赋值到某个Slot中的指令的下一条指令的偏移地址，一个变量的作用域就是[Start, Start+ Length]</li><li>Name： Slot表示该变量占用的Slot编号和该变量的名称</li><li>Signature：表示该变量的类型</li></ol><p>例如：<br><img src="/images/15234423246659.jpg" alt=""></p><p>对应的字节码和LineNumber如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public void stack(java.lang.String[]);</div><div class="line">    descriptor: ([Ljava/lang/String;)V</div><div class="line">    flags: ACC_PUBLIC</div><div class="line">    Code:</div><div class="line">      stack=2, locals=6, args_size=2</div><div class="line">         0: ldc           #5                  // String YT</div><div class="line">         2: astore_2</div><div class="line">         3: aload_2</div><div class="line">         4: ldc           #5                  // String YT</div><div class="line">         6: invokevirtual #6                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z</div><div class="line">         9: ifeq          30</div><div class="line">        12: iconst_3</div><div class="line">        13: istore_3</div><div class="line">        14: iload_3</div><div class="line">        15: ifle          27</div><div class="line">        18: lconst_1</div><div class="line">        19: lstore        4</div><div class="line">        21: iinc          3, -1</div><div class="line">        24: goto          14</div><div class="line">        27: goto          40</div><div class="line">        30: bipush        97</div><div class="line">        32: istore_3</div><div class="line">        33: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">        36: iload_3</div><div class="line">        37: invokevirtual #7                  // Method java/io/PrintStream.println:(C)V</div><div class="line">        40: return</div><div class="line">      LineNumberTable:</div><div class="line">        line 13: 0</div><div class="line">        line 14: 3</div><div class="line">        line 15: 12</div><div class="line">        line 16: 14</div><div class="line">        line 17: 18</div><div class="line">        line 18: 21</div><div class="line">        line 19: 24</div><div class="line">        line 20: 27</div><div class="line">        line 21: 30</div><div class="line">        line 22: 33</div><div class="line">        line 24: 40</div><div class="line">      LocalVariableTable:</div><div class="line">        Start  Length  Slot  Name   Signature</div><div class="line">           21       3     4     j   J</div><div class="line">           14      13     3     i   I</div><div class="line">           33       7     3     b   C</div><div class="line">            0      41     0  this   Lcom/XXX/java_web_test/ClassParse;</div><div class="line">            0      41     1   arg   [Ljava/lang/String;</div><div class="line">            3      38     2   str   Ljava/lang/String;</div></pre></td></tr></table></figure><p>在这个方法中共有6个变量，共使用4个Slot，变量j在lstore 4这条指令中首次赋值，所以它的Start就从iinc 3,-1开始，指令的偏移量是21，而Length是3，说明这个变量的作用域是[21,24]<br>我们可以看到，i，b变量是用的同一个Slot3，变量i的作用域是[14,27],变量b的作用域是[33,40],不重合</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法长度限制和行数限制</p><blockquote><p>上文摘自深入分析JAVA WEB 技术内幕</p><hr><p><strong><em>做一个有文艺气息的码农 ^ _ ^</em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入class文件结构&quot;&gt;&lt;a href=&quot;#深入class文件结构&quot; class=&quot;headerlink&quot; title=&quot;深入class文件结构&quot;&gt;&lt;/a&gt;深入class文件结构&lt;/h1&gt;&lt;p&gt;可以使用Oolong和jdk自带的javap生成class文件结构，
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>深入分析ClassLoader工作机制</title>
    <link href="http://yoursite.com/2018/04/08/JavaWeb/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90ClassLoader%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/04/08/JavaWeb/深入分析ClassLoader工作机制/</id>
    <published>2018-04-08T14:05:35.638Z</published>
    <updated>2018-04-08T14:08:16.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入分析ClassLoader工作机制"><a href="#深入分析ClassLoader工作机制" class="headerlink" title="深入分析ClassLoader工作机制"></a>深入分析ClassLoader工作机制</h1><p>ClassLoader有个作用（目的、任务）</p><ol><li>将Class加载到JVM中</li><li>负责审查每个类应该由谁来加载（父优先等级加载机制）</li><li>将Class字节码重新解析成JVM统一要求的对象格式</li></ol><h2 id="ClassLoader类结构分析"><a href="#ClassLoader类结构分析" class="headerlink" title="ClassLoader类结构分析"></a>ClassLoader类结构分析</h2><ol><li>defineClass():将byte字节流解析成JVM能够识别的Class对象，通常和findClass()一起使用</li><li>覆盖ClassLoader父类的findClass()来实现类的加载规则</li><li>resolveClass():类被加载时就链接（Link）</li></ol><p>如果你不想重新定义类的加载规则，也没有复杂的逻辑处理，只想运行时加载一个自己指定的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.getClass().getClassLoader().loadClass(&apos;class&apos;)//这个loadClass()有重载方法，同样可以决定在什么时候解析这个类</div></pre></td></tr></table></figure><p>ClassLoader是一个抽象类，如果我们想实现自己的ClassLoader的话，通常会继承URLClassLoader这个子类，因为这个类已经帮我们实现了大部分工作，我们只需要在适当的地方修改即可</p><h2 id="ClassLoader的等级加载机制"><a href="#ClassLoader的等级加载机制" class="headerlink" title="ClassLoader的等级加载机制"></a>ClassLoader的等级加载机制</h2><p>上级委托机制</p><blockquote><p>整个JVM提供三层ClassLoader，这三层可以分为两种类型，可以理解为为接待室服务的接待室和为会员服务的接待室</p><ol><li>Bootstrap这个ClassLoader是接待室服务自身的，它主要加载JVM自身工作需要的类，这个ClassLoader完全有JVM自己控制的，需要加载哪个类，怎么加载都是由JVM自己控制，别人访问不到，没有父加载器，也没有子加载器</li><li>ExtClassLoader 它是JVM自身的一部分，我们可以理解为这个类加载器是那些与这个大会合作单位的员工会员，既不是JVM内部的，也和普通的外部会员不同，它的服务的特定目标在System.getProperty(java.ext.dirs)目录</li><li>AppClassLoader 父类是ExtClassLoader，所有在System.getProperty(“java.class.path”)目录下的类都可以由这个类加载器来加载，这个目录就是我们经常用到的classpath</li></ol></blockquote><p>如果我们自己实现类加载器，getSystemClassLoader()作为父加载器获取到的都是AppClassLoader</p><p>ClassLoader的类层次图</p><p>JVM加载class文件有两种方式</p><ol><li>隐式加载：JVM自动加载需要的类到内存中，例如继承或引用某个类时，当这个类不在内存中的时候，jvm会自动将其加载到内存中</li><li>显示加载：调用ClassLoader类加载一个类的方式</li></ol><h2 id="如何加载class文件"><a href="#如何加载class文件" class="headerlink" title="如何加载class文件"></a>如何加载class文件</h2><ol><li>找到.class文件，并把这个文件包含的字节码加载到内存中</li><li>第二阶段可以分为3步<ol><li>字节码验证</li><li>Class类数据结构分析以及相应的内存分配</li><li>符号表的链接</li></ol></li><li>类中静态属性和初始化的赋值，以及静态块的执行</li></ol><h3 id="加载字节码到内存"><a href="#加载字节码到内存" class="headerlink" title="加载字节码到内存"></a>加载字节码到内存</h3><p>以URLClassLoader为例：<br>在URLClassLoader的findClass()中：<br>URLClassPath：定义了去哪里找这个Class文件<br>如果找到这个class文件，在读取它的byte字节流，通过调用defineClass()方法创建类对象</p><p>ClassLoader类型的参数形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Bootstrap ClassLoader：</div><div class="line">     -Xbootclasspath: //设置Bootstrap ClassLoader的搜索路径</div><div class="line">     -Xbootclasspath/a: //把路径添加到已存在Bootstrap ClassLoader搜索路径后面</div><div class="line">     -Xbootclasspath/p: // 同上 前面</div><div class="line">ExtClassLoader:</div><div class="line">     -Djava.ext.dirs //设置ExtClassLoader的搜索路径</div><div class="line">AppClassLoader</div><div class="line">     -Djava.class.path= -cp或-classpath // 设置AppClassLoader的搜索路径</div></pre></td></tr></table></figure><h3 id="验证与解析"><a href="#验证与解析" class="headerlink" title="验证与解析"></a>验证与解析</h3><ol><li>字节码验证：确保格式行为正确</li><li>类准备：类中定义的字段、方法和实现接口所比需的数据结构</li><li>装入类所引用的其他类，如超类、接口、字段、方法签名</li></ol><h3 id="初始化Class对象"><a href="#初始化Class对象" class="headerlink" title="初始化Class对象"></a>初始化Class对象</h3><p>类中包含的静态初始器都被执行，在这个阶段末尾，静态字段被初始化为默认值</p><h2 id="常见加载类错误分析"><a href="#常见加载类错误分析" class="headerlink" title="常见加载类错误分析"></a>常见加载类错误分析</h2><h3 id="ClassNotFoundException"><a href="#ClassNotFoundException" class="headerlink" title="ClassNotFoundException"></a>ClassNotFoundException</h3><p>通常发生在显示加载类的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class NotFountException&#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">     try&#123;</div><div class="line">        Class.forName(&quot;notFoundClass&quot;);</div><div class="line">     &#125;catch(ClassNotFoundException)</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125; </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>显示加载一个类通常有如下方法</p><ul><li>通过类Class中的forName()方法</li><li>通过类ClassLoader中的loadClass()方法</li><li>通过类ClassLoader中的findSystemClass()方法</li></ul><p>可以通过如下命令获取claspath路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.getClass().getClassLoader().getResource(&quot;&quot;).toString();</div></pre></td></tr></table></figure><h3 id="NoClassDefFoundError"><a href="#NoClassDefFoundError" class="headerlink" title="NoClassDefFoundError"></a>NoClassDefFoundError</h3><p>这个异常在第一次使用命令行执行Java类时，可能会碰到<br>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -cp example.jar Example</div></pre></td></tr></table></figure><p>这是因为你的命令行中没有加类的包名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">java -cp example.jar net.xulingbo.Example</div><div class="line">``` </div><div class="line"></div><div class="line">解决这个方法就是确保每个类引用的类都在当前的classPath下面</div><div class="line"></div><div class="line">### UnsatisfiedLinkError</div><div class="line">如果不小心将在JVM中的某个lib删除了，就可能报这个错误了</div><div class="line"></div><div class="line">### ClassCastException</div><div class="line"></div><div class="line">* 对于普通对象，对象必须是目标类的实例或者其子类的实例，如果目标类是接口，那么会把它当做是实现了该接口的一个子类</div><div class="line">* 对于数组类型，目标类必须是数组类型或java.lang.Object、java.lang.Cloneable、java.io.Serializable</div><div class="line"></div><div class="line">避免的方式</div><div class="line"></div><div class="line">* 显示指明这个容器所包含的对象类型</div><div class="line">* 先同过instanceof检测是不是目标类型，然后再进行强制类型转换</div><div class="line"></div><div class="line">### ExceptionInInitializerError</div><div class="line"></div><div class="line">* 如果JVM在创建实例的时候因为Out-Of-Memory-Error而无法创建新实例，那么就抛出OutOfMemoryError对象作为代替</div><div class="line">* 如果初始化器抛出一些Exception，如果这个Exception不是Error或者是它的子类，则创建ExceptionInInitializerError类的一个新的实例，并用Exception作为参数，用这个实例代替Exception</div><div class="line"></div><div class="line">## 常用的ClassLoader分析</div></pre></td></tr></table></figure><p>// todo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 如何实现自己的ClassLoader</div><div class="line"></div><div class="line">### 加载自定义路径下的class文件</div><div class="line">1. 继承ClassLoader实现</div></pre></td></tr></table></figure></p><p>public class PathClassLoader extends ClassLoader{<br>    private String classpath;<br>    private String packageName; // 包名</p><pre><code>public PathClassLoader(String classpath){    this.classpath = classpath;}protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException{    if(packageName.startsWith(name)){        byte[] classData = getData(name);        if(classData == null){            throw new ClassNotFoundException();        }else {            return defineClass(name, classData, 0, classData.length);        }    }else {        return super.loadClass(name);    }}private byte[] getData(String className){    String path = classpath + File.separatorChar + className.replace(&apos;.&apos;, File.separatorChar)+&quot;.class&quot;;    try {        InputStream is = new FileInputStream(path);        ByteArrayOutputStream stream = new ByteArrayOutputStream();        byte[] buffer = new byte[2048];        int num = 0;        while ((num = is.read(buffer)) != -1){            stream.write(buffer, 0, num);        }        return stream.toByteArray();    }catch (IOException e){        e.printStackTrace();    }    return null;}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">其中，packageName就是你要自定义加载的包名，如果不是该包下的，还用父类加载器加载</div><div class="line"></div><div class="line">2. 继承URLClassLoader类，这个是常用方式</div></pre></td></tr></table></figure></p><p>public class URLPathClassLoader extends URLClassLoader{</p><pre><code>private String packageName = &quot;&quot;;// 该父类没有默认的构造方法public URLPathClassLoader(URL[] classPath, ClassLoader parent){    super(classPath, parent);}@Overrideprotected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {    Class&lt;?&gt; aClass = findLoadedClass(name);    if(aClass != null){        return aClass;    }    if(!packageName.startsWith(name)){        return super.loadClass(name);    }else {        return findClass(name); //递归  不太明白?    }}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">我们将指定目录化成URL路径，然后作为参数创建URLPathClassLoader对象，就会在URL指定的目录下查找指定的类文件</div><div class="line"></div><div class="line">### 加载自定义格式的class文件（将class文件加密）</div></pre></td></tr></table></figure></p><p>public class NetClassLoader extends ClassLoader {<br>    private String classpath;<br>    private String packageName; // 包名</p><pre><code>public NetClassLoader(String classpath){    this.classpath = classpath;}protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {    Class&lt;?&gt; aClass = findLoadedClass(name);    if(aClass != null){        return aClass;    }    if(!packageName.startsWith(name)){        byte[] classData = getData(name);        if(classData == null){            throw new ClassNotFoundException();        }else {            return defineClass(name, classData, 0, classData.length);        }    }else {        return super.loadClass(name);    }}private byte[] getData(String className){    String path = classpath + File.separatorChar + className.replace(&apos;.&apos;, File.separatorChar)+&quot;.class&quot;;    try {        InputStream is = new FileInputStream(path);        ByteArrayOutputStream stream = new ByteArrayOutputStream();        byte[] buffer = new byte[2048];        int num = 0;        while ((num = is.read(buffer)) != -1){            deCode(buffer); //将解码以后的buffer写到输出流中            stream.write(buffer, 0, num);        }        return stream.toByteArray();    }catch (IOException e){        e.printStackTrace();    }    return null;}private byte[] deCode(byte[] src){    byte[] decode = null;    // TODO: 解码业务逻辑    return decode;}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 实现类的热部署</div><div class="line"></div><div class="line">JVM 表示一个类是否是同一个类会有两个条件</div><div class="line"></div><div class="line">1. 类的完整类名是否一样</div><div class="line">2. 加载这个类的ClassLoader是否是一同一个</div></pre></td></tr></table></figure></p><p>public class ClassReloader extends ClassLoader {<br>    private String classpath;<br>    private String className = “com.etan.list.Question1”; // 类名</p><pre><code>public ClassReloader(String classpath) {    this.classpath = classpath;}protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {    byte[] classData = getData(name);    if (classData == null) {        throw new ClassNotFoundException();    } else {        return defineClass(className, classData, 0, classData.length);    }}private byte[] getData(String className) {    String path = classpath + className;    try {        InputStream is = new FileInputStream(path);        ByteArrayOutputStream stream = new ByteArrayOutputStream();        byte[] buffer = new byte[2048];        int num = 0;        while ((num = is.read(buffer)) != -1) {            stream.write(buffer, 0, num);        }        return stream.toByteArray();    } catch (IOException e) {        e.printStackTrace();    }    return null;}public static void main(String[] args){    try{        String path = &quot;/Users/YT/develop/interview_questions/out/production/interview_questions/com/etan/list/&quot;;        ClassReloader reloader = new ClassReloader(path);        Class r = reloader.findClass(&quot;Question1.class&quot;);        System.out.println(r.newInstance());        ClassReloader reloader2 = new ClassReloader(path);        Class r2 = reloader2.findClass(&quot;Question1.class&quot;);        System.out.println(r2.newInstance());    }catch (Exception e){        e.printStackTrace();    }}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">刚开始写的时候，没有加e.printStackTrace(),将一个default（权限）的class放入加载器，之后在r.newInstance()以后，就无法执行了，也不抛异常（傻了不是），最后在debug中找到是IllegalAccessException异常</div><div class="line">这里配一张权限表</div><div class="line">![屏幕快照 2018-04-08 下午4.24.56](media/15229986044234/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-08%20%E4%B8%8B%E5%8D%884.24.56.png)</div><div class="line">由于我在不同的包下访问的，所以这里没有权限，后来使用public class，就可以了</div></pre></td></tr></table></figure></p><p>com.XXX.list.Question1@60e53b93<br>com.XXX.list.Question1@266474c2<br>```<br>需要注意的是：</p><blockquote><p>被这个ClassLoader加载的类的字节码会保持在JVM的permGen区，这个数据一般只是在执行full GC时才会被回收，如果你的应用中有大量的动态类加载，Full GC又不是太频繁，需要注意PermGen区的大小</p></blockquote><h2 id="java应不应该动态加载对象"><a href="#java应不应该动态加载对象" class="headerlink" title="java应不应该动态加载对象"></a>java应不应该动态加载对象</h2><p>对象的引用关系只有对象的创建者持有和使用，JVM不可以干预对象的引用关系，因为JVM并不知道对象是子母被使用的</p><blockquote><p>不能动态的提供类对象的关键是，对象的状态被保存了，并且被其他对象引用了，一个简单的办法就是不保存对象的状态，对象被创建使用后就被释放掉，下次修改后，对象也是新的了</p></blockquote><hr><blockquote><p><strong><em>做一个有文艺气息的码农 ^ _ ^</em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入分析ClassLoader工作机制&quot;&gt;&lt;a href=&quot;#深入分析ClassLoader工作机制&quot; class=&quot;headerlink&quot; title=&quot;深入分析ClassLoader工作机制&quot;&gt;&lt;/a&gt;深入分析ClassLoader工作机制&lt;/h1&gt;&lt;p&gt;Cl
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单一职责原则</title>
    <link href="http://yoursite.com/2018/04/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2018/04/08/设计模式/单一职责原则/</id>
    <published>2018-04-08T14:04:16.763Z</published>
    <updated>2018-04-08T14:05:07.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拍摄UFO-单一职责原则"><a href="#拍摄UFO-单一职责原则" class="headerlink" title="拍摄UFO-单一职责原则"></a>拍摄UFO-单一职责原则</h1><blockquote><p>就一个类而言，应该仅有一个引起它变化的原因</p></blockquote><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏</p><p>软件设计正在要做的许多内容，就是发现职责并把这些职责相互分离，<strong><em>如果你能想到多于一个的动机会改变这个类，那么这个类就具有多于一个的职责</em></strong></p><blockquote><p><strong><em>做一个有文艺气息的码农 ^ _ ^</em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拍摄UFO-单一职责原则&quot;&gt;&lt;a href=&quot;#拍摄UFO-单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;拍摄UFO-单一职责原则&quot;&gt;&lt;/a&gt;拍摄UFO-单一职责原则&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;就一个类而言，应该仅有一个引起它变
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
