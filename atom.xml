<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EWSUN</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-06T11:33:08.194Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>EtanWatson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scala</title>
    <link href="http://yoursite.com/2018/06/05/Hadoop%E7%9B%B8%E5%85%B3/scala/"/>
    <id>http://yoursite.com/2018/06/05/Hadoop相关/scala/</id>
    <published>2018-06-05T04:28:29.154Z</published>
    <updated>2018-06-06T11:33:08.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scala"><a href="#scala" class="headerlink" title="scala"></a>scala</h1><blockquote><p>由于gethub托管的太慢的原因，现在准备将blog部署到阿里云上面，所以有都没有写完</p></blockquote><h3 id="函数和方法的最大区别"><a href="#函数和方法的最大区别" class="headerlink" title="函数和方法的最大区别"></a>函数和方法的最大区别</h3><blockquote><p>函数可以当做参数传入方法中</p></blockquote><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><blockquote><p>可以用自定义函数处理相关集合 map(_+10) //里面传的是匿名函数<br>map((x: Int) =&gt; x * 100)</p></blockquote><h3 id="神奇的下划线"><a href="#神奇的下划线" class="headerlink" title="神奇的下划线"></a>神奇的下划线</h3><h4 id="将方法转换成函数"><a href="#将方法转换成函数" class="headerlink" title="将方法转换成函数"></a>将方法转换成函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var f2 = m2 _</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scala&quot;&gt;&lt;a href=&quot;#scala&quot; class=&quot;headerlink&quot; title=&quot;scala&quot;&gt;&lt;/a&gt;scala&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于gethub托管的太慢的原因，现在准备将blog部署到阿里云上面，所以有都没有写完&lt;/
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/06/02/JavaSE/%E6%B5%81/"/>
    <id>http://yoursite.com/2018/06/02/JavaSE/流/</id>
    <published>2018-06-02T12:22:34.239Z</published>
    <updated>2018-06-02T12:56:27.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java网络编程（二）–-流"><a href="#Java网络编程（二）–-流" class="headerlink" title="Java网络编程（二）– 流"></a>Java网络编程（二）– 流</h1><blockquote><p>java的I/O建立于流（Stream）之上。输入流读取数据，输出流写入数据</p></blockquote><h2 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h2><blockquote><p>java.io.OutputStream</p></blockquote><h3 id="包括的方法"><a href="#包括的方法" class="headerlink" title="包括的方法"></a>包括的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public abstract void write(int b) throws IOException</div><div class="line">public void write(byte[] data) throws IOException</div><div class="line">public void write（byte[] data, int offset, int length）throws IOException </div><div class="line">public void flush() throws IOException</div><div class="line">public void close() throws IOException</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java网络编程（二）–-流&quot;&gt;&lt;a href=&quot;#Java网络编程（二）–-流&quot; class=&quot;headerlink&quot; title=&quot;Java网络编程（二）– 流&quot;&gt;&lt;/a&gt;Java网络编程（二）– 流&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;java的I/O建
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/06/01/JavaSE/%E5%9F%BA%E6%9C%AC%E7%BD%91%E8%B7%AF%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2018/06/01/JavaSE/基本网路概念/</id>
    <published>2018-06-01T07:50:46.775Z</published>
    <updated>2018-06-02T12:12:32.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java网络编程（一）–-基本网络概念"><a href="#Java网络编程（一）–-基本网络概念" class="headerlink" title="Java网络编程（一）– 基本网络概念"></a>Java网络编程（一）– 基本网络概念</h1><h2 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h2><blockquote><p>将网络分层，这样就可以修改甚至替换某一层的软件，只要层与层之间的接口保持不变，就不会影响到其他层</p></blockquote><p><img src="/images/15278412731477.jpg" alt=""></p><h3 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP/IP四层模型"></a>TCP/IP四层模型</h3><p><img src="/images/15278413933079.jpg" alt=""></p><h3 id="IPv4数据包结构"><a href="#IPv4数据包结构" class="headerlink" title="IPv4数据包结构"></a>IPv4数据包结构</h3><p><img src="/images/15278432626508.jpg" alt=""></p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><blockquote><p>负责确保各包以发送的顺序接收，并保证没有数据丢失或破坏，添加一个附加部首<br>这一层主要有两个协议 TCP(Transmission Control Protocol)/UDP（User Datagram Protocol）</p></blockquote><h3 id="网络地址转换（NAT）"><a href="#网络地址转换（NAT）" class="headerlink" title="网络地址转换（NAT）"></a>网络地址转换（NAT）</h3><blockquote><p>路由器会监视出站和入站的连接，调整IP包中的地址。对于出站的包，它将源地址改为路由器的外部地址。对于入站的包，它将目的地址改为一个本地地址</p></blockquote><h3 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java网络编程（一）–-基本网络概念&quot;&gt;&lt;a href=&quot;#Java网络编程（一）–-基本网络概念&quot; class=&quot;headerlink&quot; title=&quot;Java网络编程（一）– 基本网络概念&quot;&gt;&lt;/a&gt;Java网络编程（一）– 基本网络概念&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实时计算</title>
    <link href="http://yoursite.com/2018/05/19/Hadoop%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/19/Hadoop相关/实时计算（一）/</id>
    <published>2018-05-19T08:43:11.147Z</published>
    <updated>2018-06-06T11:30:44.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实时计算（一）"><a href="#实时计算（一）" class="headerlink" title="实时计算（一）"></a>实时计算（一）</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实时计算（一）&quot;&gt;&lt;a href=&quot;#实时计算（一）&quot; class=&quot;headerlink&quot; title=&quot;实时计算（一）&quot;&gt;&lt;/a&gt;实时计算（一）&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>hbase</title>
    <link href="http://yoursite.com/2018/05/18/Hadoop%E7%9B%B8%E5%85%B3/hbase/"/>
    <id>http://yoursite.com/2018/05/18/Hadoop相关/hbase/</id>
    <published>2018-05-18T08:01:07.938Z</published>
    <updated>2018-06-06T11:30:24.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hbase"><a href="#hbase" class="headerlink" title="hbase"></a>hbase</h1><p>hbase是一个高可靠性，高性能，面向列，可伸缩的分布式存储系统</p><h2 id="hbase安装"><a href="#hbase安装" class="headerlink" title="hbase安装"></a>hbase安装</h2><h2 id="hbase数据模型"><a href="#hbase数据模型" class="headerlink" title="hbase数据模型"></a>hbase数据模型</h2><h2 id="hbase命令"><a href="#hbase命令" class="headerlink" title="hbase命令"></a>hbase命令</h2><h2 id="hbase依赖zooleeper"><a href="#hbase依赖zooleeper" class="headerlink" title="hbase依赖zooleeper"></a>hbase依赖zooleeper</h2><h2 id="hbase开发"><a href="#hbase开发" class="headerlink" title="hbase开发"></a>hbase开发</h2><h2 id="hbase原理"><a href="#hbase原理" class="headerlink" title="hbase原理"></a>hbase原理</h2><h2 id="mapreduce操作hbase"><a href="#mapreduce操作hbase" class="headerlink" title="mapreduce操作hbase"></a>mapreduce操作hbase</h2><h2 id="hive操作hbase"><a href="#hive操作hbase" class="headerlink" title="hive操作hbase"></a>hive操作hbase</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hbase&quot;&gt;&lt;a href=&quot;#hbase&quot; class=&quot;headerlink&quot; title=&quot;hbase&quot;&gt;&lt;/a&gt;hbase&lt;/h1&gt;&lt;p&gt;hbase是一个高可靠性，高性能，面向列，可伸缩的分布式存储系统&lt;/p&gt;
&lt;h2 id=&quot;hbase安装&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>辅助系统</title>
    <link href="http://yoursite.com/2018/05/14/Hadoop%E7%9B%B8%E5%85%B3/%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/05/14/Hadoop相关/辅助系统/</id>
    <published>2018-05-14T12:06:41.499Z</published>
    <updated>2018-05-18T07:23:47.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="辅助系统"><a href="#辅助系统" class="headerlink" title="辅助系统"></a>辅助系统</h1><h2 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h2><h3 id="Flume架构图"><a href="#Flume架构图" class="headerlink" title="Flume架构图"></a>Flume架构图</h3><h4 id="简单结构图"><a href="#简单结构图" class="headerlink" title="简单结构图"></a>简单结构图</h4><p><img src="/images/15263004642892.jpg" alt=""></p><h4 id="复杂结构图"><a href="#复杂结构图" class="headerlink" title="复杂结构图"></a>复杂结构图</h4><p><img src="/images/15263005855548.jpg" alt=""></p><h3 id="Flume的安装部署"><a href="#Flume的安装部署" class="headerlink" title="Flume的安装部署"></a>Flume的安装部署</h3><ul><li>解压</li><li>修改conf下的flume-env.sh 在里面配置JAVA_HOME</li><li>根据采集需求配置采集方案</li><li>指定采集方案配置文件</li></ul><h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><ul><li>先在flume的conf目录下新建一个文件 netcat-logger.conf</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 定义这个agent中各组件的名字</div><div class="line">a1.sources=r1</div><div class="line">a1.sinks=k1</div><div class="line">a1.channels=c1</div><div class="line"></div><div class="line"># 描述和配置source组件：r1</div><div class="line">a1.sources.r1.type = netcat</div><div class="line">a1.sources.r1.bind = localhost</div><div class="line">a1.sources.r1.port = 44444</div><div class="line"></div><div class="line"># 描述和配置sink组件:k1</div><div class="line">a1.sinks.k1.type = logger</div><div class="line"></div><div class="line"># 描述和配置channel组件，此次使用时内存缓存的方式</div><div class="line">a1.channels.c1.type = memory</div><div class="line">a1.channels.c1.capacity = 1000</div><div class="line">a1.channels.c1.transactionCapacity = 100</div><div class="line"></div><div class="line"># 描述和配置source channel sink之间的连接关系</div><div class="line">a1.sources.r1.channels = c1</div><div class="line">a1.sinks.k1.channel = c1</div></pre></td></tr></table></figure><ul><li>启动agent去采集数集</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bin/flume-ng agent -c conf -f conf/netcat-logger.conf -n a1 -Dflume.root.logger=INFO,console</div><div class="line"></div><div class="line"># -c conf 指定flume 自身的配置文件所在目录</div><div class="line"># -f conf/netcat-logger.con 指定我们所描述的采集方案</div><div class="line"># -n a1 指定我们这个agent的名字</div></pre></td></tr></table></figure><h3 id="采集目录到HDFS"><a href="#采集目录到HDFS" class="headerlink" title="采集目录到HDFS"></a>采集目录到HDFS</h3><ul><li>采集源 ： spooldir</li><li>下沉目标，即sink ： hdfs sink</li><li>channel，可用file channel 也可以用内存channel</li></ul><h2 id="工作流调度器azkaban"><a href="#工作流调度器azkaban" class="headerlink" title="工作流调度器azkaban"></a>工作流调度器azkaban</h2><h3 id="Azkaban安装部署"><a href="#Azkaban安装部署" class="headerlink" title="Azkaban安装部署"></a>Azkaban安装部署</h3><h4 id="azkaban-web服务器安装"><a href="#azkaban-web服务器安装" class="headerlink" title="azkaban web服务器安装"></a>azkaban web服务器安装</h4><ul><li>解压</li><li>mv azkaban-web-server-2.5.0  server<h4 id="azkaban-执行服务器安装"><a href="#azkaban-执行服务器安装" class="headerlink" title="azkaban 执行服务器安装"></a>azkaban 执行服务器安装</h4></li><li>解压</li><li>mv azkaban-executor-server-2.5.0  executor</li></ul><h4 id="azkaban脚本导入"><a href="#azkaban脚本导入" class="headerlink" title="azkaban脚本导入"></a>azkaban脚本导入</h4><ul><li>解压</li><li><p>将解压后的mysql脚本，导入到mysql中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt;create database azkaban;</div><div class="line">mysql&gt;use azkaban;</div><div class="line">mysql&gt;source XXX/create-all-sql-2.5.0.sql</div></pre></td></tr></table></figure></li></ul><h4 id="创建SSL配置"><a href="#创建SSL配置" class="headerlink" title="创建SSL配置"></a>创建SSL配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">keytool -keystore keystore -alias jetty -genkey -keyalg RSA</div><div class="line"># 填写相关信息</div><div class="line"># 将生成keystore证书文件copy到azkaban web服务器根目录中</div><div class="line">cp keystore XXX/webserver</div></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li><p>配置服务器结点上的时区 <figure class="highlight plain"><figcaption><span>```  或者copy时区文件覆盖本地时去配置 ```cp</span><a href="/usr/share/zoneinfo/Asia/Shanghai">/etc/localtime```</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### azkban web 服务器的配置</div><div class="line">* 进入web服务器安装目录conf目录</div><div class="line">* 修改azkaban.properties</div></pre></td></tr></table></figure></p><p>#Azkaban Personalization Settings<br>azkaban.name=Test                           #服务器UI名称,用于服务器上方显示的名字<br>azkaban.label=My Local Azkaban                               #描述<br>azkaban.color=#FF3601                                                 #UI颜色<br>azkaban.default.servlet.path=/index<br>web.resource.dir=web/                                       #默认根web目录<br>default.timezone.id=Asia/Shanghai                           #默认时区,已改为亚洲/上海 默认为美国</p><p>#Azkaban UserManager class<br>user.manager.class=azkaban.user.XmlUserManager   #用户权限管理默认类<br>user.manager.xml.file=conf/azkaban-users.xml              #用户配置,具体配置参加下文</p><p>#Loader for projects<br>executor.global.properties=conf/global.properties    # global配置文件所在位置<br>azkaban.project.dir=projects                                                #<br>database.type=mysql                                                              #数据库类型<br>mysql.port=3306                                                                       #端口号<br>mysql.host=hadoop03                                                      #数据库连接IP<br>mysql.database=azkaban                                                       #数据库实例名<br>mysql.user=root                                                                 #数据库用户名<br>mysql.password=root                                                          #数据库密码<br>mysql.numconnections=100                                                  #最大连接数</p><p>#Velocity dev mode<br>velocity.dev.mode=false<br>#Jetty服务器属性.<br>jetty.maxThreads=25                                                               #最大线程数<br>jetty.ssl.port=8443                                                                   #Jetty SSL端口<br>jetty.port=8081                                                                         #Jetty端口<br>jetty.keystore=keystore                                                          #SSL文件名<br>jetty.password=123456                                                             #SSL文件密码<br>jetty.keypassword=123456                                                      #Jetty主密码 与 keystore文件相同<br>jetty.truststore=keystore                                                                #SSL文件名<br>jetty.trustpassword=123456                                                   # SSL文件密码</p><p>#执行服务器属性<br>executor.port=12321                                                               #执行服务器端口</p><p>#邮件设置<br>mail.sender=xxxxxxxx@163.com                                       #发送邮箱<br>mail.host=smtp.163.com                                                       #发送邮箱smtp地址<br>mail.user=xxxxxxxx                                       #发送邮件时显示的名称<br>mail.password=<strong><strong>**</strong></strong>                                                 #邮箱密码<br>job.failure.email=xxxxxxxx@163.com                              #任务失败时发送邮件的地址<br>job.success.email=xxxxxxxx@163.com                            #任务成功时发送邮件的地址<br>lockdown.create.projects=false                                           #<br>cache.directory=cache                                                            #缓存目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  </div><div class="line">##### azkban 执行服务器的配置  </div><div class="line"></div><div class="line">* 修改azkaban.properties</div></pre></td></tr></table></figure></li></ul><p>#Azkaban<br>default.timezone.id=Asia/Shanghai                                              #时区</p><h1 id="Azkaban-JobTypes-插件配置"><a href="#Azkaban-JobTypes-插件配置" class="headerlink" title="Azkaban JobTypes 插件配置"></a>Azkaban JobTypes 插件配置</h1><p>azkaban.jobtype.plugin.dir=plugins/jobtypes                   #jobtype 插件所在位置</p><p>#Loader for projects<br>executor.global.properties=conf/global.properties<br>azkaban.project.dir=projects</p><p>#数据库设置<br>database.type=mysql                                                                       #数据库类型(目前只支持mysql)<br>mysql.port=3306                                                                                #数据库端口号<br>mysql.host=192.168.20.200                                                           #数据库IP地址<br>mysql.database=azkaban                                                                #数据库实例名<br>mysql.user=azkaban                                                                         #数据库用户名<br>mysql.password=oracle                                                                   #数据库密码<br>mysql.numconnections=100                                                           #最大连接数</p><h1 id="执行服务器配置"><a href="#执行服务器配置" class="headerlink" title="执行服务器配置"></a>执行服务器配置</h1><p>executor.maxThreads=50                                                                #最大线程数<br>executor.port=12321                                                               #端口号(如修改,请与web服务中一致)<br>executor.flow.threads=30                                                                #线程数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 用户配置</div><div class="line">修改azkaban-users.xml</div></pre></td></tr></table></figure><p><azkaban-users><br>        <user username="azkaban" password="azkaban" roles="admin" groups="azkaban"><br>        <user username="metrics" password="metrics" roles="metrics"><br>        <user username="admin" password="admin" roles="admin,metrics"><br>        <role name="admin" permissions="ADMIN"><br>        <role name="metrics" permissions="METRICS"><br></role></role></user></user></user></azkaban-users></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 启动</div><div class="line">##### web服务器</div></pre></td></tr></table></figure><p>bin/azkaban-web-stat.sh</p><h1 id="无法加载主类，未解决"><a href="#无法加载主类，未解决" class="headerlink" title="无法加载主类，未解决"></a>无法加载主类，未解决</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 启动执行器</div></pre></td></tr></table></figure><p>bin/azkaban-executor-start.sh</p><h1 id="无法加载主类，为解决"><a href="#无法加载主类，为解决" class="headerlink" title="无法加载主类，为解决"></a>无法加载主类，为解决</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">## Sqoop的数据迁移</div><div class="line">### 配置安装</div><div class="line">* 下载解压</div><div class="line">* 修改配置文件</div></pre></td></tr></table></figure><p>  $ cd $SQOOP_HOME/conf<br>  $ mv sqoop-env-template.sh sqoop-env.sh</p><p>  #打开sqoop-env.sh并编辑下面几行：<br>  export HADOOP_COMMON_HOME=/home/hadoop/apps/hadoop-2.6.1/<br>  export HADOOP_MAPRED_HOME=/home/hadoop/apps/hadoop-2.6.1/<br>  export HIVE_HOME=/home/hadoop/apps/hive-1.2.1<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">* 加入mysql的jdbc驱动包</div></pre></td></tr></table></figure></p><p> cp  $HIVE_HOME/lib/mysql-connector-java-5.1.28.jar   $SQOOP_HOME/lib/<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">* 验证</div></pre></td></tr></table></figure></p><pre><code>$ cd $SQOOP_HOME/bin$ sqoop-version</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  </div><div class="line">### 数据的导入</div><div class="line">#### 导入到HDFS</div></pre></td></tr></table></figure><p>#语法<br>$ sqoop import (generic-args) (import-args)</p><p>#示例<br>$bin/sqoop import \<br>–connect jdbc:mysql://xxxx:3306/testsqoop \<br>–username root \<br>–password root \<br>–table emp –m 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### 导入到HIVE</div></pre></td></tr></table></figure></p><p>bin/sqoop import –connect jdbc:mysql://192.168.2.2:3306/testsqoop –username root –password root –table emp –hive-import –m 1</p><h1 id="未解决"><a href="#未解决" class="headerlink" title="未解决"></a>未解决</h1><h1 id="ERROR-hive-HiveConfig-Could-not-load-org-apache-hadoop-hive-conf-HiveConf-Make-sure-HIVE-CONF-DIR-is-set-correctly"><a href="#ERROR-hive-HiveConfig-Could-not-load-org-apache-hadoop-hive-conf-HiveConf-Make-sure-HIVE-CONF-DIR-is-set-correctly" class="headerlink" title="ERROR hive.HiveConfig: Could not load org.apache.hadoop.hive.conf.HiveConf. Make sure HIVE_CONF_DIR is set correctly."></a>ERROR hive.HiveConfig: Could not load org.apache.hadoop.hive.conf.HiveConf. Make sure HIVE_CONF_DIR is set correctly.</h1><h1 id="ERROR-tool-ImportTool-Import-failed-java-io-IOException-java-lang-ClassNotFoundException-org-apache-hadoop-hive-conf-HiveConf"><a href="#ERROR-tool-ImportTool-Import-failed-java-io-IOException-java-lang-ClassNotFoundException-org-apache-hadoop-hive-conf-HiveConf" class="headerlink" title="ERROR tool.ImportTool: Import failed: java.io.IOException: java.lang.ClassNotFoundException: org.apache.hadoop.hive.conf.HiveConf"></a>ERROR tool.ImportTool: Import failed: java.io.IOException: java.lang.ClassNotFoundException: org.apache.hadoop.hive.conf.HiveConf</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 导入到HDFS指定目录</div></pre></td></tr></table></figure><p>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;辅助系统&quot;&gt;&lt;a href=&quot;#辅助系统&quot; class=&quot;headerlink&quot; title=&quot;辅助系统&quot;&gt;&lt;/a&gt;辅助系统&lt;/h1&gt;&lt;h2 id=&quot;Flume&quot;&gt;&lt;a href=&quot;#Flume&quot; class=&quot;headerlink&quot; title=&quot;Flume&quot;&gt;
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>委托</title>
    <link href="http://yoursite.com/2018/05/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2018-05-13/"/>
    <id>http://yoursite.com/2018/05/13/设计模式/2018-05-13/</id>
    <published>2018-05-13T03:28:44.761Z</published>
    <updated>2018-05-14T11:57:19.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h1><blockquote><p>委托不属于23中设计模式，这里我们接上面的观察者模式，用来解决观察者模式中的不足</p></blockquote><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">public class Event &#123;</div><div class="line"></div><div class="line">    // 要执行方法的对象</div><div class="line">    private Object object;</div><div class="line">    // 要执行的方法名称</div><div class="line">    private String methodName;</div><div class="line">    // 要执行方法的参数</div><div class="line">    private Object[] params;</div><div class="line">    // 要执行方法的参数类型</div><div class="line">    private Class[] paramsTypes;</div><div class="line"></div><div class="line">    public Event()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Event(Object object, String methodName, Object...params) &#123;</div><div class="line">        this.object = object;</div><div class="line">        this.methodName = methodName;</div><div class="line">        this.params = params;</div><div class="line">        contractParamType(this.params);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 根据参数数组生成参数类型数组</div><div class="line">    private void contractParamType(Object[] params)&#123;</div><div class="line">        this.paramsTypes = new Class[params.length];</div><div class="line">        for (int i=0; i &lt; params.length; i ++)&#123;</div><div class="line">            this.paramsTypes[i] = params[i].getClass();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object getObject() &#123;</div><div class="line">        return object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setObject(Object object) &#123;</div><div class="line">        this.object = object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMethodName() &#123;</div><div class="line">        return methodName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMethodName(String methodName) &#123;</div><div class="line">        this.methodName = methodName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object[] getParams() &#123;</div><div class="line">        return params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setParams(Object[] params) &#123;</div><div class="line">        this.params = params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Class[] getParamsTypes() &#123;</div><div class="line">        return paramsTypes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setParamsTypes(Class[] paramsTypes) &#123;</div><div class="line">        this.paramsTypes = paramsTypes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void invoke() throws Exception&#123;</div><div class="line">        Method method = object.getClass().getMethod(this.getMethodName(), this.getParamsTypes());</div><div class="line">        if (method == null)&#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        method.invoke(this.getObject(),this.getParams());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="EventHandler"><a href="#EventHandler" class="headerlink" title="EventHandler"></a>EventHandler</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class EventHandler &#123;</div><div class="line">    // 是用一个List</div><div class="line">    private List&lt;Event&gt; objects;</div><div class="line"></div><div class="line">    public EventHandler()&#123;</div><div class="line">        objects = new ArrayList&lt;Event&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 添加某个对象要执行的事件,及需要的参数</div><div class="line">    public void addEvent(Object object, String methodName, Object...args)&#123;</div><div class="line">        objects.add(new Event(object, methodName, args));</div><div class="line">    &#125;</div><div class="line">    // 通知所有的对象执行指定的事件</div><div class="line">    public void notifyX() throws Exception&#123;</div><div class="line">        for (Event e: objects)&#123;</div><div class="line">            e.invoke();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Notifier"><a href="#Notifier" class="headerlink" title="Notifier"></a>Notifier</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public abstract class Notifier &#123;</div><div class="line">    private EventHandler eventHandler= new EventHandler();</div><div class="line"></div><div class="line">    public EventHandler getEventHandler()&#123;</div><div class="line">        return eventHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setEventHandler(EventHandler eventHandler) &#123;</div><div class="line">        this.eventHandler = eventHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 增加Notifier</div><div class="line">    public abstract void addListener(Object object, String methodName, Object...args);</div><div class="line"></div><div class="line">    public abstract void notifyX();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="GoodNotifier"><a href="#GoodNotifier" class="headerlink" title="GoodNotifier"></a>GoodNotifier</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class GoodNotifier extends Notifier&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addListener(Object object, String methodName, Object... args) &#123;</div><div class="line">        System.out.println(&quot;有新同学委托尽职尽责的放哨人&quot;);</div><div class="line">        this.getEventHandler().addEvent(object, methodName, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void notifyX() &#123;</div><div class="line">        System.out.println(&quot;尽职尽责的放哨人告诉需要帮助的同学:老师来了&quot;);</div><div class="line">        try &#123;</div><div class="line">            this.getEventHandler().notifyX();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="BadNotifier"><a href="#BadNotifier" class="headerlink" title="BadNotifier"></a>BadNotifier</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class BadNotifier extends Notifier&#123;</div><div class="line">    @Override</div><div class="line">    public void addListener(Object object, String methodName, Object... args) &#123;</div><div class="line">        System.out.println(&quot;有新同学委托不尽职尽责的放哨人&quot;);</div><div class="line">        this.getEventHandler().addEvent(object, methodName, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void notifyX() &#123;</div><div class="line">        System.out.println(&quot;不尽职尽责的放哨人告诉需要帮助的同学:老师来了&quot;);</div><div class="line">        try &#123;</div><div class="line">            this.getEventHandler().notifyX();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="PlayingGameListener"><a href="#PlayingGameListener" class="headerlink" title="PlayingGameListener"></a>PlayingGameListener</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class PlayingGameListener &#123;</div><div class="line">    public PlayingGameListener() &#123;</div><div class="line">        System.out.println(&quot;我正在玩游戏 开始时间&quot; + new Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void stopPlayingGame(Date date)&#123;</div><div class="line">        System.out.println(&quot;老师来了,结束收起游戏机, 结束时间&quot; + date);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="WatchingTVListener"><a href="#WatchingTVListener" class="headerlink" title="WatchingTVListener"></a>WatchingTVListener</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class WatchingTVListener &#123;</div><div class="line">    public WatchingTVListener() &#123;</div><div class="line">        System.out.println(&quot;我正在看电视 开始时间&quot; + new Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void stopWatchingTV(Date date)&#123;</div><div class="line">        System.out.println(&quot;老师来了，收起ipad 。 结束时间&quot;+date);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        // good 放哨者</div><div class="line">        GoodNotifier goodNotifier = new GoodNotifier();</div><div class="line"></div><div class="line">        // 开始玩游戏</div><div class="line">        PlayingGameListener playingGameListener = new PlayingGameListener();</div><div class="line"></div><div class="line">        // 开始看电视</div><div class="line">        WatchingTVListener watchingTVListener = new WatchingTVListener();</div><div class="line"></div><div class="line">        // 玩游戏的同学告诉放哨的同学,老师来了告诉一下</div><div class="line">        goodNotifier.addListener(playingGameListener, &quot;stopPlayingGame&quot;, new Date());</div><div class="line"></div><div class="line">        // 看电视的同学告诉放哨的同学,老师来了告诉一下</div><div class="line">        goodNotifier.addListener(watchingTVListener, &quot;stopWatchingTV&quot;, new Date());</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(1000);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        goodNotifier.notifyX();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;委托&quot;&gt;&lt;a href=&quot;#委托&quot; class=&quot;headerlink&quot; title=&quot;委托&quot;&gt;&lt;/a&gt;委托&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;委托不属于23中设计模式，这里我们接上面的观察者模式，用来解决观察者模式中的不足&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式</title>
    <link href="http://yoursite.com/2018/05/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/12/设计模式/设计模式之观察者模式/</id>
    <published>2018-05-12T07:32:44.592Z</published>
    <updated>2018-05-13T03:30:10.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式–老板回来？我不知道！"><a href="#观察者模式–老板回来？我不知道！" class="headerlink" title="观察者模式–老板回来？我不知道！"></a>观察者模式–老板回来？我不知道！</h1><blockquote><p>观察者模式，又叫做发布-订阅模式<br>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某个主题对象。这个主题对象在状态发生变化时，会通知所有观察者兑现，使它们能过自动更新自己</p></blockquote><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="/images/15261790357289.jpg" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 主题或抽象通知者</div><div class="line"> */</div><div class="line">public abstract class Subject &#123;</div><div class="line"></div><div class="line">    private List&lt;Observer&gt; observers = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    // 增加观察者</div><div class="line">    public void attach(Observer observer)&#123;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 移除观察者</div><div class="line">    public void detach(Observer observer)&#123;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 通知</div><div class="line">    public void notify_observer()&#123;</div><div class="line">        for (Observer o : observers)&#123;</div><div class="line">            o.update();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 抽象观察者类</div><div class="line"> */</div><div class="line">public abstract class Observer &#123;</div><div class="line"></div><div class="line">    public abstract void update();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ConcreteObserver"><a href="#ConcreteObserver" class="headerlink" title="ConcreteObserver"></a>ConcreteObserver</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class ConcreteObserver extends Observer&#123;</div><div class="line"></div><div class="line">    private String name;</div><div class="line">    private String observerState;</div><div class="line">    private  ConcreteSubject subject;</div><div class="line"></div><div class="line">    public ConcreteSubject getSubject() &#123;</div><div class="line">        return subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubject(ConcreteSubject subject) &#123;</div><div class="line">        this.subject = subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ConcreteObserver(ConcreteSubject subject, String name)&#123;</div><div class="line">        this.subject = subject;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void update() &#123;</div><div class="line">        observerState = subject.getSubjectState();</div><div class="line">        System.out.println(&quot;name&quot; + name + &quot;状态&quot; + observerState);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ConcreteSubject"><a href="#ConcreteSubject" class="headerlink" title="ConcreteSubject"></a>ConcreteSubject</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class ConcreteSubject extends Subject&#123;</div><div class="line"></div><div class="line">    private String subjectState;</div><div class="line"></div><div class="line">    // 具体被观察者状态</div><div class="line">    public String getSubjectState() &#123;</div><div class="line">        return subjectState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubjectState(String subjectState) &#123;</div><div class="line">        this.subjectState = subjectState;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        ConcreteSubject s = new ConcreteSubject();</div><div class="line">        s.attach(new ConcreteObserver(s, &quot;X&quot;));</div><div class="line">        s.attach(new ConcreteObserver(s, &quot;Y&quot;));</div><div class="line">        s.attach(new ConcreteObserver(s, &quot;Z&quot;));</div><div class="line"></div><div class="line">        s.setSubjectState(&quot;ABC&quot;);</div><div class="line">        s.notify_observer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性。<br>我们不希望为了维护一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。</p><h3 id="观察者模式在什么时候会被用到呢？"><a href="#观察者模式在什么时候会被用到呢？" class="headerlink" title="观察者模式在什么时候会被用到呢？"></a>观察者模式在什么时候会被用到呢？</h3><ul><li>当一个对象需要同时改变其他对象的时候，并且它不知道具体有多少对象有待改变</li><li>当一个抽象模型有两个方面，其中一方面依赖于另一方面，这时用观察者模式可以将这两者封装在独立的对象中使用它们各自独立地改变和复用</li></ul><h3 id="观察者模式的不足"><a href="#观察者模式的不足" class="headerlink" title="观察者模式的不足"></a>观察者模式的不足</h3><p>抽象通知者依赖于抽象观察者</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;观察者模式–老板回来？我不知道！&quot;&gt;&lt;a href=&quot;#观察者模式–老板回来？我不知道！&quot; class=&quot;headerlink&quot; title=&quot;观察者模式–老板回来？我不知道！&quot;&gt;&lt;/a&gt;观察者模式–老板回来？我不知道！&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;观
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式</title>
    <link href="http://yoursite.com/2018/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/11/设计模式/设计模式之建造者模式/</id>
    <published>2018-05-11T12:50:55.745Z</published>
    <updated>2018-05-12T07:31:59.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="好菜每回味不同–建造者模式"><a href="#好菜每回味不同–建造者模式" class="headerlink" title="好菜每回味不同–建造者模式"></a>好菜每回味不同–建造者模式</h1><blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示的意图时，我们就要用到建造者模式<br>如果我们用了建造者模式，那么用户就只需要指定需要建造的类型就可以得到它们，而具体建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了<br>建造者模式，建一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p></blockquote><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="/images/15260474187423.jpg" alt=""></p><h2 id="建造者模式基本代码"><a href="#建造者模式基本代码" class="headerlink" title="建造者模式基本代码"></a>建造者模式基本代码</h2><h3 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 具体的产品</div><div class="line"> */</div><div class="line">public class Product &#123;</div><div class="line">    List&lt;String&gt; parts = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 添加产品部件</div><div class="line">     * @param part</div><div class="line">     */</div><div class="line">    public void add(String part)&#123;</div><div class="line">        parts.add(part);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *</div><div class="line">     */</div><div class="line">    public void show()&#123;</div><div class="line">        System.out.println(&quot;\n 产品创建&quot;);</div><div class="line">        for(String part : parts)&#123;</div><div class="line">            System.out.println(part);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Director"><a href="#Director" class="headerlink" title="Director"></a>Director</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 指挥者,是构建一个使用Builder接口的对象</div><div class="line"> */</div><div class="line">public class Director &#123;</div><div class="line">    public void construct(Builder builder)&#123;</div><div class="line">        builder.buildPartA();</div><div class="line">        builder.buildPartB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ConcreteBuilder"><a href="#ConcreteBuilder" class="headerlink" title="ConcreteBuilder"></a>ConcreteBuilder</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 具体建造者,实现Builder接口,构造和装配各个部件</div><div class="line"> */</div><div class="line">public class ConcreteBuilder1 extends Builder &#123;</div><div class="line">    private Product product = new Product();</div><div class="line">    @Override</div><div class="line">    public void buildPartA() &#123;</div><div class="line">        product.add(&quot;部件A&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildPartB() &#123;</div><div class="line">        product.add(&quot;部件B&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Product getResult() &#123;</div><div class="line">        return product;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Builder是为创建一个Product对象的各个部件指定的抽象接口</div><div class="line"> */</div><div class="line">public abstract class Builder &#123;</div><div class="line">    public abstract void buildPartA();</div><div class="line">    public abstract void buildPartB();</div><div class="line">    public abstract Product getResult();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Director director = new Director();</div><div class="line">        Builder b1 = new ConcreteBuilder1();</div><div class="line">        Builder b2 = new ConcreteBuilder2();</div><div class="line"></div><div class="line">        director.construct(b1);</div><div class="line">        Product p1 = b1.getResult();</div><div class="line">        p1.show();</div><div class="line"></div><div class="line">        director.construct(b2);</div><div class="line">        Product p2 = b2.getResult();</div><div class="line">        p2.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>建造者模式使当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;好菜每回味不同–建造者模式&quot;&gt;&lt;a href=&quot;#好菜每回味不同–建造者模式&quot; class=&quot;headerlink&quot; title=&quot;好菜每回味不同–建造者模式&quot;&gt;&lt;/a&gt;好菜每回味不同–建造者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将一个复杂对象的构建与它的
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hive</title>
    <link href="http://yoursite.com/2018/05/10/Hadoop%E7%9B%B8%E5%85%B3/Hive/"/>
    <id>http://yoursite.com/2018/05/10/Hadoop相关/Hive/</id>
    <published>2018-05-10T13:21:48.678Z</published>
    <updated>2018-05-12T12:18:12.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><h2 id="Hive-安装"><a href="#Hive-安装" class="headerlink" title="Hive 安装"></a>Hive 安装</h2><h3 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h3><ul><li>内嵌模式：元数据保存在内嵌的derby中，允许一个会话链接，尝试多个链接是会报错</li><li>本地独立模式：在本地安装MySql，把元数据放到MySql内</li><li>远程模式：元数据放置在远程的MySql数据库中</li></ul><h3 id="hive安装包"><a href="#hive安装包" class="headerlink" title="hive安装包"></a>hive安装包</h3><ul><li>下载</li><li>将hive文件上传到Hadoop集群，并解压</li><li>cd (解压路径)  ln -s apache-hive-1.2.1-bin hive(创建软连接)</li></ul><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><h4 id="编辑-etc-profle"><a href="#编辑-etc-profle" class="headerlink" title="编辑/etc/profle"></a>编辑/etc/profle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># set hive env </div><div class="line">export HIVE_HOME=/export/servers/hive</div><div class="line">export PATH=$&#123;HIVE_HOME&#125;/bin:$PATH</div><div class="line"></div><div class="line"># 让环境变量生效</div><div class="line">source /etc/profile</div></pre></td></tr></table></figure><h4 id="修改hive配置文件"><a href="#修改hive配置文件" class="headerlink" title="修改hive配置文件"></a>修改hive配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">cd /export/servers/hive/conf/</div><div class="line"></div><div class="line"># 修改hive-env.sh文件</div><div class="line">cp hive-env.sh.template hive-env.sh</div><div class="line"></div><div class="line"># 将一下内容写到hive-env.sh</div><div class="line">export JAVA_HOME=/export/servers/jdk</div><div class="line">export HADOOP_HOME=/export/servers/hadoop</div><div class="line">export HIVE_HOME=/export/servers/hive</div><div class="line"></div><div class="line"># 修改log4j文件</div><div class="line">cp hive-log4j.properties.template hive-log4j.properties</div><div class="line"># 将EventCounter修改成org.apache.hadoop.log.metrics.EventCounter</div><div class="line"># log4j.appender.EventCounter=org.apache.hadoop.hive.shims.HiveEventCounter</div><div class="line">log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter</div><div class="line"></div><div class="line"># 配置远程登录模式</div><div class="line">touch hive-site.xml</div><div class="line"># 将以下信息写入到hive-site.xml文件中</div><div class="line">&lt;configuration&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</div><div class="line">                &lt;value&gt;jdbc:mysql://hadoop02:3306/hivedb?createDatabaseIfNotExist=true&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</div><div class="line">                &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</div><div class="line">                &lt;value&gt;root&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</div><div class="line">                &lt;value&gt;root&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div><div class="line"></div><div class="line"># 配置hive元数据库</div><div class="line">mysql -u root -p </div><div class="line">create database hivedb;</div><div class="line"></div><div class="line"># 对hive元数据库进行赋权，开放远程连接，开放localhost连接</div><div class="line">grant all privileges on *.* to root@&quot;%&quot; identified by &quot;root&quot; with grant option;</div><div class="line">grant all privileges on *.* to root@&quot;localhost&quot; identified by &quot;root&quot; with grant option;</div><div class="line"></div><div class="line"># 运行hive命令即可启动hive</div><div class="line">hive</div></pre></td></tr></table></figure><h4 id="错误汇总"><a href="#错误汇总" class="headerlink" title="错误汇总"></a>错误汇总</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1、Exception in thread &quot;main&quot; java.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient </div><div class="line"></div><div class="line">解决方案：hive-site.xml中的mysql配置是否正确，是否将mysql-connector-java-5.1.46放到hive lib里面</div><div class="line"></div><div class="line">2、Terminal initialization failed; falling back to unsupported</div><div class="line"></div><div class="line">解决方案：将hive下的新版本jline的JAR包拷贝到hadoop下</div><div class="line">cp /hive/apache-hive-1.1.0-bin/lib/jline-2.12.jar /root/hadoop/hadoop-2.6.0/share/hadoop/yarn/lib/</div></pre></td></tr></table></figure><h2 id="Hive-架构图"><a href="#Hive-架构图" class="headerlink" title="Hive 架构图"></a>Hive 架构图</h2><p><img src="/images/15259588352733.jpg" alt=""></p><h3 id="hive与hadoop的关系"><a href="#hive与hadoop的关系" class="headerlink" title="hive与hadoop的关系"></a>hive与hadoop的关系</h3><p><img src="/images/15260241753747.jpg" alt=""></p><h3 id="hive的数据存储"><a href="#hive的数据存储" class="headerlink" title="hive的数据存储"></a>hive的数据存储</h3><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><ul><li>DB 在hdfs表现为一个文件夹 ${hive.metastore.warehouse.dir}目录下</li><li>Table： BD目录下的一个文件夹</li><li>External Table： 存放位置可以任意</li><li>Partition：在hdfs上表现为table目录下的子目录</li><li>Bucket：在hdfs中表现为同一个表目录下根据hash散列之后的多个文件, 会根据不同的文件把数据放到不同的文件中 </li></ul><blockquote><p>删除内部表会直接删除元数据（metadata）及存储数据；删除外部表仅仅会删除元数据，HDFS上的文件并不会被删除； </p></blockquote><h3 id="使用hive"><a href="#使用hive" class="headerlink" title="使用hive"></a>使用hive</h3><h4 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h4><ul><li>bin/hive<h4 id="Hive-thrift服务"><a href="#Hive-thrift服务" class="headerlink" title="Hive thrift服务"></a>Hive thrift服务</h4></li><li>启动为前台： bin/hiveserver2</li><li>启动为后台：nohup bin/hiveserver2 1&gt;/var/log/hiveserver.log 2&gt;/var/log/hiveserver.err &amp;</li></ul><p>启动成功以后，可以在别的结点上用beeline去连接</p><ul><li>hive/bin/beeline  回车，进入beeline的命令界面，输入命令连接hiveserver2: <figure class="highlight plain"><figcaption><span>!connect jdbc:hive2://localhost:10000```（localhost是hiveserver2所启动的那台主机名，端口默认是10000,可以是其他结点）</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 启动就连接：```bin/beeline -u jdbc:hive2://locahost:10000 -n hadoop</div></pre></td></tr></table></figure></li></ul><h2 id="hive的基本操作"><a href="#hive的基本操作" class="headerlink" title="hive的基本操作"></a>hive的基本操作</h2><h3 id="DDL操作"><a href="#DDL操作" class="headerlink" title="DDL操作"></a>DDL操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><h5 id="建表语法"><a href="#建表语法" class="headerlink" title="建表语法"></a>建表语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">create [external] table [if not exists] table_name[(col_name_data_type [comment col_comment],...)]</div><div class="line">[comment table_comment]</div><div class="line">[partitioned by (col_name data_type</div><div class="line">[comment col_comment],...)]</div><div class="line">[clustered by(col_name,col_name,...)[SORTED BY(col_name[ASC|DESC],...)] into num_buckets buckets]</div><div class="line">[row format row_format]</div><div class="line">[stored as file_format]</div><div class="line">[location hdfs_path]</div></pre></td></tr></table></figure><blockquote><p>like 允许用户复制现有的表结构，但是不复制数据<br>row format：用户在建表的时候可以自定义SerDe或者使用自带的SerDe<br>stored as：SEQUENCEFILE|TEXTFILE|RCFILE<br>clustered by:把表分区组织成桶</p></blockquote><h5 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h5><h6 id="创建内部表-mytable"><a href="#创建内部表-mytable" class="headerlink" title="创建内部表 mytable"></a>创建内部表 mytable</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">create table if not exists mytable(sid int, sname string)</div><div class="line">row format delimited fields terminated by &apos;\t&apos; stored as textfile;</div></pre></td></tr></table></figure><h6 id="创建外部表pageview"><a href="#创建外部表pageview" class="headerlink" title="创建外部表pageview"></a>创建外部表pageview</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create external table if not exists pageview(pageid int ,page url string comment &apos;the page URL&apos;)</div><div class="line">row format delimited fields terminated by &apos;,&apos;</div><div class="line">location &apos;hdfs://xxx.xxx.xxx.xxx:9000/user/hive/warehouse&apos;;</div></pre></td></tr></table></figure><h6 id="创建分区表invites"><a href="#创建分区表invites" class="headerlink" title="创建分区表invites"></a>创建分区表invites</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">create table student_p(Sno int, Sname String, Sex string, Sage int, Sdept String) partitioned by(part string)</div><div class="line">row format delimited fields terminated by &apos;,&apos; stored as textfile;</div></pre></td></tr></table></figure><h6 id="创建贷通的表student"><a href="#创建贷通的表student" class="headerlink" title="创建贷通的表student"></a>创建贷通的表student</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">create table student(id int, age int, name string)</div><div class="line">partitioned by(stat_date string)</div><div class="line">clustered by(id) sorted by(age) into 2 buckets</div><div class="line">row format delimited fields terminated by &apos;,&apos;;</div></pre></td></tr></table></figure><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><h5 id="增加删除分区"><a href="#增加删除分区" class="headerlink" title="增加删除分区"></a>增加删除分区</h5><h6 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">alter table table_name add [if not exists] partition_spec[location &apos;location1&apos;]</div><div class="line">partition_spec:</div><div class="line">:partition(partition_col=partution_col_vlaue, partition_col=partition_col= partition_col_value,...)</div><div class="line"></div><div class="line">alter table table_name drop partition_spec,partition_spec,...</div></pre></td></tr></table></figure><h6 id="具体实例-1"><a href="#具体实例-1" class="headerlink" title="具体实例"></a>具体实例</h6><ul><li><p>添加分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table student_p add partition(part=&apos;a&apos;)partition(part=&apos;b&apos;)</div></pre></td></tr></table></figure></li><li><p>location</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table student add partition(stat_date=&apos;20180505&apos;) location &apos;/xxx/xxx/xx&apos;</div><div class="line">partition(stat_date=&apos;20180503&apos;)</div></pre></td></tr></table></figure></li><li><p>drop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table student drop partition(stat_date=&apos;20180505&apos;), partition(stat_date=&apos;20180503&apos;)</div></pre></td></tr></table></figure></li></ul><h4 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h4><h5 id="语法结构-1"><a href="#语法结构-1" class="headerlink" title="语法结构"></a>语法结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table table_name rename to ne_table_name</div></pre></td></tr></table></figure><h4 id="增加-更新列"><a href="#增加-更新列" class="headerlink" title="增加/更新列"></a>增加/更新列</h4><h5 id="语法结构-2"><a href="#语法结构-2" class="headerlink" title="语法结构"></a>语法结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table table_name add|replace columns(col_name data_type [comment col_comment],...)</div></pre></td></tr></table></figure><h4 id="显示命令"><a href="#显示命令" class="headerlink" title="显示命令"></a>显示命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">show tables</div><div class="line">show databases</div><div class="line">show partitions</div><div class="line">show functions</div><div class="line">desc extended t_name</div><div class="line">desc formatted table_name</div></pre></td></tr></table></figure><h3 id="DML操作"><a href="#DML操作" class="headerlink" title="DML操作"></a>DML操作</h3><h4 id="Load"><a href="#Load" class="headerlink" title="Load"></a>Load</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">load data[local]inpath&apos;filepath&apos;[overwrite]into</div><div class="line">table tablename[partition(partcol1=val1,partcol2=val2...)]</div></pre></td></tr></table></figure><h5 id="具体实例-2"><a href="#具体实例-2" class="headerlink" title="具体实例"></a>具体实例</h5><ul><li><p>相对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">load data local inpath &apos;filename&apos; into table student partition(stat_data=&apos;20180101&apos;);</div></pre></td></tr></table></figure></li><li><p>绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">load data local inpath &apos;/filename&apos; into table student partition(stat_data=&apos;20180101&apos;);</div></pre></td></tr></table></figure></li><li><p>加载包含模式数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">load data local inpath &apos;hdfs://filenam&apos; [overwrite] into table student partition(stat_data=&apos;20180101&apos;);</div></pre></td></tr></table></figure></li></ul><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><h5 id="将结构插入Hive表"><a href="#将结构插入Hive表" class="headerlink" title="将结构插入Hive表"></a>将结构插入Hive表</h5><h6 id="基本插入模式"><a href="#基本插入模式" class="headerlink" title="基本插入模式"></a>基本插入模式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">insert overwrite table student partition(stat_date=&apos;20180505&apos;)</div><div class="line">select id, age, name from student where stat_data=&apos;20180506&apos;;</div></pre></td></tr></table></figure><h6 id="多插入模式"><a href="#多插入模式" class="headerlink" title="多插入模式"></a>多插入模式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">form student </div><div class="line">insert overwrite table student partition(stat_date=&apos;20180505&apos;)</div><div class="line">select id,age,name where stat_date=&apos;20180606&apos;</div><div class="line">insert overwritte table student partition(stat_date=&apos;20180505&apos;)</div><div class="line">select id,age,name where stat_date=&apos;20180607&apos;</div></pre></td></tr></table></figure><h5 id="自动分区模式"><a href="#自动分区模式" class="headerlink" title="自动分区模式"></a>自动分区模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">insert overwrite table student1 partition(stat_date)</div><div class="line">select id,age,name,stat_date from student where stat_date=&apos;20180602&apos;;</div></pre></td></tr></table></figure><h5 id="导出数据表"><a href="#导出数据表" class="headerlink" title="导出数据表"></a>导出数据表</h5><h6 id="导出文件到本地"><a href="#导出文件到本地" class="headerlink" title="导出文件到本地"></a>导出文件到本地</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">insert overwrite local directory &apos;/&apos;</div><div class="line">select * from student1;</div></pre></td></tr></table></figure><h5 id="导出数据到HDFS"><a href="#导出数据到HDFS" class="headerlink" title="导出数据到HDFS"></a>导出数据到HDFS</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">insert overwrite directory &apos;hdfs://&apos; </div><div class="line">select * from student1;</div></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><h5 id="语法结构-3"><a href="#语法结构-3" class="headerlink" title="语法结构"></a>语法结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SELECT [ALL | DISTINCT] select_expr, select_expr, ... </div><div class="line">FROM table_reference</div><div class="line">[WHERE where_condition] </div><div class="line">[GROUP BY col_list [HAVING condition]] </div><div class="line">[CLUSTER BY col_list </div><div class="line">  | [DISTRIBUTE BY col_list] [SORT BY| ORDER BY col_list] </div><div class="line">] </div><div class="line">[LIMIT number]</div></pre></td></tr></table></figure><ul><li>order by: 全局排序，因此只有一个reducer</li><li>sort by：在数据进入reducer前完成，保证每个reducer的输出有序</li><li>distribute by：根据distribute by 指定的内容将数据分到同一个reducer</li><li>cluster by：distribute by + sort by</li></ul><h5 id="具体实例-3"><a href="#具体实例-3" class="headerlink" title="具体实例"></a>具体实例</h5><ul><li><p>获取年龄最大的三个学生 <figure class="highlight plain"><figcaption><span>id, age, name from student where stat_date</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* 查询学生信息按年龄，升序降序 ```select id, age, name, from student sort by age desc;``` </div><div class="line">* ``` select id, age, name, from student distribute by age;</div></pre></td></tr></table></figure></p></li><li><p>按学生名称汇总学生年龄 <figure class="highlight plain"><figcaption><span>name, sum(age) from student group by name```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### hive join</div><div class="line">#### 语法结构</div></pre></td></tr></table></figure></p></li></ul><p>join_table:<br>  table_reference JOIN table_factor [join_condition]<br>  | table_reference {LEFT|RIGHT|FULL} [OUTER] JOIN table_reference join_condition<br>  | table_reference LEFT SEMI JOIN table_reference join_condition<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#### 具体实例</div><div class="line">* 获取已分配班级的学生姓名 ```select name, classname from student a join class b on (a.name = b.std_name)</div></pre></td></tr></table></figure></p><ul><li>获取尚未分配班级的学生姓名 <figure class="highlight plain"><figcaption><span>name,classname from student a left join class b on (a.name </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* left semi join 是in/exists 的高效实现 ```select id,name from student a left semi join class b on (a.name = b.std_name);</div></pre></td></tr></table></figure></li></ul><h2 id="Hive-Shell-参数"><a href="#Hive-Shell-参数" class="headerlink" title="Hive Shell 参数"></a>Hive Shell 参数</h2><h3 id="hive-shell-命令行"><a href="#hive-shell-命令行" class="headerlink" title="hive shell 命令行"></a>hive shell 命令行</h3><h4 id="语法结构-4"><a href="#语法结构-4" class="headerlink" title="语法结构"></a>语法结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hive [-hiveconf x=y]* [&lt;-i filename&gt;]* [&lt;-f filename&gt;|&lt;-e query-string&gt;] [-S]</div><div class="line">说明：</div><div class="line">* -i 从文件初始化HQL。</div><div class="line">* -e从命令行执行指定的HQL </div><div class="line">* -f 执行HQL脚本 </div><div class="line">* -v 输出执行的HQL语句到控制台 </div><div class="line">* -p &lt;port&gt; connect to Hive Server on port number </div><div class="line">* -hiveconf x=y Use this to set hive/hadoop configuration variables.</div></pre></td></tr></table></figure><h4 id="具体实例-4"><a href="#具体实例-4" class="headerlink" title="具体实例"></a>具体实例</h4><ul><li><p>运行一个查询： <figure class="highlight plain"><figcaption><span>-e 'select count(*) from student'```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 运行一个文件： ```hive -f query.hql</div></pre></td></tr></table></figure></p></li><li><p>运行参数文件： <figure class="highlight plain"><figcaption><span>-i initHAL.conf ```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### Hive 的参数配置</div><div class="line">#### 配置文件</div><div class="line">##### 用户自定义配置文件</div></pre></td></tr></table></figure></p></li></ul><p>$HIVE_CONF_DIR/hive-site.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 默认配置文件</div></pre></td></tr></table></figure></p><p>$HIVE_CONF_DIR/hive-default.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">## Hive 函数</div><div class="line">### 内置运算符</div><div class="line">### 内置函数</div><div class="line">### 自定义函数</div><div class="line">#### 自定义函数类别</div><div class="line">* UDF 作用于单个数据行，产生一个数据行作为输出</div><div class="line">* UDFA 用户定义聚集函数：接收多个输入数据行，并产生一个输出数据行（count，max）</div><div class="line"></div><div class="line">##### UDF开发实例</div><div class="line">* 先开发一个java类，继承UDF，并重载evaluate方法</div></pre></td></tr></table></figure></p><p>import org.apache.hadoop.hive.ql.exec.UDF;<br>import org.apache.hadoop.io.Text;<br>public final class Lower extends UDF{<br>    public Text evaluate(final Text s){<br>        if(s==null){<br>            return null;<br>        }<br>        return new Text(s.toString().toLowerCase())<br>    }<br>}<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 打成jar包上传到服务器</div><div class="line">* 将jar包添加到hive的classpath ```add JAR /home/hadoop/udf.jar(???)</div><div class="line">* 创建临时的函数与开发好的java class 关联  ```create temporary function toprovince as &apos;完整的类路径&apos;</div></pre></td></tr></table></figure></p><ul><li><p>即可在hql中使用自定义的函数strip <figure class="highlight plain"><figcaption><span>strip(name), age from t_test; ```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> </div><div class="line">#### Transform实现</div><div class="line">&gt; 提供了在sql中调用自写脚本的功能</div><div class="line"></div><div class="line">##### 使用实例</div><div class="line">* 借助py脚本</div></pre></td></tr></table></figure></p><p> create table data(</p><pre><code>movieid int,rating int,weekday int,userid int)</code></pre><p> )<br> row format delimited fields terminated by ‘\t’;</p><p> add file file.py</p><p> insert overwarite table data<br> select<br> transform(moviedid,rating,unixtime,userid)<br> using ‘file.py’<br> as(movieid, rating, weekday, userid)</p><p> from data_old</p><h1 id="其中file-py内容如下"><a href="#其中file-py内容如下" class="headerlink" title="其中file.py内容如下"></a>其中file.py内容如下</h1><p> #!/bin/python<br> import sys<br> import datetime</p><p> for line in sys.stdin:<br>   line = line.strip()<br>   movieid, rating, unixtime,userid = line.split(‘\t’)<br>   weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()<br>   print (‘\t’.join([movieid, rating, str(weekday),userid]))</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">* shell的cat命令来处理</div></pre></td></tr></table></figure><p> FROM invites a INSERT OVERWRITE TABLE events SELECT TRANSFORM(a.foo, a.bar) AS (oof, rab) USING ‘/bin/cat’ WHERE a.ds &gt; ‘2008-08-09’;<br> ```</p></li></ul><h2 id="hive-权限设置"><a href="#hive-权限设置" class="headerlink" title="hive 权限设置"></a>hive 权限设置</h2><h2 id="hive-实战"><a href="#hive-实战" class="headerlink" title="hive 实战"></a>hive 实战</h2><h3 id="数据ETL"><a href="#数据ETL" class="headerlink" title="数据ETL"></a>数据ETL</h3><h3 id="访问时长统计"><a href="#访问时长统计" class="headerlink" title="访问时长统计"></a>访问时长统计</h3><h3 id="级联求和"><a href="#级联求和" class="headerlink" title="级联求和"></a>级联求和</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hive&quot;&gt;&lt;a href=&quot;#Hive&quot; class=&quot;headerlink&quot; title=&quot;Hive&quot;&gt;&lt;/a&gt;Hive&lt;/h1&gt;&lt;h2 id=&quot;Hive-安装&quot;&gt;&lt;a href=&quot;#Hive-安装&quot; class=&quot;headerlink&quot; title=&quot;Hiv
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>hadoop高可用</title>
    <link href="http://yoursite.com/2018/05/10/Hadoop%E7%9B%B8%E5%85%B3/hadoop%E9%AB%98%E5%8F%AF%E7%94%A8%20/"/>
    <id>http://yoursite.com/2018/05/10/Hadoop相关/hadoop高可用 /</id>
    <published>2018-05-10T12:17:45.681Z</published>
    <updated>2018-05-10T13:20:50.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hadoop高可用"><a href="#hadoop高可用" class="headerlink" title="hadoop高可用"></a>hadoop高可用</h1><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="/images/15259565053935.jpg" alt=""></p><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><h3 id="集群节点规划"><a href="#集群节点规划" class="headerlink" title="集群节点规划"></a>集群节点规划</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server01   namenode   zkfc    &gt; start-dfs.sh</div><div class="line">server02   namenode   zkfc</div><div class="line"></div><div class="line">server03   resourcemanager    &gt; start-yarn.sh</div><div class="line">server04   resourcemanager</div><div class="line"></div><div class="line">server05   datanode   nodemanager     </div><div class="line">server06   datanode   nodemanager     </div><div class="line">server07   datanode   nodemanager     </div><div class="line"></div><div class="line">server08   journal node    zookeeper</div><div class="line">server09   journal node    zookeeper</div><div class="line">server10   journal node    zookeeper</div></pre></td></tr></table></figure><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>linux环境</li><li>java环境</li><li>zookeeper环境<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">&lt;!-- 指定hdfs的nameservice为ns1 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">&lt;value&gt;hdfs://ns1/&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- 指定hadoop临时目录 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class="line">&lt;value&gt;/home/hadoop/app/hadoop-2.4.1/tmp&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line"></div><div class="line">&lt;!-- 指定zookeeper地址 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</div><div class="line">&lt;value&gt;weekend05:2181,weekend06:2181,weekend07:2181&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure><h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">configuration&gt;</div><div class="line">&lt;!--指定hdfs的nameservice为ns1，需要和core-site.xml中的保持一致 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.nameservices&lt;/name&gt;</div><div class="line">&lt;value&gt;ns1&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- ns1下面有两个NameNode，分别是nn1，nn2 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.ha.namenodes.ns1&lt;/name&gt;</div><div class="line">&lt;value&gt;nn1,nn2&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- nn1的RPC通信地址 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.namenode.rpc-address.ns1.nn1&lt;/name&gt;</div><div class="line">&lt;value&gt;weekend01:9000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- nn1的http通信地址 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.namenode.http-address.ns1.nn1&lt;/name&gt;</div><div class="line">&lt;value&gt;weekend01:50070&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- nn2的RPC通信地址 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.namenode.rpc-address.ns1.nn2&lt;/name&gt;</div><div class="line">&lt;value&gt;weekend02:9000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- nn2的http通信地址 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.namenode.http-address.ns1.nn2&lt;/name&gt;</div><div class="line">&lt;value&gt;weekend02:50070&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- 指定NameNode的edits元数据在JournalNode上的存放位置 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</div><div class="line">&lt;value&gt;qjournal://weekend05:8485;weekend06:8485;weekend07:8485/ns1&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</div><div class="line">&lt;value&gt;/home/hadoop/app/hadoop-2.4.1/journaldata&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- 开启NameNode失败自动切换 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;</div><div class="line">&lt;value&gt;true&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- 配置失败自动切换实现方式 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.client.failover.proxy.provider.ns1&lt;/name&gt;</div><div class="line">&lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行--&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</div><div class="line">&lt;value&gt;</div><div class="line">sshfence</div><div class="line">shell(/bin/true)</div><div class="line">&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</div><div class="line">&lt;value&gt;/home/hadoop/.ssh/id_rsa&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;!-- 配置sshfence隔离机制超时时间 --&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt;</div><div class="line">&lt;value&gt;30000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">/configuration&gt;</div></pre></td></tr></table></figure><h4 id="hdfs-haadmin-help"><a href="#hdfs-haadmin-help" class="headerlink" title="hdfs  haadmin -help"></a>hdfs  haadmin -help</h4><ul><li>查看namenode工作状态</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs haadmin -getServiceState nn1</div></pre></td></tr></table></figure><ul><li>将standby状态namenode切换到active</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs haadmin -transitionToActive nn1</div></pre></td></tr></table></figure><ul><li>将active状态namenode切换到standby</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs haadmin -transitionToActive nn1</div></pre></td></tr></table></figure><h4 id="数据块的balance"><a href="#数据块的balance" class="headerlink" title="数据块的balance"></a>数据块的balance</h4><h5 id="启动balancer的命令"><a href="#启动balancer的命令" class="headerlink" title="启动balancer的命令"></a>启动balancer的命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start-balancer.sh -threshold 8(默认为10)</div></pre></td></tr></table></figure><h4 id="HA下hdfs-api变化"><a href="#HA下hdfs-api变化" class="headerlink" title="HA下hdfs-api变化"></a>HA下hdfs-api变化</h4><blockquote><p>客户端需要nameservice的配置信息，其他不变</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hadoop高可用&quot;&gt;&lt;a href=&quot;#hadoop高可用&quot; class=&quot;headerlink&quot; title=&quot;hadoop高可用&quot;&gt;&lt;/a&gt;hadoop高可用&lt;/h1&gt;&lt;h2 id=&quot;图解&quot;&gt;&lt;a href=&quot;#图解&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce（二）</title>
    <link href="http://yoursite.com/2018/05/10/Hadoop%E7%9B%B8%E5%85%B3/MapReduce%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/10/Hadoop相关/MapReduce（二）/</id>
    <published>2018-05-10T08:15:02.857Z</published>
    <updated>2018-05-10T12:45:24.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MapReduce（二）"><a href="#MapReduce（二）" class="headerlink" title="MapReduce（二）"></a>MapReduce（二）</h1><h2 id="流量统计相关需求"><a href="#流量统计相关需求" class="headerlink" title="流量统计相关需求"></a>流量统计相关需求</h2><ul><li>自定义javaBean用来在mapreduce中充当value，注意 javaBean要实现Writable接口，实现两个方法<strong>write</strong> 和 <strong>readFields</strong></li><li>统计流量且按照流量大小倒序排序：需要两个mapreduce-job,第一个负责流量统计，第二个读入第一个job的输出，然后做排序，flowBean要实现接口WritableComparable</li><li>统计流量按照手机号码的归属地，将结果数据输出到不同省分文件中：自定义Partitioner</li></ul><h2 id="社交分数数据分析"><a href="#社交分数数据分析" class="headerlink" title="社交分数数据分析"></a>社交分数数据分析</h2><ul><li>求出哪些人两两之间有共同好友，及他俩的共同好友都有谁？</li><li>求互粉的人</li></ul><h2 id="倒排索引的建立"><a href="#倒排索引的建立" class="headerlink" title="倒排索引的建立"></a>倒排索引的建立</h2><blockquote><p>需求：有大量的文本（文档，网页），需要建立搜索索引</p></blockquote><h3 id="小文件的优化"><a href="#小文件的优化" class="headerlink" title="小文件的优化"></a>小文件的优化</h3><ul><li>在数据采集的时候，就将小文件或小批数据合成大文件再上传HDFS</li><li>在业务处理之前，在HDFS上使用mapreduce程序对小文件进行合并</li><li>在mapreduce处理时，可以采用combineInputFormat提高效率</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>自定义一个InputFormat，改写RecordReader，实现一次读取一个完整文件封装为KV，在输出时使用SequenceFileOutPutFormat输出合并文件</li><li>自定义outputFormat，改写其中的RecordWriter，改写具体输出数据的方法write(),在mapreduce中访问外部资源</li></ul><h2 id="自定义GroupingComparator"><a href="#自定义GroupingComparator" class="headerlink" title="自定义GroupingComparator"></a>自定义GroupingComparator</h2><blockquote><p>需求 求每个订单中成交金额最大的一笔交易</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>利用”订单id和成交金额”作为key，可以将map阶段读取到的所有订单数据按照id分区，按照金额排序，发送到reduce</li><li>在reduce端利用groupingcomparator将订单id相同的kv聚合成组，然后取第一个即是最大值</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul><li><p>自定义groupingComparator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class ItemidGroupingComparator extends WritableComparator&#123;&#125;</div></pre></td></tr></table></figure></li><li><p>定义订单信息bean</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class OrderBean implements WritableComparable&lt;OrderBean&gt;&#123;&#125;</div></pre></td></tr></table></figure><h2 id="Mapreduce中的DistributedCache应用"><a href="#Mapreduce中的DistributedCache应用" class="headerlink" title="Mapreduce中的DistributedCache应用"></a>Mapreduce中的DistributedCache应用</h2><blockquote><p>需求：实现两个“表”的join操作，其中一个表数据量小，一个表数据量很大</p></blockquote><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ul><li>可以将小表分发到私有的map节点，从而每个maptask节点可以从本地加载到小表的数据，进而在本地即可实现join</li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public class TestDistributedCache&#123;</div><div class="line"> static class TestDistributedCacheMapper extends Mapper&lt;LongWritable, Text, Text, Text&gt;&#123;</div><div class="line"> &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Mapreduce-的其他补充"><a href="#Mapreduce-的其他补充" class="headerlink" title="Mapreduce 的其他补充"></a>Mapreduce 的其他补充</h2><h3 id="计数器应用"><a href="#计数器应用" class="headerlink" title="计数器应用"></a>计数器应用</h3><blockquote><p>如果将不合规数据进行全局计数，类似这种需求可以借助mapreduce框架中提供的全局计数器来实现</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class MultiOutputs &#123;</div><div class="line">  //通过枚举形式定义自定义计数器</div><div class="line">  enum MyCounter&#123;MALFORORMED,NORMAL&#125;</div><div class="line"></div><div class="line">  static class CommaMapper extends Mapper&lt;LongWritable, Text, Text, LongWritable&gt; &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;</div><div class="line"></div><div class="line">      String[] words = value.toString().split(&quot;,&quot;);</div><div class="line"></div><div class="line">      for (String word : words) &#123;</div><div class="line">        context.write(new Text(word), new LongWritable(1));</div><div class="line">      &#125;</div><div class="line">      //对枚举定义的自定义计数器加1</div><div class="line">      context.getCounter(MyCounter.MALFORORMED).increment(1);</div><div class="line">      //通过动态设置自定义计数器加1</div><div class="line">      context.getCounter(&quot;counterGroupa&quot;, &quot;countera&quot;).increment(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><h3 id="多job串联"><a href="#多job串联" class="headerlink" title="多job串联"></a>多job串联</h3><blockquote><p>当处理逻辑需要多个mapreduce程序串联处理，多job的串联可以借助mapreduce框架的jobControl实现</p></blockquote><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">ControlledJob cJob1 = new ControlledJob(job1.getConfiguration());</div><div class="line">ControlledJob cJob2 = new ControlledJob(job2.getConfiguration());</div><div class="line">ControlledJob cJob3 = new ControlledJob(job3.getConfiguration());</div><div class="line"></div><div class="line">// 设置作业依赖关系</div><div class="line">cJob2.addDependingJob(cJob1);</div><div class="line">cJob3.addDependingJob(cJob2);</div><div class="line"></div><div class="line">JobControl jobControl = new JobControl(&quot;RecommendationJob&quot;);</div><div class="line">jobControl.addJob(cJob1);</div><div class="line">jobControl.addJob(cJob2);</div><div class="line">jobControl.addJob(cJob3);</div><div class="line"></div><div class="line">cJob1.setJob(job1);</div><div class="line">cJob2.setJob(job2);</div><div class="line">cJob3.setJob(job3);</div><div class="line"></div><div class="line">// 新建一个线程来运行已加入JobControl中的作业，开始进程并等待结束</div><div class="line">Thread jobControlThread = new Thread(jobControl);</div><div class="line">jobControlThread.start();</div><div class="line">while (!jobControl.allFinished()) &#123;</div><div class="line">    Thread.sleep(500);</div><div class="line">&#125;</div><div class="line">jobControl.stop();</div><div class="line"></div><div class="line">return 0;</div></pre></td></tr></table></figure><h2 id="mapreduce参数优化"><a href="#mapreduce参数优化" class="headerlink" title="mapreduce参数优化"></a>mapreduce参数优化</h2><h3 id="资源相关参数"><a href="#资源相关参数" class="headerlink" title="资源相关参数"></a>资源相关参数</h3><ul><li>mapreduce.map.memory.mb: 一个Map Task可使用的资源上限（单位:MB），默认为1024。如果Map Task实际使用的资源量超过该值，则会被强制杀死。</li><li>mapreduce.reduce.memory.mb: 一个Reduce Task可使用的资源上限（单位:MB），默认为1024。如果Reduce Task实际使用的资源量超过该值，则会被强制杀死。</li><li>mapreduce.map.java.opts: Map Task的JVM参数，你可以在此配置默认的java heap size等参数, e.g. “-Xmx1024m -verbose:gc -Xloggc:/tmp/@taskid@.gc” （@taskid@会被Hadoop框架自动换为相应的taskid）, 默认值: “”</li><li>mapreduce.reduce.java.opts: Reduce Task的JVM参数，你可以在此配置默认的java heap size等参数, e.g.”-Xmx1024m -verbose:gc -Xloggc:/tmp/@taskid@.gc”, 默认值: “”</li><li>mapreduce.map.cpu.vcores: 每个Map task可使用的最多cpu core数目, 默认值: 1</li><li>mapreduce.map.cpu.vcores: 每个Reduce task可使用的最多cpu core数目, 默认值: 1</li></ul><h3 id="容错相关参数"><a href="#容错相关参数" class="headerlink" title="容错相关参数"></a>容错相关参数</h3><ul><li>mapreduce.map.maxattempts: 每个Map Task最大重试次数，一旦重试参数超过该值，则认为Map Task运行失败，默认值：4。</li><li>mapreduce.reduce.maxattempts: 每个Reduce Task最大重试次数，一旦重试参数超过该值，则认为Map Task运行失败，默认值：4。</li><li>mapreduce.map.failures.maxpercent: 当失败的Map Task失败比例超过该值为，整个作业则失败，默认值为0. 如果你的应用程序允许丢弃部分输入数据，则该该值设为一个大于0的值，比如5，表示如果有低于5%的Map Task失败（如果一个Map Task重试次数超过mapreduce.map.maxattempts，则认为这个Map Task失败，其对应的输入数据将不会产生任何结果），整个作业扔认为成功。</li><li>mapreduce.reduce.failures.maxpercent: 当失败的Reduce Task失败比例超过该值为，整个作业则失败，默认值为0.</li><li>mapreduce.task.timeout: Task超时时间，经常需要设置的一个参数，该参数表达的意思为：如果一个task在一定时间内没有任何进入，即不会读取新的数据，也没有输出数据，则认为该task处于block状态，可能是卡住了，也许永远会卡主，为了防止因为用户程序永远block住不退出，则强制设置了一个该超时时间（单位毫秒），默认是300000。如果你的程序对每条输入数据的处理时间过长（比如会访问数据库，通过网络拉取数据等），建议将该参数调大，该参数过小常出现的错误提示是”AttemptID:attempt_14267829456721_123456_m_000224_0 Timed out after 300 secsContainer killed by the ApplicationMaster.”。</li></ul><h3 id="本地运行mapreduce作业"><a href="#本地运行mapreduce作业" class="headerlink" title="本地运行mapreduce作业"></a>本地运行mapreduce作业</h3><ul><li>mapreduce.framework.name=local</li><li>mapreduce.jobtracker.address=local</li><li>fs.defaultFS=local</li></ul><h3 id="效率和稳定性相关参数"><a href="#效率和稳定性相关参数" class="headerlink" title="效率和稳定性相关参数"></a>效率和稳定性相关参数</h3><ul><li>mapreduce.map.speculative: 是否为Map Task打开推测执行机制，默认为false</li><li>mapreduce.reduce.speculative: 是否为Reduce Task打开推测执行机制，默认为false</li><li>mapreduce.job.user.classpath.first &amp; mapreduce.task.classpath.user.precedence：当同一个class同时出现在用户jar包和hadoop jar中时，优先使用哪个jar包中的class，默认为false，表示优先使用hadoop jar中的class。</li><li>mapreduce.input.fileinputformat.split.minsize: 每个Map Task处理的数据量（仅针对基于文件的Inputformat有效，比如TextInputFormat，SequenceFileInputFormat），默认为一个block大小，即 134217728。</li></ul><h3 id="job-提交形成的资源文件"><a href="#job-提交形成的资源文件" class="headerlink" title="job 提交形成的资源文件"></a>job 提交形成的资源文件</h3><ul><li>job.split</li><li>job.splittemtainfo</li><li>job.xml</li></ul><h3 id="mapreduce程序开发的一些总结"><a href="#mapreduce程序开发的一些总结" class="headerlink" title="mapreduce程序开发的一些总结"></a>mapreduce程序开发的一些总结</h3><h4 id="输入数据接口"><a href="#输入数据接口" class="headerlink" title="输入数据接口"></a>输入数据接口</h4><ul><li>InputFormat</li><li>FileInputFormat（文件类型数据读取的通用抽象类）</li><li>DBInputFormat（数据库读取的通用抽象类）</li><li>默认实现类是：TextInputFormat: job.setInputFormatClass(TextInputFormat.class) TextInputFormat的功能逻辑是：一次读一行文本，然后将改行的起始偏移量作为key，行内容作为value返回</li></ul><h4 id="逻辑处理接口：Mapper"><a href="#逻辑处理接口：Mapper" class="headerlink" title="逻辑处理接口：Mapper"></a>逻辑处理接口：Mapper</h4><p>完全需要用户自己去实现其中 map() setup() clean()</p><h4 id="Map输出的结果在shuffle阶段"><a href="#Map输出的结果在shuffle阶段" class="headerlink" title="Map输出的结果在shuffle阶段"></a>Map输出的结果在shuffle阶段</h4><ul><li>Partitioner 有默认实现HashPartitioner。逻辑是根据key和numReduces返回一个分区号：key.hashCode()&amp;Integer.MAXVALUE % numReduces 通常情况下，用默认的这个HashPartitioner就可以，如果业务上有特别的需求，可以自定义.</li><li>Comparable 当我们用自定义的对象作为key来输出时，就必须要实现WritableComparable接口，override其中的compareTo()方法</li></ul><h4 id="reduce端的数据分组比较接口：Groupingcomparator"><a href="#reduce端的数据分组比较接口：Groupingcomparator" class="headerlink" title="reduce端的数据分组比较接口：Groupingcomparator"></a>reduce端的数据分组比较接口：Groupingcomparator</h4><ul><li><p>reduceTask拿到输入数据（一个partition的所有数据）后，首先需要对数据进行分组，其分组的默认原则是key相同，然后对每一组kv数据调用一次reduce()方法，并且将这一组kv中的第一个kv的key作为参数传给reduce的key，将这一组数据的value的迭代器传给reduce()的values参数</p></li><li><p>利用上述这个机制，我们可以实现一个高效的分组取最大值的逻辑：自定义一个bean对象用来封装我们的数据，然后改写其compareTo方法产生倒序排序的效果，然后自定义一个Groupingcomparator，将bean对象的分组逻辑改成按照我们的业务分组id来分组（比如订单号）这样，我们要取的最大值就是reduce()方法中传进来key</p></li></ul><h4 id="逻辑处理接口：Reducer"><a href="#逻辑处理接口：Reducer" class="headerlink" title="逻辑处理接口：Reducer"></a>逻辑处理接口：Reducer</h4><ul><li>完全需要用户自己去实现其中  reduce()   setup()   clean() </li></ul><h4 id="输出数据接口："><a href="#输出数据接口：" class="headerlink" title="输出数据接口："></a>输出数据接口：</h4><ul><li>OutputFormat  —&gt; 有一系列子类  FileOutputformat  DBoutputFormat  …..</li><li>默认实现类是TextOutputFormat，功能逻辑是：  将每一个KV对向目标文本文件中输出为一行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MapReduce（二）&quot;&gt;&lt;a href=&quot;#MapReduce（二）&quot; class=&quot;headerlink&quot; title=&quot;MapReduce（二）&quot;&gt;&lt;/a&gt;MapReduce（二）&lt;/h1&gt;&lt;h2 id=&quot;流量统计相关需求&quot;&gt;&lt;a href=&quot;#流量统计相
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce（一）</title>
    <link href="http://yoursite.com/2018/05/10/Hadoop%E7%9B%B8%E5%85%B3/MapReduce%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/10/Hadoop相关/MapReduce（一）/</id>
    <published>2018-05-10T01:19:12.342Z</published>
    <updated>2018-05-10T08:14:42.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MapReduce（一）"><a href="#MapReduce（一）" class="headerlink" title="MapReduce（一）"></a>MapReduce（一）</h1><h2 id="MapReduce框架结构及核心运行机制"><a href="#MapReduce框架结构及核心运行机制" class="headerlink" title="MapReduce框架结构及核心运行机制"></a>MapReduce框架结构及核心运行机制</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>MRAppMaster：负责整个程序的过程调度及状态协调</li><li>MapTask： 负责map阶段的整个数据处理流程</li><li>ReduceTask： 负责reduce阶段的整个数据处理流程</li></ul><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul><li>一个mr程序启动时，最先启动的是MRAppMaster，MRAppMaster启动后根据本次job的描述信息，计算出需要的maptask实例数量，然后向集群机器申请机器启动相应数量的maptask进程</li><li>maptask进程启动之后，根据给定的数据切片范围进行数据处理，主体流程为：<ul><li>利用客户端指定的inputformat来获取RecordReader读取数据，形成输入KV对</li><li>将输入KV对传递给客户端定义的map()方法，做逻辑运算，并将map()方法输出的KV对收集到缓存</li><li>将缓存中的KV对按照k分区排序后不断溢写到磁盘文件</li></ul></li><li>MRAppMaster监控到私有maptask进程任务完成疑惑，会根据客户端指定的参数启动相应数量的reducetask进程，并告知reducetask进程要处理的数据范围（数据分区）</li><li>MRAppMaster从maptask运行所在的机器上获取到若干个maptask输出结果文件，并在本地进行重新归并排序，然后按照相同的key的KV分为一个组，调用客户端定义的reduce()进行逻辑运算，然后调用客户指定的outputformat将结果数据输出到外部存储</li></ul><h2 id="MapTask并行度决定机制"><a href="#MapTask并行度决定机制" class="headerlink" title="MapTask并行度决定机制"></a>MapTask并行度决定机制</h2><blockquote><p>将待处理数据执行逻辑切片（即按照一个特定切片的大小，将待处理数据划分成逻辑上的多个split），然后每个split分配一个mapTask并行实例处理<br>FileInputFormat实现类的getSplits()方法实现切片规划，切片规划文</p></blockquote><h3 id="FileInputFormat切片机制"><a href="#FileInputFormat切片机制" class="headerlink" title="FileInputFormat切片机制"></a>FileInputFormat切片机制</h3><h4 id="FileInputFormat中切片的大小的参数配置"><a href="#FileInputFormat中切片的大小的参数配置" class="headerlink" title="FileInputFormat中切片的大小的参数配置"></a>FileInputFormat中切片的大小的参数配置</h4><ul><li>minsize: 默认值：1 -&gt; 配置参数 mapreduce.input.fileinputformat.split.minsize</li><li>maxsize：默认值：Long.MAXValue -&gt; mapreduce.input.fileinputformat.split.maxsize</li></ul><h2 id="ReduceTask并行度的决定"><a href="#ReduceTask并行度的决定" class="headerlink" title="ReduceTask并行度的决定"></a>ReduceTask并行度的决定</h2><p>默认值是1，手动设置为4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">job.setNumReduceTask(4) // 默认值为1</div></pre></td></tr></table></figure><blockquote><p>尽量不要运行太多的reduce task。对大多数job来说，最好reduce的个数最多和集群中的reduce持平，或者比集群的reduce slots小，这个对于小集群而言，尤其重要</p></blockquote><h2 id="集群运行模式"><a href="#集群运行模式" class="headerlink" title="集群运行模式"></a>集群运行模式</h2><ul><li>YarnRunner -&gt; Resource Manager</li><li>MRAppMaster -&gt; YarnChild(mapTask) -&gt; YarnChild(reduceTask)</li><li>改变自身身份标识<ul><li>VM arguments: -DHADOOP_USER_NAME=hadoop</li><li>conf.set(“HADOOP_USER_NAME”, “hadoop”)<h2 id="MapReduce中的Combiner"><a href="#MapReduce中的Combiner" class="headerlink" title="MapReduce中的Combiner"></a>MapReduce中的Combiner</h2><blockquote><p>combiner的意义就是对每一个maptask的输出进行局部汇总，以减少网络传输量</p></blockquote></li></ul></li></ul><h3 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h3><ul><li>自定义一个combiner继承Reducer，重写reduce方法</li><li>在job中设置：job.setCombinerClass(CustomCombiner.class)</li></ul><h2 id="mapreduce的shuffle机制"><a href="#mapreduce的shuffle机制" class="headerlink" title="mapreduce的shuffle机制"></a>mapreduce的shuffle机制</h2><blockquote><p>核心机制：数据分区，排序，缓存，就是将maptask输出的处理结果数据，分发给reducetask，并在分发的过程中，对数据按key进行分区和排序</p></blockquote><ul><li>分区partition</li><li>Sort根据key排序</li><li>Combiner进行局部value的合并</li></ul><blockquote><p>Suffle中的缓冲区大小会影响到mapreduce程序的执行效率，原则上说，缓冲区越大，磁盘的io的次数越小，执行速度就越快，参数：io.sort.mb 默认 100m</p></blockquote><h2 id="MapReduce中的序列化（Writable）"><a href="#MapReduce中的序列化（Writable）" class="headerlink" title="MapReduce中的序列化（Writable）"></a>MapReduce中的序列化（Writable）</h2><h3 id="jdk序列化和MR序列化之间的比较"><a href="#jdk序列化和MR序列化之间的比较" class="headerlink" title="jdk序列化和MR序列化之间的比较"></a>jdk序列化和MR序列化之间的比较</h3><h3 id="自定义对象实现MR中的序列化接口（实现WritableComparable-lt-gt-）"><a href="#自定义对象实现MR中的序列化接口（实现WritableComparable-lt-gt-）" class="headerlink" title="自定义对象实现MR中的序列化接口（实现WritableComparable&lt;&gt;）"></a>自定义对象实现MR中的序列化接口（实现WritableComparable&lt;&gt;）</h3><blockquote><p>反序列化时，从流中读取到的各个字段的顺序应该与序列化时写出去的顺序保持一致</p></blockquote><h2 id="MapReduce与YARN"><a href="#MapReduce与YARN" class="headerlink" title="MapReduce与YARN"></a>MapReduce与YARN</h2><blockquote><p>用户程序向yarn申请资源，yarn就负责分配资源<br>ResourceManager（主管角色）<br>NodeManager （提供运算资源的角色）</p></blockquote><h2 id="MapReduce中的排序初步"><a href="#MapReduce中的排序初步" class="headerlink" title="MapReduce中的排序初步"></a>MapReduce中的排序初步</h2><h2 id="Mapreduce中的分区Partitioner"><a href="#Mapreduce中的分区Partitioner" class="headerlink" title="Mapreduce中的分区Partitioner"></a>Mapreduce中的分区Partitioner</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class ProvincePartitioner extends Partitioner&lt;Text,FlowBean&gt;&#123;</div><div class="line">    public int getPartition(Text key, FlowBean value, int numberPartitions)&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="mapreduce数据压缩"><a href="#mapreduce数据压缩" class="headerlink" title="mapreduce数据压缩"></a>mapreduce数据压缩</h2><blockquote><p>通过压缩编码对mapper或者reducer的输出进行压缩，以减少磁盘IO</p></blockquote><h3 id="mr支持的压缩编码"><a href="#mr支持的压缩编码" class="headerlink" title="mr支持的压缩编码"></a>mr支持的压缩编码</h3><p><img src="/images/15259373472785.jpg" alt=""></p><h3 id="Reducer输出压缩"><a href="#Reducer输出压缩" class="headerlink" title="Reducer输出压缩"></a>Reducer输出压缩</h3><h4 id="在配置参数中设置"><a href="#在配置参数中设置" class="headerlink" title="在配置参数中设置"></a>在配置参数中设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mapreduce.output.fileoutputformat.compress=false</div><div class="line">mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.DefaultCodec</div><div class="line">mapreduce.output.fileoutputformat.compress.type=RECORD</div></pre></td></tr></table></figure><h4 id="在代码中设置"><a href="#在代码中设置" class="headerlink" title="在代码中设置"></a>在代码中设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Job job = Job.getInstance(conf);</div><div class="line">FileOutputFormat.setCompressOutput(job, true);</div><div class="line">FileOutputFormat.setOutputCompressorClass(job, (Class&lt;? extends CompressionCodec&gt;) Class.forName(&quot;&quot;));</div></pre></td></tr></table></figure><h3 id="Mapper输出压缩"><a href="#Mapper输出压缩" class="headerlink" title="Mapper输出压缩"></a>Mapper输出压缩</h3><h4 id="在参数中配置"><a href="#在参数中配置" class="headerlink" title="在参数中配置"></a>在参数中配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mapreduce.map.output.compress=false</div><div class="line">mapreduce.map.output.compress.codec=org.apache.hadoop.io.compress.DefaultCodec</div></pre></td></tr></table></figure><h4 id="在代码中设置-1"><a href="#在代码中设置-1" class="headerlink" title="在代码中设置"></a>在代码中设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conf.setBoolean(Job.MAP_OUTPUT_COMPRESS, true);</div><div class="line">conf.setClass(Job.MAP_OUTPUT_COMPRESS_CODEC, GzipCodec.class, CompressionCodec.class);</div></pre></td></tr></table></figure><h3 id="压缩文件的读取"><a href="#压缩文件的读取" class="headerlink" title="压缩文件的读取"></a>压缩文件的读取</h3><blockquote><p>Hadoop 自带的InputFormat类内置支持压缩文件的读取，比如TextInputFormat类</p></blockquote><h4 id="initialize"><a href="#initialize" class="headerlink" title="initialize()"></a>initialize()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public void initialize(InputSplit genericSplit,TaskAttemptContext context) throws IOException &#123;</div><div class="line">    FileSplit split = (FileSplit) genericSplit;</div><div class="line">    Configuration job = context.getConfiguration();</div><div class="line">    this.maxLineLength = job.getInt(MAX_LINE_LENGTH, Integer.MAX_VALUE);</div><div class="line">    start = split.getStart();</div><div class="line">    end = start + split.getLength();</div><div class="line">    final Path file = split.getPath();</div><div class="line"></div><div class="line">    // open the file and seek to the start of the split</div><div class="line">    final FileSystem fs = file.getFileSystem(job);</div><div class="line">    fileIn = fs.open(file);</div><div class="line">    //根据文件后缀名创建相应压缩编码的codec</div><div class="line">    CompressionCodec codec = new CompressionCodecFactory(job).getCodec(file);</div><div class="line">    if (null!=codec) &#123;</div><div class="line">      isCompressedInput = true;</div><div class="line">      decompressor = CodecPool.getDecompressor(codec);</div><div class="line">  //判断是否属于可切片压缩编码类型</div><div class="line">      if (codec instanceof SplittableCompressionCodec) &#123;</div><div class="line">        final SplitCompressionInputStream cIn =</div><div class="line">          ((SplittableCompressionCodec)codec).createInputStream(</div><div class="line">            fileIn, decompressor, start, end,</div><div class="line">            SplittableCompressionCodec.READ_MODE.BYBLOCK);</div><div class="line"> //如果是可切片压缩编码，则创建一个CompressedSplitLineReader读取压缩数据</div><div class="line">        in = new CompressedSplitLineReader(cIn, job,</div><div class="line">            this.recordDelimiterBytes);</div><div class="line">        start = cIn.getAdjustedStart();</div><div class="line">        end = cIn.getAdjustedEnd();</div><div class="line">        filePosition = cIn;</div><div class="line">      &#125; else &#123;</div><div class="line">//如果是不可切片压缩编码，则创建一个SplitLineReader读取压缩数据，并将文件输入流转换成解压数据流传递给普通SplitLineReader读取</div><div class="line">        in = new SplitLineReader(codec.createInputStream(fileIn,</div><div class="line">            decompressor), job, this.recordDelimiterBytes);</div><div class="line">        filePosition = fileIn;</div><div class="line">      &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">      fileIn.seek(start);</div><div class="line">   //如果不是压缩文件，则创建普通SplitLineReader读取数据</div><div class="line">      in = new SplitLineReader(fileIn, job, this.recordDelimiterBytes);</div><div class="line">      filePosition = fileIn;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="reduce端join算法实现"><a href="#reduce端join算法实现" class="headerlink" title="reduce端join算法实现"></a>reduce端join算法实现</h3><blockquote><p>通过关联条件作为map输出的key，将满足join条件的数据并携带数据数据所有来源的文件信息，发往同一个reduce task，在reduce中进行数据的串联</p><h3 id="map端的join算法实现"><a href="#map端的join算法实现" class="headerlink" title="map端的join算法实现"></a>map端的join算法实现</h3><p>适用于关联表中有小表的情形，可以将小表分发到所有的map结点，这样，map结点就可以在本地对自己所读到的大表数据进行join并输出到最终结果，可以大大提高join操作的并发度，加快处理速度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void setup(Context context) throws IOException,interruptedException&#123;&#125;</div></pre></td></tr></table></figure><h3 id="web日志处理"><a href="#web日志处理" class="headerlink" title="web日志处理"></a>web日志处理</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li>对web访问日志中的各个字段识别切分</li><li>去除日志中不合法的记录</li><li>根据KPI统计需求，生成各类访问请求过滤数据</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>bean 实体</li><li>parser 解析</li><li>mapreduce 程序</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MapReduce（一）&quot;&gt;&lt;a href=&quot;#MapReduce（一）&quot; class=&quot;headerlink&quot; title=&quot;MapReduce（一）&quot;&gt;&lt;/a&gt;MapReduce（一）&lt;/h1&gt;&lt;h2 id=&quot;MapReduce框架结构及核心运行机制&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之职责链模式</title>
    <link href="http://yoursite.com/2018/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/25/设计模式/设计模式之职责链模式/</id>
    <published>2018-04-25T08:53:03.223Z</published>
    <updated>2018-04-25T09:12:56.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加薪非要老总批？–职责链设计模式"><a href="#加薪非要老总批？–职责链设计模式" class="headerlink" title="加薪非要老总批？–职责链设计模式"></a>加薪非要老总批？–职责链设计模式</h1><blockquote><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</p></blockquote><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="/images/15246475027385.jpg" alt=""></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这里以呼叫中心为例，分为接线员，主管，经理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;加薪非要老总批？–职责链设计模式&quot;&gt;&lt;a href=&quot;#加薪非要老总批？–职责链设计模式&quot; class=&quot;headerlink&quot; title=&quot;加薪非要老总批？–职责链设计模式&quot;&gt;&lt;/a&gt;加薪非要老总批？–职责链设计模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>轻量级RPC框架开发</title>
    <link href="http://yoursite.com/2018/04/16/Hadoop%E7%9B%B8%E5%85%B3/%E8%BD%BB%E9%87%8F%E7%BA%A7RPC%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/04/16/Hadoop相关/轻量级RPC框架开发/</id>
    <published>2018-04-16T04:52:53.840Z</published>
    <updated>2018-06-06T11:28:16.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="轻量级RPC框架开发"><a href="#轻量级RPC框架开发" class="headerlink" title="轻量级RPC框架开发"></a>轻量级RPC框架开发</h1><h2 id="RPC原理"><a href="#RPC原理" class="headerlink" title="RPC原理"></a>RPC原理</h2><blockquote><p>远程过程调用协议</p></blockquote><h3 id="自定义RPC框架的设计思路"><a href="#自定义RPC框架的设计思路" class="headerlink" title="自定义RPC框架的设计思路"></a>自定义RPC框架的设计思路</h3><p>服务端<br>扫描注解<br>@RpcService(“registerService”)</p><p>socketServer（Netty替代）<br>invoke()中<br>response result(socket)</p><p>客户端<br>从zookeeper中找接口和地址<br>注入动态代理对象<br>在invoke()中封装成request对象<br>接口名<br>方法名<br>方法参数obj<br>（socket）</p><p>zookeeper<br>注册实现类，接口，抽象类的地址</p><h2 id="NIO（比较AIO）"><a href="#NIO（比较AIO）" class="headerlink" title="NIO（比较AIO）"></a>NIO（比较AIO）</h2><h2 id="netty"><a href="#netty" class="headerlink" title="netty"></a>netty</h2><h2 id="自定义的RPC"><a href="#自定义的RPC" class="headerlink" title="自定义的RPC"></a>自定义的RPC</h2><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ul><li>标记清除（空间容易碎片化） -清除无用对象</li><li>标记整理 -整理有用对象</li><li>复制算法 </li></ul><h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h4><p>Serial收集器（新生代复制，老年代复制整理）<br>Serial Old</p><p>Parallel Scavenge收集器</p><p>CMS收集器（标记清除）<br>初始标记<br>并发标记<br>重新标记<br>并发清除</p><p>G1<br>并行与并发</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>JConsole<br>MemoryAnalyzer（分析dump工具）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;轻量级RPC框架开发&quot;&gt;&lt;a href=&quot;#轻量级RPC框架开发&quot; class=&quot;headerlink&quot; title=&quot;轻量级RPC框架开发&quot;&gt;&lt;/a&gt;轻量级RPC框架开发&lt;/h1&gt;&lt;h2 id=&quot;RPC原理&quot;&gt;&lt;a href=&quot;#RPC原理&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>JAVA高级特性</title>
    <link href="http://yoursite.com/2018/04/15/Hadoop%E7%9B%B8%E5%85%B3/JAVA%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2018/04/15/Hadoop相关/JAVA高级特性/</id>
    <published>2018-04-15T12:30:57.947Z</published>
    <updated>2018-06-06T11:27:56.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA高级特性"><a href="#JAVA高级特性" class="headerlink" title="JAVA高级特性"></a>JAVA高级特性</h1><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="java中实现线程的两种方式"><a href="#java中实现线程的两种方式" class="headerlink" title="java中实现线程的两种方式"></a>java中实现线程的两种方式</h3><ul><li><p>继承Thread</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Thread thread = new MyThread()</div><div class="line">thread.start()  //启动一个新的线程</div><div class="line">thread.run()    //还是在主线程中运行run(),普通方法调用</div></pre></td></tr></table></figure></li></ul><ul><li><p>实现Runable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Thread thread1 = new Thread(new MyThreadRunable(1),&quot;Thread-1&quot;);</div><div class="line">thread1.start();</div></pre></td></tr></table></figure></li></ul><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>同步代码块</p><h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><ul><li>lockInterruptibly() 可以被中断（等待者）</li><li>tryLock() 如果拿不到锁，不用等待</li><li>tryLock(long time, TimeUnit unit) 时间到后，拿不到锁，返回false </li><li>ReentrantLock实现类</li><li>ReadWriteLock 读写锁 readLock(),writeLock</li></ul><h2 id="并发包（原子量、并发集合、同步器、可重入锁）"><a href="#并发包（原子量、并发集合、同步器、可重入锁）" class="headerlink" title="并发包（原子量、并发集合、同步器、可重入锁）"></a>并发包（原子量、并发集合、同步器、可重入锁）</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li>Single Thread Executor</li><li>Cached Thread Pool</li><li>Fixed Thread Pool</li><li>Scheduled Thread Pool</li><li>Single Thread Scheduled Pool</li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>kafka?</p><h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h4><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><ul><li>add(obj)</li><li>offer(obj)</li><li>put(obj)</li></ul><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><ul><li>poll(time)</li><li>take()</li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>boolean remove(Object o)<br>boolean contains(Object o)<br>int drainTo(Collection&lt;?super E&gt; c)<br>int drainTo(Collection&lt;?super E&gt; c, int maxElements)</p><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><h4 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h4><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>不能保证非原子操作的线程安全问题</p><h3 id="ThreadPoolWithRunable-与-ThreadPoolWithCallable（可以返回方法，主线程可能会阻塞）"><a href="#ThreadPoolWithRunable-与-ThreadPoolWithCallable（可以返回方法，主线程可能会阻塞）" class="headerlink" title="ThreadPoolWithRunable 与 ThreadPoolWithCallable（可以返回方法，主线程可能会阻塞）"></a>ThreadPoolWithRunable 与 ThreadPoolWithCallable（可以返回方法，主线程可能会阻塞）</h3><h2 id="JMS-Java-Message-Service"><a href="#JMS-Java-Message-Service" class="headerlink" title="JMS(Java Message Service)"></a>JMS(Java Message Service)</h2><ul><li>JMS提供者</li><li>JMS客户（生产者-消费者）</li><li>JMS消息</li><li>JMS队列</li><li>JMS主题</li></ul><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><ul><li>点对点或队列</li><li>发布订阅<h3 id="ActivveMQ"><a href="#ActivveMQ" class="headerlink" title="ActivveMQ"></a>ActivveMQ</h3>activemq.xml<h2 id="动态代理和反射"><a href="#动态代理和反射" class="headerlink" title="动态代理和反射"></a>动态代理和反射</h2></li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>socketServer<br>socket = server.accept()<br>request = socekt.read()<br>…..<br>socekt.read()</p><p>client<br>socket = new socket()<br>socket.send(request)<br>….<br>socket.read()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA高级特性&quot;&gt;&lt;a href=&quot;#JAVA高级特性&quot; class=&quot;headerlink&quot; title=&quot;JAVA高级特性&quot;&gt;&lt;/a&gt;JAVA高级特性&lt;/h1&gt;&lt;h2 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之外观模式</title>
    <link href="http://yoursite.com/2018/04/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/15/设计模式/设计模式之外观模式/</id>
    <published>2018-04-15T08:19:27.369Z</published>
    <updated>2018-04-15T12:09:02.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="牛市股票还会亏钱-外观模式"><a href="#牛市股票还会亏钱-外观模式" class="headerlink" title="牛市股票还会亏钱-外观模式"></a>牛市股票还会亏钱-外观模式</h1><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><blockquote><p>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用</p></blockquote><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><blockquote><p>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p></blockquote><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="/images/15237928962811.jpg" alt=""></p><blockquote><p>注：外观类知道有哪些子系统类负责处理请求，将客户端的请求代理给适当的子系统对象<br>子系统类集合实现子系统的功能，处理Facade对象指派的任务。注意子类中没有Facade的任何信息，即没有对Facade对象的引用</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><p>SubSystemOne</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  public class SubSystemOne &#123;</div><div class="line">        public void methodOne()&#123;</div><div class="line">            System.out.println(&quot;this is SubSystemOne!&quot;);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>SubSystemTwo</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  public class SubSystemTwo &#123;</div><div class="line">        public void methodTwo()&#123;</div><div class="line">            System.out.println(&quot;this is SubSystemTwo!&quot;);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>SubSystemThree</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  public class SubSystemThree &#123;</div><div class="line">        public void methodThree()&#123;</div><div class="line">            System.out.println(&quot;this is SubSystemThree!&quot;);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>Facade</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">  public class Facade &#123;</div><div class="line"></div><div class="line">    SubSystemOne subSystemOne;</div><div class="line">    SubSystemTwo subSystemTwo;</div><div class="line">    SubSystemThree subSystemThree;</div><div class="line">    public Facade()&#123;</div><div class="line">        subSystemOne = new SubSystemOne();</div><div class="line">        subSystemTwo = new SubSystemTwo();</div><div class="line">        subSystemThree = new SubSystemThree();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void methodA()&#123;</div><div class="line">        //可以调用不同的方法</div><div class="line">        subSystemOne.methodOne();</div><div class="line">        subSystemTwo.methodTwo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void methodB()&#123;</div><div class="line">        subSystemThree.methodThree();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ul><li><p>Client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  public class Client &#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        Facade facade = new Facade();</div><div class="line">        facade.methodA();</div><div class="line">        facade.methodB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;牛市股票还会亏钱-外观模式&quot;&gt;&lt;a href=&quot;#牛市股票还会亏钱-外观模式&quot; class=&quot;headerlink&quot; title=&quot;牛市股票还会亏钱-外观模式&quot;&gt;&lt;/a&gt;牛市股票还会亏钱-外观模式&lt;/h1&gt;&lt;h2 id=&quot;迪米特法则&quot;&gt;&lt;a href=&quot;#迪米特法
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper的集群搭建</title>
    <link href="http://yoursite.com/2018/04/14/Hadoop%E7%9B%B8%E5%85%B3/zookeeper%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/04/14/Hadoop相关/zookeeper的集群搭建/</id>
    <published>2018-04-14T02:45:33.035Z</published>
    <updated>2018-04-15T07:31:19.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper的集群搭建"><a href="#zookeeper的集群搭建" class="headerlink" title="zookeeper的集群搭建"></a>zookeeper的集群搭建</h1><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><ul><li><p>选举算法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PAXOS Zab</div></pre></td></tr></table></figure></li><li><p>prot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server.1=192.168.2.2:2888(通信):3888(选举)</div><div class="line">server.2=192.168.2.3:2888:3888</div></pre></td></tr></table></figure></li></ul><ul><li><p>jps</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1890 Jps</div><div class="line">1768 QuorumPeerMain</div></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cp zoo_sample.cfg zoo.cfg</div><div class="line"></div><div class="line">vi zoo.cfg</div><div class="line"></div><div class="line">dataDir=/usr/apps/zookeeper/data  # data文件夹需新建</div><div class="line"># dataLogDir=/usr/apps/zookeeper/log #log文件夹 需新建</div><div class="line">server.1=192.168.2.2:2888:3888</div><div class="line">server.2=192.168.2.4:2888:3888</div><div class="line">server.3=192.168.2.5:2888:3888</div><div class="line"></div><div class="line">mkdir data # 在dataDor中指定的文件夹下新建</div><div class="line">vi myid</div><div class="line">1 # 在myid中加入内容1，其他的机器上依次为2,3</div><div class="line"></div><div class="line">./zkServer.sh start # bin下</div><div class="line">./zkServer.sh status # bin 下</div></pre></td></tr></table></figure></li></ul><ul><li>出现的问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1、/tmp/zookeeper: binary operator expected ./zkServer.sh: line 103: /tmp/zookeeper</div><div class="line">2、/usr/apps/zookeeper/data/zookeeper_server.pid: No such file or directory</div></pre></td></tr></table></figure><p>参考解决方案：</p><h2 id="命令行客户端-zkCli-sh"><a href="#命令行客户端-zkCli-sh" class="headerlink" title="命令行客户端 zkCli.sh"></a>命令行客户端 zkCli.sh</h2><ul><li>启动 ./zkCli.sh</li><li>zookeeper数据结构：树型结构 znode</li><li>get 获取</li><li>create (短暂e，持久,) 是否带序号(-s)</li><li><p>set 更新</p></li><li><p>watch<br>默认监听一次，想一直监听的话，在process再绑定一个监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">new Watcher() &#123;  //匿名内部类</div><div class="line">@Override</div><div class="line">public void process(WatchedEvent event) &#123;</div><div class="line">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</div><div class="line">System.out.println(event.getType() + &quot;---&quot; + event.getPath());</div><div class="line">try &#123;</div><div class="line">zk.getChildren(&quot;/&quot;, true); //继续监听</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="使用java-api-Clinet"><a href="#使用java-api-Clinet" class="headerlink" title="使用java-api Clinet"></a>使用java-api Clinet</h2><ul><li>netty 异步io（NIO）的封装框架</li><li>SimpleZkClient</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">import java.io.IOException;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.zookeeper.CreateMode;</div><div class="line">import org.apache.zookeeper.KeeperException;</div><div class="line">import org.apache.zookeeper.WatchedEvent;</div><div class="line">import org.apache.zookeeper.Watcher;</div><div class="line">import org.apache.zookeeper.ZooDefs.Ids;</div><div class="line">import org.apache.zookeeper.ZooKeeper;</div><div class="line">import org.apache.zookeeper.data.Stat;</div><div class="line">import org.junit.Before;</div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">public class SimpleZkClient &#123;</div><div class="line"></div><div class="line">private static final String connectString = &quot;mini1:2181,mini2:2181,mini3:2181&quot;;</div><div class="line">private static final int sessionTimeout = 2000;</div><div class="line"></div><div class="line">ZooKeeper zkClient = null;</div><div class="line"></div><div class="line">@Before</div><div class="line">public void init() throws Exception &#123;</div><div class="line">zkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;</div><div class="line">@Override</div><div class="line">public void process(WatchedEvent event) &#123;</div><div class="line">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</div><div class="line">System.out.println(event.getType() + &quot;---&quot; + event.getPath());</div><div class="line">try &#123;</div><div class="line">zkClient.getChildren(&quot;/&quot;, true);</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 数据的增删改查</div><div class="line"> * </div><div class="line"> * @throws InterruptedException</div><div class="line"> * @throws KeeperException</div><div class="line"> */</div><div class="line"></div><div class="line">// 创建数据节点到zk中</div><div class="line">public void testCreate() throws KeeperException, InterruptedException &#123;</div><div class="line">// 参数1：要创建的节点的路径 参数2：节点大数据 参数3：节点的权限 参数4：节点的类型</div><div class="line">String nodeCreated = zkClient.create(&quot;/eclipse&quot;, &quot;hellozk&quot;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class="line">//上传的数据可以是任何类型，但都要转成byte[]</div><div class="line">&#125;</div><div class="line"></div><div class="line">//判断znode是否存在</div><div class="line">@Test</div><div class="line">public void testExist() throws Exception&#123;</div><div class="line">Stat stat = zkClient.exists(&quot;/eclipse&quot;, false);</div><div class="line">System.out.println(stat==null?&quot;not exist&quot;:&quot;exist&quot;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 获取子节点</div><div class="line">@Test</div><div class="line">public void getChildren() throws Exception &#123;</div><div class="line">List&lt;String&gt; children = zkClient.getChildren(&quot;/&quot;, true);</div><div class="line">for (String child : children) &#123;</div><div class="line">System.out.println(child);</div><div class="line">&#125;</div><div class="line">Thread.sleep(Long.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//获取znode的数据</div><div class="line">@Test</div><div class="line">public void getData() throws Exception &#123;</div><div class="line"></div><div class="line">byte[] data = zkClient.getData(&quot;/eclipse&quot;, false, null);</div><div class="line">System.out.println(new String(data));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//删除znode</div><div class="line">@Test</div><div class="line">public void deleteZnode() throws Exception &#123;</div><div class="line"></div><div class="line">//参数2：指定要删除的版本，-1表示删除所有版本</div><div class="line">zkClient.delete(&quot;/eclipse&quot;, -1);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">//删除znode</div><div class="line">@Test</div><div class="line">public void setData() throws Exception &#123;</div><div class="line"></div><div class="line">zkClient.setData(&quot;/app1&quot;, &quot;imissyou angelababy&quot;.getBytes(), -1);</div><div class="line"></div><div class="line">byte[] data = zkClient.getData(&quot;/app1&quot;, false, null);</div><div class="line">System.out.println(new String(data));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>DistributedClient</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.zookeeper.KeeperException;</div><div class="line">import org.apache.zookeeper.WatchedEvent;</div><div class="line">import org.apache.zookeeper.Watcher;</div><div class="line">import org.apache.zookeeper.ZooKeeper;</div><div class="line"></div><div class="line">public class DistributedClient &#123;</div><div class="line"></div><div class="line">private static final String connectString = &quot;mini1:2181,mini2:2181,mini3:2181&quot;;</div><div class="line">private static final int sessionTimeout = 2000;</div><div class="line">private static final String parentNode = &quot;/servers&quot;;</div><div class="line">// 注意:加volatile的意义何在？</div><div class="line">private volatile List&lt;String&gt; serverList;</div><div class="line">private ZooKeeper zk = null;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 创建到zk的客户端连接</div><div class="line"> * </div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">public void getConnect() throws Exception &#123;</div><div class="line"></div><div class="line">zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;</div><div class="line">@Override</div><div class="line">public void process(WatchedEvent event) &#123;</div><div class="line">// 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</div><div class="line">try &#123;</div><div class="line">//重新更新服务器列表，并且注册了监听</div><div class="line">getServerList();</div><div class="line"></div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 获取服务器信息列表</div><div class="line"> * </div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">public void getServerList() throws Exception &#123;</div><div class="line"></div><div class="line">// 获取服务器子节点信息，并且对父节点进行监听</div><div class="line">List&lt;String&gt; children = zk.getChildren(parentNode, true);</div><div class="line"></div><div class="line">// 先创建一个局部的list来存服务器信息</div><div class="line">List&lt;String&gt; servers = new ArrayList&lt;String&gt;();</div><div class="line">for (String child : children) &#123;</div><div class="line">// child只是子节点的节点名</div><div class="line">byte[] data = zk.getData(parentNode + &quot;/&quot; + child, false, null);</div><div class="line">servers.add(new String(data));</div><div class="line">&#125;</div><div class="line">// 把servers赋值给成员变量serverList，已提供给各业务线程使用</div><div class="line">serverList = servers;</div><div class="line"></div><div class="line">//打印服务器列表</div><div class="line">System.out.println(serverList);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 业务功能</div><div class="line"> * </div><div class="line"> * @throws InterruptedException</div><div class="line"> */</div><div class="line">public void handleBussiness() throws InterruptedException &#123;</div><div class="line">System.out.println(&quot;client start working.....&quot;);</div><div class="line">Thread.sleep(Long.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line"></div><div class="line">// 获取zk连接</div><div class="line">DistributedClient client = new DistributedClient();</div><div class="line">client.getConnect();</div><div class="line">// 获取servers的子节点信息（并监听），从中获取服务器信息列表</div><div class="line">client.getServerList();</div><div class="line"></div><div class="line">// 业务线程启动</div><div class="line">client.handleBussiness();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>DistributionServer </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">    import org.apache.zookeeper.CreateMode;</div><div class="line">    import org.apache.zookeeper.WatchedEvent;</div><div class="line">    import org.apache.zookeeper.Watcher;</div><div class="line">    import org.apache.zookeeper.ZooDefs.Ids;</div><div class="line">    import org.apache.zookeeper.ZooKeeper;</div><div class="line">    </div><div class="line">    public class DistributedServer &#123;</div><div class="line">        private static final String connectString =&quot;mini1:2181,mini2:2181,mini3:2181&quot;;</div><div class="line">        private static final int sessionTimeout = 2000;</div><div class="line">        private static final String parentNode = &quot;/servers&quot;;</div><div class="line">        private ZooKeeper zk = null;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 创建到zk的客户端连接</div><div class="line"> * </div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">public void getConnect() throws Exception &#123;</div><div class="line">   zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;</div><div class="line">       @Override</div><div class="line">       public void process(WatchedEvent event) &#123;</div><div class="line">       // 收到事件通知后的回调函数（应该是我们自己的事件处理逻辑）</div><div class="line">       System.out.println(event.getType() + &quot;---&quot; + event.getPath());</div><div class="line">       try &#123;</div><div class="line">           zk.getChildren(&quot;/&quot;, true);</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 向zk集群注册服务器信息</div><div class="line"> * </div><div class="line"> * @param hostname</div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">public void registerServer(String hostname) throws Exception &#123;</div><div class="line">   String create = zk.create(parentNode + &quot;/server&quot;,</div><div class="line">   hostname.getBytes(), Ids.OPEN_ACL_UNSAFE,</div><div class="line">   CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">   System.out.println(hostname + &quot;is online..&quot; + create);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 业务功能</div><div class="line"> * </div><div class="line"> * @throws InterruptedException</div><div class="line"> */</div><div class="line">public void handleBussiness(String hostname) throws InterruptedException &#123;</div><div class="line">   System.out.println(hostname + &quot;start working.....&quot;);</div><div class="line">   Thread.sleep(Long.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">   // 获取zk连接</div><div class="line">   DistributedServer server = new DistributedServer();</div><div class="line">   server.getConnect();</div><div class="line">   </div><div class="line">   // 利用zk连接注册服务器信息</div><div class="line">   server.registerServer(args[0]);</div><div class="line">   </div><div class="line">   // 启动业务功能</div><div class="line">   server.handleBussiness(args[0]);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> public class Test &#123;</div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">   System.out.println(&quot;主线程开始了&quot;);</div><div class="line">   Thread thread = new Thread(new Runnable() &#123;</div><div class="line">@Override</div><div class="line">public void run() &#123;</div><div class="line">System.out.println(&quot;线程开始了&quot;);</div><div class="line">while(true)&#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">thread.setDaemon(true);</div><div class="line">thread.start();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ul><li>DistributedClentLock</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">import org.apache.zookeeper.CreateMode;</div><div class="line">import org.apache.zookeeper.WatchedEvent;</div><div class="line">import org.apache.zookeeper.Watcher;</div><div class="line">import org.apache.zookeeper.Watcher.Event.EventType;</div><div class="line">import org.apache.zookeeper.ZooDefs.Ids;</div><div class="line">import org.apache.zookeeper.ZooKeeper;</div><div class="line"></div><div class="line">public class DistributedClientLock &#123;</div><div class="line"></div><div class="line"></div><div class="line">// 会话超时</div><div class="line">private static final int SESSION_TIMEOUT = 2000;</div><div class="line">// zookeeper集群地址</div><div class="line">private String hosts = &quot;mini1:2181,mini2:2181,mini3:2181&quot;;</div><div class="line">private String groupNode = &quot;locks&quot;;</div><div class="line">private String subNode = &quot;sub&quot;;</div><div class="line">private boolean haveLock = false;</div><div class="line"></div><div class="line">private ZooKeeper zk;</div><div class="line">// 记录自己创建的子节点路径</div><div class="line">private volatile String thisPath;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 连接zookeeper</div><div class="line"> */</div><div class="line">public void connectZookeeper() throws Exception &#123;</div><div class="line">zk = new ZooKeeper(hosts, SESSION_TIMEOUT, new Watcher() &#123;</div><div class="line">public void process(WatchedEvent event) &#123;</div><div class="line">try &#123;</div><div class="line"></div><div class="line">// 判断事件类型，此处只处理子节点变化事件</div><div class="line">if (event.getType() == EventType.NodeChildrenChanged &amp;&amp; event.getPath().equals(&quot;/&quot; + groupNode)) &#123;</div><div class="line">//获取子节点，并对父节点进行监听</div><div class="line">List&lt;String&gt; childrenNodes = zk.getChildren(&quot;/&quot; + groupNode, true);</div><div class="line">String thisNode = thisPath.substring((&quot;/&quot; + groupNode + &quot;/&quot;).length());</div><div class="line">// 去比较是否自己是最小id</div><div class="line">Collections.sort(childrenNodes);</div><div class="line">if (childrenNodes.indexOf(thisNode) == 0) &#123;</div><div class="line">//访问共享资源处理业务，并且在处理完成之后删除锁</div><div class="line">doSomething();</div><div class="line"></div><div class="line">//重新注册一把新的锁</div><div class="line">thisPath = zk.create(&quot;/&quot; + groupNode + &quot;/&quot; + subNode, null, Ids.OPEN_ACL_UNSAFE,</div><div class="line">CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 1、程序一进来就先注册一把锁到zk上</div><div class="line">thisPath = zk.create(&quot;/&quot; + groupNode + &quot;/&quot; + subNode, null, Ids.OPEN_ACL_UNSAFE,</div><div class="line">CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line"></div><div class="line">// wait一小会，便于观察</div><div class="line">Thread.sleep(new Random().nextInt(1000));</div><div class="line"></div><div class="line">// 从zk的锁父目录下，获取所有子节点，并且注册对父节点的监听</div><div class="line">List&lt;String&gt; childrenNodes = zk.getChildren(&quot;/&quot; + groupNode, true);</div><div class="line"></div><div class="line">//如果争抢资源的程序就只有自己，则可以直接去访问共享资源 </div><div class="line">if (childrenNodes.size() == 1) &#123;</div><div class="line">doSomething();</div><div class="line">thisPath = zk.create(&quot;/&quot; + groupNode + &quot;/&quot; + subNode, null, Ids.OPEN_ACL_UNSAFE,</div><div class="line">CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 处理业务逻辑，并且在最后释放锁</div><div class="line"> */</div><div class="line">private void doSomething() throws Exception &#123;</div><div class="line">try &#123;</div><div class="line">System.out.println(&quot;gain lock: &quot; + thisPath);</div><div class="line">Thread.sleep(2000);</div><div class="line">// do something</div><div class="line">&#125; finally &#123;</div><div class="line">System.out.println(&quot;finished: &quot; + thisPath);</div><div class="line">zk.delete(this.thisPath, -1);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">DistributedClientLock dl = new DistributedClientLock();</div><div class="line">dl.connectZookeeper();</div><div class="line">Thread.sleep(Long.MAX_VALUE);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zookeeper的集群搭建&quot;&gt;&lt;a href=&quot;#zookeeper的集群搭建&quot; class=&quot;headerlink&quot; title=&quot;zookeeper的集群搭建&quot;&gt;&lt;/a&gt;zookeeper的集群搭建&lt;/h1&gt;&lt;h2 id=&quot;zookeeper&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>自动化部署脚本</title>
    <link href="http://yoursite.com/2018/04/14/Hadoop%E7%9B%B8%E5%85%B3/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/04/14/Hadoop相关/自动化部署脚本/</id>
    <published>2018-04-14T02:12:51.733Z</published>
    <updated>2018-04-15T07:30:32.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动化部署脚本"><a href="#自动化部署脚本" class="headerlink" title="自动化部署脚本"></a>自动化部署脚本</h1><h2 id="实现ssh通路"><a href="#实现ssh通路" class="headerlink" title="实现ssh通路"></a>实现ssh通路</h2><ul><li><p>expect 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum -y install  expect </div><div class="line">yum -y install expect-devel</div><div class="line"># 安装expect的时候，应该已经装好这个依赖了，如果没有装好，安装一下</div><div class="line">yum -y install tcl</div></pre></td></tr></table></figure></li></ul><ul><li><p>脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  #!/bin/bash</div><div class="line">  SERVERS=&quot;192.168.2.4 192.168.2.5&quot;</div><div class="line">  PASSWORD=123456</div><div class="line">  auto_ssh_copy_id() &#123;</div><div class="line">    expect -c &quot;set timeout -1;</div><div class="line">        spawn ssh-copy-id $1;</div><div class="line">        expect &#123;</div><div class="line">            *(yes/no)* &#123;send -- yes\r;exp_continue;&#125;</div><div class="line">            *assword:* &#123;send -- $2\r;exp_continue;&#125;</div><div class="line">            eof        &#123;exit 0;&#125;</div><div class="line">        &#125;&quot;;</div><div class="line"> &#125;</div><div class="line">ssh_copy_id_to_all() &#123;</div><div class="line">    for SERVER in $SERVERS</div><div class="line">        do</div><div class="line">            auto_ssh_copy_id $SERVER $PASSWORD</div><div class="line">        done</div><div class="line">&#125;</div><div class="line">ssh_copy_id_to_all</div><div class="line"># 这里是将install.sh脚本copy到各台机器上，然后运行</div><div class="line">for SERVER in $SERVERS</div><div class="line">    do</div><div class="line">        scp install.sh root@$SERVER:/root</div><div class="line">        ssh root@$SERVER /root/install.sh</div><div class="line">    done</div><div class="line">  ``` </div><div class="line"></div><div class="line">## 自动化安装jdk</div><div class="line">install.sh</div></pre></td></tr></table></figure></li></ul><p>#!/bin/bash</p><h1 id="下载安装包的服务器地址"><a href="#下载安装包的服务器地址" class="headerlink" title="下载安装包的服务器地址"></a>下载安装包的服务器地址</h1><p>BASE_SERVER=192.168.2.2<br>yum install -y wget<br>wget $BASE_SERVER/software/jdk-8u161-linux-x64.tar.gz<br>tar -zxvf jdk-8u161-linux-x64.tar.gz -C /usr/share</p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>cat &gt;&gt; /etc/profile &lt;&lt; EOF<br>export JAVA_HOME=/usr/share/jdk1.8.0_161<br>export PATH=\$PATH:\$JAVA_HOME/bin<br>EOF</p><p>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动化部署脚本&quot;&gt;&lt;a href=&quot;#自动化部署脚本&quot; class=&quot;headerlink&quot; title=&quot;自动化部署脚本&quot;&gt;&lt;/a&gt;自动化部署脚本&lt;/h1&gt;&lt;h2 id=&quot;实现ssh通路&quot;&gt;&lt;a href=&quot;#实现ssh通路&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Linux相关杂记</title>
    <link href="http://yoursite.com/2018/04/14/Hadoop%E7%9B%B8%E5%85%B3/Linux%E7%9B%B8%E5%85%B3%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/14/Hadoop相关/Linux相关杂记/</id>
    <published>2018-04-14T02:10:54.996Z</published>
    <updated>2018-05-31T12:36:41.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux相关杂记"><a href="#Linux相关杂记" class="headerlink" title="Linux相关杂记"></a>Linux相关杂记</h1><h5 id="关于httpd-服务"><a href="#关于httpd-服务" class="headerlink" title="关于httpd 服务"></a>关于httpd 服务</h5><blockquote><p>启动以后，会在 /var/www/html/下生成静态页面</p></blockquote><h5 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h5><blockquote><p>ln -s /xx/xxx（源文件）  /xx/xx(目标文件)</p></blockquote><h5 id="制作局域网内的yum仓库"><a href="#制作局域网内的yum仓库" class="headerlink" title="制作局域网内的yum仓库"></a>制作局域网内的yum仓库</h5><blockquote><p>使用httpd服务以及软连接，然后在yum.repo.d指向它</p></blockquote><h5 id="scp的用法"><a href="#scp的用法" class="headerlink" title="scp的用法"></a>scp的用法</h5><p>例如： A的地址为：192.168.2.2 B的地址为192.168.2.3</p><blockquote><p>scp[参数][原路径][目标路径]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scp -r root@192.168.2.3:/home/demo /root #将远程机器上的/home/demo 下的所有文件复制到本地/root下</div><div class="line">scp -r /home/demo root@192.168.2.3:/root #将本地机器上的/home/demo 下的所有文件复制到远程机器/root下</div></pre></td></tr></table></figure><h4 id="修改-etc-profile文件后，命令都不能使用的解决方案"><a href="#修改-etc-profile文件后，命令都不能使用的解决方案" class="headerlink" title="修改/etc/profile文件后，命令都不能使用的解决方案"></a>修改/etc/profile文件后，命令都不能使用的解决方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export PATH=/usr/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin</div><div class="line"># 然后将错误的地方改回来</div><div class="line"># 一般会出错的地方可能是没有export PATH=$PATH</div></pre></td></tr></table></figure><h4 id="pstree-命令"><a href="#pstree-命令" class="headerlink" title="pstree 命令"></a>pstree 命令</h4><blockquote><p>显示bash下的进程树</p></blockquote><h4 id="关于变量在bash中的作用域"><a href="#关于变量在bash中的作用域" class="headerlink" title="关于变量在bash中的作用域"></a>关于变量在bash中的作用域</h4><blockquote><p>1、export 当前进程以及子进程生效<br> 2、B=1 只对自己bash生效<br> 3、source script.sh 当前进程下生效<br> 4、bashrc 终端登录时会执行这个sh</p></blockquote><h5 id="tree命令"><a href="#tree命令" class="headerlink" title="tree命令"></a>tree命令</h5><h5 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -s</div><div class="line">ln</div></pre></td></tr></table></figure><h5 id="hwclock-命令"><a href="#hwclock-命令" class="headerlink" title="hwclock 命令"></a>hwclock 命令</h5><h5 id="which-命令"><a href="#which-命令" class="headerlink" title="which 命令"></a>which 命令</h5><h5 id="rz-y-命令"><a href="#rz-y-命令" class="headerlink" title="rz -y 命令"></a>rz -y 命令</h5><h5 id="ssh-keygen-f-hadoop-t-rsa-b-2048"><a href="#ssh-keygen-f-hadoop-t-rsa-b-2048" class="headerlink" title="ssh-keygen -f hadoop -t rsa -b 2048"></a>ssh-keygen -f hadoop -t rsa -b 2048</h5><h5 id="ssh-copy-id-i-filename-hadoop-192-169-2-2"><a href="#ssh-copy-id-i-filename-hadoop-192-169-2-2" class="headerlink" title="ssh-copy-id -i filename hadoop@192.169.2.2"></a>ssh-copy-id -i filename hadoop@192.169.2.2</h5><h5 id="关于免密登录：-ssh必须是700-authorized-keys-必须是600"><a href="#关于免密登录：-ssh必须是700-authorized-keys-必须是600" class="headerlink" title="关于免密登录：.ssh必须是700  authorized_keys 必须是600"></a>关于免密登录：.ssh必须是700  authorized_keys 必须是600</h5><h5 id="上传sftp-put-r-path-下载lcd-get-r"><a href="#上传sftp-put-r-path-下载lcd-get-r" class="headerlink" title="上传sftp put -r path 下载lcd  get -r"></a>上传sftp put -r path 下载lcd  get -r</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux相关杂记&quot;&gt;&lt;a href=&quot;#Linux相关杂记&quot; class=&quot;headerlink&quot; title=&quot;Linux相关杂记&quot;&gt;&lt;/a&gt;Linux相关杂记&lt;/h1&gt;&lt;h5 id=&quot;关于httpd-服务&quot;&gt;&lt;a href=&quot;#关于httpd-服务&quot; cla
      
    
    </summary>
    
      <category term="Hadoop相关" scheme="http://yoursite.com/categories/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hadoop相关" scheme="http://yoursite.com/tags/Hadoop%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
</feed>
